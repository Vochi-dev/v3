#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üè™ –ú–æ–π–°–∫–ª–∞–¥ Integration Service
================================

–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ API Remap 1.2.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 31.01.2025
–í–µ—Ä—Å–∏—è: 1.0 (–§–∞–∑–∞ 1 - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)
"""

import asyncio
import os
import json
import logging
import sys
import time
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple

import aiohttp
import httpx
import uvicorn
from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import asyncpg

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –ú–æ–π–°–∫–ª–∞–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MOYSKLAD_CONFIG = {
    "base_url": "https://api.moysklad.ru/api/remap/1.2",
    "login": "",
    "password": "",
    "api_version": "1.2",
    "timeout": 30
}

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –ú–æ–π–°–∫–ª–∞–¥
JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY", "vochi-moysklad-secret-key-2025")
JWT_ALGORITHM = "HS256"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/asterisk-webhook/logs/ms.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("MoySklad")

# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

class MoySkladResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ú–æ–π–°–∫–ª–∞–¥ API"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    response_time: float
    endpoint: str


class PhoneData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    number: str


class CustomerData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    name: Optional[str] = None
    phone: Optional[str] = None  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    phones: Optional[List[PhoneData]] = None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    email: Optional[str] = None
    tags: Optional[List[str]] = None
    manager_id: Optional[str] = None  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏


class OrderData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞"""
    customer_id: str
    description: Optional[str] = None
    source: Optional[str] = None
    status_id: Optional[str] = None


class CallEventData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    phone: str
    type: str  # incoming, outgoing
    duration: Optional[int] = None
    status: str  # answered, busy, failed, etc.
    customer_id: Optional[str] = None  # ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
    manager_name: Optional[str] = None  # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    recording_url: Optional[str] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å


# =============================================================================
# –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–°
# =============================================================================

app = FastAPI(
    title="–ú–æ–π–°–∫–ª–∞–¥ Integration Service",
    version="1.0.0",
    description="–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥ —á–µ—Ä–µ–∑ API Remap 1.2"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
_CONFIG_CACHE: Dict[str, Dict[str, Any]] = {}
_LAST_CONFIG_UPDATE: Dict[str, float] = {}

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

async def get_enterprise_config(enterprise_number: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ë–î"""
    cache_key = f"config_{enterprise_number}"
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (5 –º–∏–Ω—É—Ç)
    if (cache_key in _CONFIG_CACHE and
        current_time - _LAST_CONFIG_UPDATE.get(cache_key, 0) < 300):
        return _CONFIG_CACHE[cache_key]

    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã moy_sklad_config
        row = await conn.fetchrow(
            "SELECT config FROM moy_sklad_config WHERE enterprise_number = $1",
            enterprise_number
        )

        await conn.close()

        if row:
            config = row["config"]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            _CONFIG_CACHE[cache_key] = config
            _LAST_CONFIG_UPDATE[cache_key] = current_time
            return config
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_config = {
                "enabled": False,
                "login": "",
                "password": "",
                "api_url": MOYSKLAD_CONFIG["base_url"],
                "notifications": {
                    "call_notify_mode": "none",
                    "notify_incoming": False,
                    "notify_outgoing": False
                },
                "incoming_call_actions": {
                    "create_order": False,
                    "order_status": "–ù–æ–≤—ã–π",
                    "order_source": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
                },
                "outgoing_call_actions": {
                    "create_order": False,
                    "order_status": "–ù–æ–≤—ã–π",
                    "order_source": "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
                }
            }
            return default_config

    except Exception as e:
        logger.error(f"Failed to get enterprise config: {e}")
        return {
            "enabled": False,
            "login": "",
            "password": "",
            "api_url": MOYSKLAD_CONFIG["base_url"],
            "notifications": {"call_notify_mode": "none", "notify_incoming": False, "notify_outgoing": False},
            "incoming_call_actions": {"create_order": False, "order_status": "–ù–æ–≤—ã–π", "order_source": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"},
            "outgoing_call_actions": {"create_order": False, "order_status": "–ù–æ–≤—ã–π", "order_source": "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"}
        }


async def moy_sklad_client(login: str, password: str) -> aiohttp.ClientSession:
    """–°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    auth = aiohttp.BasicAuth(login, password)
    timeout = aiohttp.ClientTimeout(total=30.0, connect=10.0)
    return aiohttp.ClientSession(
        auth=auth,
        timeout=timeout,
        headers={
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    )


async def moy_sklad_request(
    method: str,
    url: str,
    login: str,
    password: str,
    data: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ú–æ–π–°–∫–ª–∞–¥ API"""
    start_time = time.time()

    try:
        async with await moy_sklad_client(login, password) as session:
            json_data = json.dumps(data) if data else None

            async with session.request(
                method=method,
                url=url,
                data=json_data
            ) as response:

                response_time = time.time() - start_time

                try:
                    result_data = await response.json()
                except:
                    result_data = {"status_code": response.status}

                if response.status == 200:
                    return MoySkladResponse(
                        success=True,
                        data=result_data,
                        response_time=response_time,
                        endpoint=url
                    ).dict()
                else:
                    error_msg = result_data.get("errors", [{}])[0].get("error", f"HTTP {response.status}")
                    return MoySkladResponse(
                        success=False,
                        error=error_msg,
                        data=result_data,
                        response_time=response_time,
                        endpoint=url
                    ).dict()

    except Exception as e:
        response_time = time.time() - start_time
        return MoySkladResponse(
            success=False,
            error=str(e),
            response_time=response_time,
            endpoint=url
        ).dict()


async def log_integration_event(
    enterprise_number: str,
    event_type: str,
    request_data: Optional[Dict[str, Any]] = None,
    response_data: Optional[Dict[str, Any]] = None,
    error_message: Optional[str] = None,
    status: str = "success"
) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î"""
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )

        await conn.execute("""
            INSERT INTO integration_logs
            (enterprise_number, integration_type, event_type, request_data, response_data, error_message, status, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
        """,
        enterprise_number,
        "ms",
        event_type,
        json.dumps(request_data) if request_data else None,
        json.dumps(response_data) if response_data else None,
        error_message,
        status
        )

        await conn.close()

    except Exception as e:
        logger.error(f"Failed to log integration event: {e}")


# =============================================================================
# –û–°–ù–û–í–ù–´–ï API –§–£–ù–ö–¶–ò–ò
# =============================================================================

async def get_customer_by_phone(
    phone: str,
    login: str,
    password: str,
    api_url: str
) -> Optional[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, phone))

        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        url = f"{api_url}/entity/counterparty"
        params = {
            "filter": f"phone={clean_phone}",
            "limit": 1
        }

        response = await moy_sklad_request("GET", url, login, password)

        if response["success"] and response["data"]["rows"]:
            customer = response["data"]["rows"][0]
            return {
                "id": customer["id"],
                "name": customer["name"],
                "phone": clean_phone,
                "email": customer.get("email", ""),
                "tags": customer.get("tags", []),
                "manager": customer.get("owner", {}).get("name", "") if customer.get("owner") else "",
                "manager_id": customer.get("owner", {}).get("id", "") if customer.get("owner") else ""
            }

        return None

    except Exception as e:
        logger.error(f"Error getting customer by phone: {e}")
        return None


async def create_customer(
    customer_data: Dict[str, Any],
    login: str,
    password: str,
    api_url: str
) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        url = f"{api_url}/entity/counterparty"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        data = {
            "name": customer_data["name"],
            "phone": customer_data["phone"],
            "email": customer_data.get("email", ""),
            "tags": customer_data.get("tags", [])
        }

        response = await moy_sklad_request("POST", url, login, password, data)

        if response["success"]:
            return response["data"]["id"]

        return None

    except Exception as e:
        logger.error(f"Error creating customer: {e}")
        return None


async def create_order(
    order_data: Dict[str, Any],
    login: str,
    password: str,
    api_url: str
) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        url = f"{api_url}/entity/customerorder"

        data = {
            "agent": {
                "meta": {
                    "href": f"{api_url}/entity/counterparty/{order_data['customer_id']}",
                    "type": "counterparty"
                }
            },
            "description": order_data.get("description", "–°–æ–∑–¥–∞–Ω–æ –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"),
            "source": {
                "meta": {
                    "href": f"{api_url}/entity/saleschannel/{order_data.get('source_id', '')}",
                    "type": "saleschannel"
                }
            } if order_data.get("source_id") else None
        }

        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        data = {k: v for k, v in data.items() if v is not None}

        response = await moy_sklad_request("POST", url, login, password, data)

        if response["success"]:
            return response["data"]["id"]

        return None

    except Exception as e:
        logger.error(f"Error creating order: {e}")
        return None


async def get_organization(login: str, password: str, api_url: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        url = f"{api_url}/entity/organization"
        params = {"limit": 1}

        response = await moy_sklad_request("GET", url, login, password)

        if response["success"] and response["data"]["rows"]:
            org = response["data"]["rows"][0]
            return {
                "id": org["id"],
                "name": org["name"],
                "inn": org.get("inn", ""),
                "kpp": org.get("kpp", "")
            }

        return None

    except Exception as e:
        logger.error(f"Error getting organization: {e}")
        return None


# =============================================================================
# FASTAPI –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

# =============================================================================
# –ê–î–ú–ò–ù–ö–ê HTML –®–ê–ë–õ–û–ù
# =============================================================================

MS_ADMIN_HTML = """
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{enterprise_name} –ú–æ–π–°–∫–ª–∞–¥</title>
  <link rel="icon" href="/ms-admin/favicon.ico"> 
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; background:#0b1728; color:#e7eef8; }
    .wrap { max-width: 820px; margin: 0 auto; padding: 28px; }
    h1 { font-size: 24px; margin: 0 0 18px; }
    .card { background:#0f2233; border:1px solid #1b3350; border-radius:12px; padding:22px; }
    label { display:block; margin:12px 0 8px; color:#a8c0e0; font-size:14px; }
    input[type=text], input[type=password], input[type=url] { width:100%; padding:12px 14px; border-radius:10px; border:1px solid #2c4a6e; background:#0b1a2a; color:#e7eef8; font-size:16px; }
    .row { display:flex; gap:16px; flex-wrap: wrap; }
    .row > div { flex:1 1 320px; }
    .actions { margin-top:20px; display:flex; align-items:center; gap:16px; }
    .btn { background:#2563eb; color:#fff; border:none; padding:12px 18px; border-radius:10px; cursor:pointer; font-size:16px; }
    .btn:disabled { opacity:.6; cursor:not-allowed; }
    input[type=checkbox] { width:20px; height:20px; accent-color:#2563eb; }
    .hint { color:#8fb3da; font-size:13px; margin-top:6px; }
    .success { color:#4ade80; }
    .error { color:#f87171; }
    .webhook-url { background:#1a2b42; border:1px solid #2c4a6e; border-radius:8px; padding:12px; margin:8px 0; font-family:monospace; font-size:14px; word-break:break-all; }
    .copy-btn { background:#059669; color:#fff; border:none; padding:6px 12px; border-radius:6px; cursor:pointer; font-size:12px; margin-left:8px; }
  </style>
</head>
<body>
  <div class="wrap">
    <div style="display:flex; align-items:center; margin-bottom:20px;">
      <h1 style="margin:0; margin-right:15px;">{enterprise_name} –ú–æ–π–°–∫–ª–∞–¥</h1>
      <img src="/ms.png" alt="–ú–æ–π–°–∫–ª–∞–¥" style="height:48px; width:auto; background:white; padding:4px; border-radius:4px; border:1px solid #ddd;">
    </div>
    <div class="card">
      <div class="row">
        <div>
          <label>Phone API URL</label>
          <input id="phoneApiUrl" type="url" value="https://api.moysklad.ru/api/phone/1.0" readonly style="background:#1a2b42; opacity:0.7;" />
          <div class="hint">–ê–¥—Ä–µ—Å Phone API –ú–æ–π–°–∫–ª–∞–¥ (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω)</div>
        </div>
        <div>
          <label>–ö–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</label>
          <input id="integrationCode" type="text" value="" placeholder="165e3202-66ea-46e5-ab4f-3c65ad41d9ab" />
          <div class="hint">–ö–ª—é—á –æ—Ç –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏</div>
        </div>
        <div>
          <label>–¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API</label>
          <input id="apiToken" type="text" value="" placeholder="cd5134fa1beec235ed6cc3c4973d4daf540bab8b" />
          <div class="hint">–¢–æ–∫–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API –ú–æ–π–°–∫–ª–∞–¥ 1.2 (–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤)</div>
        </div>
      </div>

      <div style="margin:16px 0;">
        <label style="color:#a8c0e0; font-size:14px; margin-bottom:8px; display:block;">Webhook URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥:</label>
        <div class="webhook-url" id="webhookUrl">
          https://bot.vochi.by/ms/webhook/loading...
        </div>
        <button type="button" class="copy-btn" onclick="copyWebhookUrl()">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
        <div class="hint">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥</div>
      </div>
      <div class="actions">
        <label><input id="enabled" type="checkbox" /> –ê–∫—Ç–∏–≤–µ–Ω?</label>
        <button id="saveBtn" type="button" class="btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button id="testBtn" type="button" class="btn" style="background:#059669;">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <button id="deleteBtn" type="button" class="btn" style="background:#dc2626; margin-left:auto;">–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é</button>
        <button id="journalBtn" type="button" class="btn" style="background:#374151;">–ñ—É—Ä–Ω–∞–ª</button>
        <span id="msg" class="hint"></span>
      </div>

      <!-- –°–µ–∫—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ -->
      <div style="margin-top: 32px; border-top: 1px solid #2d3a52; padding-top: 24px;">
        <h3 style="color: #ffffff; margin-bottom: 16px; font-size: 18px;">
          üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ú–æ–π–°–∫–ª–∞–¥
        </h3>
        
        <div style="margin-bottom: 16px;">
          <button id="loadEmployeesBtn" type="button" class="btn" style="background:#059669; margin-right: 12px;">
            üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
          </button>
          <span id="employeesStatus" style="color: #a8c0e0; font-size: 14px;"></span>
        </div>

        <div id="employeesContainer" style="display: none;">
          <div style="background: #1e2537; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
            <div style="display: grid; grid-template-columns: 2fr 2fr 1fr 1fr; gap: 12px; padding: 8px 0; border-bottom: 1px solid #2d3a52; margin-bottom: 12px; font-weight: bold; color: #a8c0e0;">
              <div>–§–ò–û</div>
              <div>Email</div>
              <div>–¢–µ–ª–µ—Ñ–æ–Ω</div>
              <div>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä</div>
            </div>
            <div id="employeesList"></div>
          </div>
          
          <div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px; color: #a8c0e0;">
            <div id="employeesTotal"></div>
            <div id="employeesApiStatus"></div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- –ë–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ -->
    <div class="card" style="margin-top:20px;">
      <h2 style="margin:0 0 15px 0; font-size:20px; color:#e7eef8;">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
      
      <div style="margin-top:20px;">
        <h3 style="margin:0 0 15px 0; font-size:18px; color:#e7eef8;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
        
        <div style="margin-bottom:15px;">
          <div style="color:#a8c0e0; font-size:14px; margin-bottom:8px;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ</div>
          <div style="display:flex; gap:20px; align-items:center; margin-bottom:10px;">
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="callNotifyMode" value="none" style="width:16px; height:16px; accent-color:#2563eb;">
              –ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å
            </label>
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="callNotifyMode" value="during" checked style="width:16px; height:16px; accent-color:#2563eb;">
              –í–æ –≤—Ä–µ–º—è –¥–æ–∑–≤–æ–Ω–∞
            </label>
          </div>
        </div>
        
        <div style="display:flex; gap:20px; align-items:center;">
          <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="notifyIncoming" style="width:16px; height:16px; accent-color:#2563eb;" checked>
            –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º
          </label>
          <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="notifyOutgoing" style="width:16px; height:16px; accent-color:#2563eb;">
            –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –∏—Å—Ö–æ–¥—è—â–µ–º
          </label>
        </div>
      </div>
      
      <div style="margin-top:30px;">
        <h3 style="margin:0 0 15px 0; font-size:18px; color:#e7eef8;">–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ</h3>
        
        <div style="margin-bottom:15px;">
          <label style="display:flex; align-items:center; gap:8px; margin:0 0 10px 0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="createClientOnCall" style="width:16px; height:16px; accent-color:#2563eb;" checked>
            –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –∑–≤–æ–Ω–∫–µ
          </label>
        </div>
        
        <div style="margin-bottom:15px;">
          <div style="color:#a8c0e0; font-size:14px; margin-bottom:8px;">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</div>
          <div style="display:flex; gap:15px; align-items:center; margin-bottom:10px;">
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="createOrder" value="none" checked style="width:16px; height:16px; accent-color:#2563eb;">
              –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            </label>
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="createOrder" value="always" style="width:16px; height:16px; accent-color:#2563eb;">
              –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            </label>
          </div>
        </div>
        
        <div style="margin-bottom:15px;">
          <label style="color:#a8c0e0; font-size:14px; margin-bottom:8px; display:block;">–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞</label>
          <input type="text" id="orderSource" value="–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫" style="width:100%; padding:8px 12px; border-radius:6px; border:1px solid #2c4a6e; background:#0b1a2a; color:#e7eef8; font-size:14px;">
        </div>
      </div>
    </div>
  </div>
  <script>
  (function(){
  try {
    const qs = new URLSearchParams(location.search);
    const enterprise = qs.get('enterprise_number');

    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è webhook URL
    window.copyWebhookUrl = function() {
      const webhookUrl = document.getElementById('webhookUrl').textContent;
      navigator.clipboard.writeText(webhookUrl).then(() => {
        const btn = document.querySelector('.copy-btn');
        const originalText = btn.textContent;
        btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
        setTimeout(() => {
          btn.textContent = originalText;
        }, 2000);
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL');
      });
    };

    async function load() {
      try {
        const r = await fetch(`./api/config/${enterprise}`);
        const j = await r.json();
        const cfg = (j||{});
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø–æ–ª—è
        document.getElementById('integrationCode').value = cfg.integration_code || '';
        document.getElementById('apiToken').value = cfg.api_token || '';
        document.getElementById('enabled').checked = !!cfg.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º webhook URL - —Ç–µ–ø–µ—Ä—å –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å UUID
        const webhookUrl = cfg.webhook_url || `https://bot.vochi.by/ms/webhook/${enterprise}`;
        document.getElementById('webhookUrl').textContent = webhookUrl;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifications = cfg.notifications || {};
        const callModeNone = document.querySelector('input[name="callNotifyMode"][value="none"]');
        const callModeDuring = document.querySelector('input[name="callNotifyMode"][value="during"]');
        const notifyIncoming = document.getElementById('notifyIncoming');
        const notifyOutgoing = document.getElementById('notifyOutgoing');
        
        if (callModeNone && callModeDuring) {
          const mode = notifications.call_notify_mode || 'during';
          callModeNone.checked = (mode === 'none');
          callModeDuring.checked = (mode === 'during');
        }
        if (notifyIncoming) {
          notifyIncoming.checked = notifications.notify_incoming !== false;
        }
        if (notifyOutgoing) {
          notifyOutgoing.checked = !!notifications.notify_outgoing;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
        const actions = cfg.incoming_call_actions || {};
        const createClientOnCall = document.getElementById('createClientOnCall');
        const createOrderNone = document.querySelector('input[name="createOrder"][value="none"]');
        const createOrderAlways = document.querySelector('input[name="createOrder"][value="always"]');
        const orderSource = document.getElementById('orderSource');
        
        if (createClientOnCall) {
          createClientOnCall.checked = actions.create_client !== false;
        }
        
        if (createOrderNone && createOrderAlways) {
          const createOrderMode = actions.create_order || 'none';
          createOrderNone.checked = (createOrderMode === 'none');
          createOrderAlways.checked = (createOrderMode === 'always');
        }
        
        if (orderSource) {
          orderSource.value = actions.order_source || '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫';
        }
        
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', cfg);
      } catch(e) { 
        console.warn('load() error', e); 
      }
    }

    async function save() {
      const integrationCode = document.getElementById('integrationCode').value?.trim() || '';
      const apiToken = document.getElementById('apiToken').value?.trim() || '';
      const enabled = !!document.getElementById('enabled').checked;
      
      // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const callModeNone = document.querySelector('input[name="callNotifyMode"][value="none"]');
      const callModeDuring = document.querySelector('input[name="callNotifyMode"][value="during"]');
      const notifyIncoming = document.getElementById('notifyIncoming');
      const notifyOutgoing = document.getElementById('notifyOutgoing');
      
      const notifications = {
        call_notify_mode: (callModeNone && callModeNone.checked) ? 'none' : 'during',
        notify_incoming: !!(notifyIncoming && notifyIncoming.checked),
        notify_outgoing: !!(notifyOutgoing && notifyOutgoing.checked)
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
      const createClientOnCall = document.getElementById('createClientOnCall');
      const createOrderNone = document.querySelector('input[name="createOrder"][value="none"]');
      const createOrderAlways = document.querySelector('input[name="createOrder"][value="always"]');
      const orderSource = document.getElementById('orderSource');
      
      let createOrderMode = 'none';
      if (createOrderAlways && createOrderAlways.checked) createOrderMode = 'always';
      
      const incoming_call_actions = {
        create_client: !!(createClientOnCall && createClientOnCall.checked),
        create_order: createOrderMode,
        order_source: (orderSource && orderSource.value) || '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫'
      };
      
      const btn = document.getElementById('saveBtn');
      const msg = document.getElementById('msg');
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        let r = await fetch(`./api/config/${enterprise}`, { 
          method:'PUT', 
          headers:{'Content-Type':'application/json'}, 
          body: JSON.stringify({
            phone_api_url: 'https://api.moysklad.ru/api/phone/1.0',
            integration_code: integrationCode,
            api_token: apiToken,
            enabled: enabled,
            notifications: notifications,
            incoming_call_actions: incoming_call_actions
          }) 
        });
        const jr = await r.json();
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        if (msg) { msg.textContent='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'; msg.className='hint success'; }
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }

    async function deleteIntegration() {
      const btn = document.getElementById('deleteBtn');
      const msg = document.getElementById('msg');
      if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        const r = await fetch(`./api/config/${enterprise}`, { method:'DELETE', headers:{'Content-Type':'application/json'} });
        const jr = await r.json();
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        if (msg) { msg.textContent='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'; msg.className='hint success'; }
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('integrationCode').value = '';
        document.getElementById('apiToken').value = '';
        document.getElementById('enabled').checked = false;
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }

    async function test() {
      const btn = document.getElementById('testBtn');
      const msg = document.getElementById('msg');
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        const r = await fetch(`./api/test/${enterprise}`, { method:'POST', headers:{'Content-Type':'application/json'} });
        const jr = await r.json();
        if (jr.success) {
          if (msg) { msg.textContent=`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!`; msg.className='hint success'; }
        } else {
          if (msg) { msg.textContent=`‚ùå ${jr.error}`; msg.className='hint error'; }
        }
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }

    function openJournal() {
      const url = `./journal?enterprise_number=${enterprise}`;
      window.open(url, '_blank');
    }

    // –°–æ–±—ã—Ç–∏—è
    const saveBtn = document.getElementById('saveBtn');
    const deleteBtn = document.getElementById('deleteBtn');
    const testBtn = document.getElementById('testBtn');
    const journalBtn = document.getElementById('journalBtn');
    
    if (saveBtn) saveBtn.addEventListener('click', save);
    if (deleteBtn) deleteBtn.addEventListener('click', deleteIntegration);
    if (testBtn) testBtn.addEventListener('click', test);
    if (journalBtn) journalBtn.addEventListener('click', openJournal);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    async function loadEmployees() {
      const loadBtn = document.getElementById('loadEmployeesBtn');
      const status = document.getElementById('employeesStatus');
      const container = document.getElementById('employeesContainer');
      const list = document.getElementById('employeesList');
      const total = document.getElementById('employeesTotal');
      const apiStatus = document.getElementById('employeesApiStatus');
      
      try {
        loadBtn.disabled = true;
        loadBtn.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        status.textContent = '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...';
        
        const response = await fetch(`/ms-admin/api/employees/${enterprise}`);
        const data = await response.json();
        
        if (data.success) {
          const employees = data.employees || [];
          
          // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
          list.innerHTML = '';
          
          if (employees.length === 0) {
            list.innerHTML = '<div style="color: #a8c0e0; text-align: center; padding: 16px;">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
          } else {
            employees.forEach(emp => {
              const row = document.createElement('div');
              row.style.cssText = 'display: grid; grid-template-columns: 2fr 2fr 1fr 1fr; gap: 12px; padding: 8px 0; border-bottom: 1px solid #374151;';
              
              const extensionStyle = emp.has_extension ? 
                'background: #065f46; color: #10b981; padding: 2px 8px; border-radius: 4px; text-align: center; font-weight: bold;' :
                'color: #6b7280; text-align: center;';
              
              row.innerHTML = `
                <div style="color: #ffffff;">${emp.name}</div>
                <div style="color: #a8c0e0;">${emp.email || '‚Äî'}</div>
                <div style="color: #a8c0e0;">${emp.phone || '‚Äî'}</div>
                <div style="${extensionStyle}">${emp.extension || '‚Äî'}</div>
              `;
              list.appendChild(row);
            });
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          container.style.display = 'block';
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const withExtension = employees.filter(e => e.has_extension).length;
          total.textContent = `–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}, —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏: ${withExtension}`;
          
          const apiInfo = [];
          if (data.phone_api_available) apiInfo.push('Phone API: ‚úÖ');
          if (data.main_api_available) apiInfo.push('–û—Å–Ω–æ–≤–Ω–æ–π API: ‚úÖ');
          apiStatus.textContent = apiInfo.join(' | ');
          
          status.textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`;
          status.style.color = '#10b981';
          
        } else {
          status.textContent = `–û—à–∏–±–∫–∞: ${data.error}`;
          status.style.color = '#ef4444';
          container.style.display = 'none';
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error);
        status.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
        status.style.color = '#ef4444';
        container.style.display = 'none';
      } finally {
        loadBtn.disabled = false;
        loadBtn.innerHTML = 'üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤';
      }
    }
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    document.getElementById('loadEmployeesBtn').addEventListener('click', loadEmployees);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    load();
  } catch(e) { console.error('Main script error:', e); }
  })();
  </script>
</body>
</html>
"""

@app.get("/")
async def root():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "–ú–æ–π–°–∫–ª–∞–¥ Integration Service",
        "version": "1.0.0",
        "port": 8023,
        "api_docs": "https://dev.moysklad.ru/doc/api/remap/1.2/#mojsklad-json-api",
        "status": "running",
        "timestamp": datetime.now().isoformat()
    }


# =============================================================================
# –õ–û–ì–û–¢–ò–ü –ò –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´
# =============================================================================

@app.get("/ms.png")
async def serve_logo():
    """–û—Ç–¥–∞—á–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ú–æ–π–°–∫–ª–∞–¥"""
    import os
    from fastapi.responses import FileResponse
    
    logo_path = "/root/asterisk-webhook/ms.png"
    if os.path.exists(logo_path):
        return FileResponse(logo_path, media_type="image/png")
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        raise HTTPException(status_code=404, detail="Logo not found")

@app.get("/ms-admin/favicon.ico")
async def serve_favicon():
    """–û—Ç–¥–∞—á–∞ favicon –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    import os
    from fastapi.responses import FileResponse
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π favicon —Å–∏—Å—Ç–µ–º—ã
    favicon_path = "/root/asterisk-webhook/app/static/favicon.ico"
    if os.path.exists(favicon_path):
        return FileResponse(favicon_path, media_type="image/x-icon")
    else:
        raise HTTPException(status_code=404, detail="Favicon not found")

# =============================================================================
# –ê–î–ú–ò–ù–ö–ê –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.get("/ms-admin/")
async def ms_admin_page(enterprise_number: str):
    """–ê–¥–º–∏–Ω–∫–∞ –ú–æ–π–°–∫–ª–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    import asyncpg
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ë–î
    enterprise_name = "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres", 
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        row = await conn.fetchrow(
            "SELECT name FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        if row:
            enterprise_name = row["name"]
            
        await conn.close()
    except Exception as e:
        logger.error(f"Failed to get enterprise name: {e}")
    
    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –≤ HTML
    html_content = MS_ADMIN_HTML.replace("{enterprise_name}", enterprise_name).replace("{enterprise_number}", enterprise_number)
    
    from fastapi.responses import HTMLResponse
    return HTMLResponse(content=html_content)

@app.get("/ms-admin/api/config/{enterprise_number}")
async def ms_admin_api_get_config(enterprise_number: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        await conn.close()
        
        cfg: dict = {}
        if row and row.get("integrations_config") is not None:
            raw_cfg = row["integrations_config"]
            if isinstance(raw_cfg, str):
                try:
                    cfg = json.loads(raw_cfg) or {}
                except Exception:
                    cfg = {}
            elif isinstance(raw_cfg, dict):
                cfg = raw_cfg
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–ª–æ–≤–∞—Ä—é
                try:
                    cfg = dict(raw_cfg)
                except Exception:
                    cfg = {}

        ms_config = (cfg.get("ms") if isinstance(cfg, dict) else None) or {}
        notifications = ms_config.get("notifications", {})
        incoming_call_actions = ms_config.get("incoming_call_actions", {})

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º webhook URL —Å UUID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        webhook_uuid = ms_config.get("webhook_uuid")
        if not webhook_uuid:
            import uuid
            webhook_uuid = str(uuid.uuid4())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            ms_config["webhook_uuid"] = webhook_uuid
            current_config["ms"] = ms_config
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await conn.execute(
                "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
                json.dumps(current_config),
                enterprise_number
            )
        
        webhook_url = f"https://bot.vochi.by/ms/webhook/{webhook_uuid}"
        
        return {
            "phone_api_url": ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0"),
            "integration_code": ms_config.get("integration_code", ""),
            "api_token": ms_config.get("api_token", ""),
            "enabled": ms_config.get("enabled", False),
            "webhook_url": webhook_url,
            "notifications": {
                "call_notify_mode": notifications.get("call_notify_mode", "during"),
                "notify_incoming": notifications.get("notify_incoming", True),
                "notify_outgoing": notifications.get("notify_outgoing", False)
            },
            "incoming_call_actions": {
                "create_client": incoming_call_actions.get("create_client", True),
                "create_order": incoming_call_actions.get("create_order", "none"),
                "order_source": incoming_call_actions.get("order_source", "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
            }
        }
        
    except Exception as e:
        logger.error(f"Error getting MS config: {e}")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π UUID –¥–ª—è –Ω–æ–≤–æ–≥–æ enterprise
        import uuid
        webhook_uuid = str(uuid.uuid4())
        webhook_url = f"https://bot.vochi.by/ms/webhook/{webhook_uuid}"
        
        return {
            "phone_api_url": "https://api.moysklad.ru/api/phone/1.0",
            "integration_code": "",
            "api_token": "",
            "enabled": False,
            "webhook_url": webhook_url,
            "notifications": {
                "call_notify_mode": "during",
                "notify_incoming": True,
                "notify_outgoing": False
            },
            "incoming_call_actions": {
                "create_client": True,
                "create_order": "none",
                "order_source": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
            }
        }

@app.put("/ms-admin/api/config/{enterprise_number}")
async def ms_admin_api_put_config(enterprise_number: str, request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        body = await request.json()
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        current_config = {}
        if row and row.get("integrations_config"):
            raw_cfg = row["integrations_config"]
            if isinstance(raw_cfg, str):
                try:
                    current_config = json.loads(raw_cfg)
                except Exception:
                    current_config = {}
            elif isinstance(raw_cfg, dict):
                current_config = raw_cfg

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é ms
        if "ms" not in current_config:
            current_config["ms"] = {}
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è webhook, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        existing_ms_config = current_config.get("ms", {})
        webhook_uuid = existing_ms_config.get("webhook_uuid")
        if not webhook_uuid:
            import uuid
            webhook_uuid = str(uuid.uuid4())
        
        ms_config = {
            "phone_api_url": body.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0"),
            "integration_code": body.get("integration_code", ""),
            "api_token": body.get("api_token", ""),
            "enabled": bool(body.get("enabled", False)),
            "webhook_uuid": webhook_uuid,
            "notifications": body.get("notifications", {}),
            "incoming_call_actions": body.get("incoming_call_actions", {})
        }
        
        current_config["ms"] = ms_config
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await conn.execute(
            "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
            json.dumps(current_config), enterprise_number
        )
        
        await conn.close()
        
        logger.info(f"MS config saved for enterprise {enterprise_number}")
        return {"success": True}
        
    except Exception as e:
        logger.error(f"Error saving MS config: {e}")
        return {"success": False, "error": str(e)}

@app.delete("/ms-admin/api/config/{enterprise_number}")
async def ms_admin_api_delete_config(enterprise_number: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        current_config = {}
        if row and row.get("integrations_config"):
            raw_cfg = row["integrations_config"]
            if isinstance(raw_cfg, str):
                try:
                    current_config = json.loads(raw_cfg)
                except Exception:
                    current_config = {}
            elif isinstance(raw_cfg, dict):
                current_config = raw_cfg

        # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é ms
        if "ms" in current_config:
            del current_config["ms"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await conn.execute(
            "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
            json.dumps(current_config), enterprise_number
        )
        
        await conn.close()
        
        logger.info(f"MS config deleted for enterprise {enterprise_number}")
        return {"success": True}
        
    except Exception as e:
        logger.error(f"Error deleting MS config: {e}")
        return {"success": False, "error": str(e)}

@app.get("/ms-admin/api/test/{enterprise_number}")
async def ms_admin_api_test(enterprise_number: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        await conn.close()
        
        if not row or not row.get("integrations_config"):
            return {"success": False, "error": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
        raw_cfg = row["integrations_config"]
        if isinstance(raw_cfg, str):
            try:
                cfg = json.loads(raw_cfg)
            except Exception:
                return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
        else:
            cfg = raw_cfg
            
        ms_config = cfg.get("ms", {})
        if not ms_config.get("enabled"):
            return {"success": False, "error": "–ú–æ–π–°–∫–ª–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}
            
        integration_code = ms_config.get("integration_code", "")
        api_token = ms_config.get("api_token", "")
        phone_api_url = ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–π
        if not integration_code and not api_token:
            return {"success": False, "error": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç–æ–∫–µ–Ω"}
        
        import httpx
        timeout = httpx.Timeout(10.0)
        test_results = []
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            # –¢–µ—Å—Ç 1: Phone API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
            if integration_code:
                try:
                    headers = {
                        "Lognex-Phone-Auth-Token": integration_code,
                        "Accept-Encoding": "gzip",
                        "Content-Type": "application/json"
                    }
                    response = await client.get(f"{phone_api_url}/employee", headers=headers)
                    if response.status_code == 200:
                        data = response.json()
                        employee_count = len(data.get("rows", []))
                        test_results.append(f"‚úÖ Phone API: {employee_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ–±–∞–≤–æ—á–Ω—ã–º–∏")
                    else:
                        test_results.append(f"‚ùå Phone API: –æ—à–∏–±–∫–∞ {response.status_code}")
                except Exception as e:
                    test_results.append(f"‚ùå Phone API: {str(e)}")
            
            # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–æ–π API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
            if api_token:
                try:
                    headers = {
                        "Authorization": f"Bearer {api_token}",
                        "Accept-Encoding": "gzip", 
                        "Content-Type": "application/json"
                    }
                    response = await client.get("https://api.moysklad.ru/api/remap/1.2/entity/employee", headers=headers)
                    if response.status_code == 200:
                        data = response.json()
                        employee_count = data.get("meta", {}).get("size", 0)
                        test_results.append(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API: {employee_count} –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                    else:
                        test_results.append(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API: –æ—à–∏–±–∫–∞ {response.status_code}")
                except Exception as e:
                    test_results.append(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API: {str(e)}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            if api_token:
                try:
                    headers = {
                        "Authorization": f"Bearer {api_token}",
                        "Accept-Encoding": "gzip",
                        "Content-Type": "application/json"
                    }
                    response = await client.get("https://api.moysklad.ru/api/remap/1.2/entity/counterparty?limit=5", headers=headers)
                    if response.status_code == 200:
                        data = response.json()
                        counterparty_count = data.get("meta", {}).get("size", 0)
                        test_results.append(f"‚úÖ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {counterparty_count} –Ω–∞–π–¥–µ–Ω–æ")
                    else:
                        test_results.append(f"‚ùå –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: –æ—à–∏–±–∫–∞ {response.status_code}")
                except Exception as e:
                    test_results.append(f"‚ùå –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {str(e)}")
                    
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if test_results:
            return {"success": True, "message": "\n".join(test_results)}
        else:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}
            
    except Exception as e:
        logger.error(f"Error testing MS connection: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞: {str(e)}"}


@app.get("/ms-admin/api/employees/{enterprise_number}")
async def ms_admin_api_employees(enterprise_number: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Phone API –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        await conn.close()
            
        if not row or not row['integrations_config']:
            return {"success": False, "error": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "employees": []}
        
        # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        integrations_config = row['integrations_config']
        if isinstance(integrations_config, str):
            import json
            try:
                integrations_config = json.loads(integrations_config)
            except json.JSONDecodeError:
                return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "employees": []}
        
        ms_config = integrations_config.get('ms', {})
        integration_code = ms_config.get("integration_code", "")
        api_token = ms_config.get("api_token", "")
        
        if not integration_code and not api_token:
            return {"success": False, "error": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "employees": []}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Phone API –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
        employees_result = []
        phone_employees = {}
        
        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ Phone API
            if integration_code:
                async with httpx.AsyncClient() as client:
                    phone_response = await client.get(
                        f"{ms_config.get('phone_api_url', 'https://api.moysklad.ru/api/phone/1.0')}/employee",
                        headers={"Lognex-Phone-Auth-Token": integration_code}
                    )
                    if phone_response.status_code == 200:
                        phone_data = phone_response.json()
                        for emp in phone_data.get("employees", []):
                            employee_id = emp.get("meta", {}).get("href", "").split("/")[-1]
                            phone_employees[employee_id] = emp.get("extention", "")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
            if api_token:
                async with httpx.AsyncClient() as client:
                    main_response = await client.get(
                        "https://api.moysklad.ru/api/remap/1.2/entity/employee",
                        headers={"Authorization": f"Bearer {api_token}"}
                    )
                    if main_response.status_code == 200:
                        main_data = main_response.json()
                        for emp in main_data.get("rows", []):
                            employee_id = emp.get("id")
                            extension = phone_employees.get(employee_id, "")
                            
                            employees_result.append({
                                "id": employee_id,
                                "name": emp.get("name", ""),
                                "email": emp.get("email", ""),
                                "phone": emp.get("phone", ""),
                                "extension": extension,
                                "has_extension": bool(extension)
                            })
        
        except Exception as e:
            logger.error(f"Error fetching employees: {e}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}", "employees": []}
        
        return {
            "success": True, 
            "employees": employees_result,
            "total": len(employees_result),
            "phone_api_available": bool(integration_code),
            "main_api_available": bool(api_token)
        }
        
    except Exception as e:
        logger.error(f"Error in ms_admin_api_employees: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞: {str(e)}", "employees": []}

# =============================================================================
# –¢–ï–°–¢–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.get("/test/credentials")
async def test_credentials():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥ API"""
    try:
        # –¢–µ—Å—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        login = MOYSKLAD_CONFIG["login"] or "demo"
        password = MOYSKLAD_CONFIG["password"] or "demo"
        api_url = MOYSKLAD_CONFIG["base_url"]

        org = await get_organization(login, password, api_url)

        if org:
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ú–æ–π–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ",
                "organization": org
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ú–æ–π–°–∫–ª–∞–¥",
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }

    except Exception as e:
        return {
            "success": False,
            "message": "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "error": str(e)
        }


@app.get("/test/organizations")
async def test_organizations():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
    try:
        login = MOYSKLAD_CONFIG["login"] or "demo"
        password = MOYSKLAD_CONFIG["password"] or "demo"
        api_url = MOYSKLAD_CONFIG["base_url"]

        org = await get_organization(login, password, api_url)

        return {
            "success": org is not None,
            "organization": org
        }

    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


@app.post("/notify-incoming")
async def notify_incoming(request: Request):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")
        origin = data.get("origin", "live")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await log_integration_event(
            enterprise_number=enterprise_number,
            event_type="incoming_call",
            request_data=data,
            status="success"
        )

        # –ï—Å–ª–∏ —ç—Ç–æ recovery mode, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if origin == "download":
            logger.info(f"Recovery mode: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ {phone}")
            return {"success": True, "message": "Recovery mode - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã"}

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications = config.get("notifications", {})
        if notifications.get("notify_incoming", False):
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ: {phone}")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        return {"success": True, "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"}

    except Exception as e:
        logger.error(f"Error in notify_incoming: {e}")
        return {"success": False, "error": str(e)}


@app.post("/log-call")
async def log_call(request: Request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")
        call_type = data.get("type", "incoming")
        origin = data.get("origin", "live")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await log_integration_event(
            enterprise_number=enterprise_number,
            event_type=f"{call_type}_call_logged",
            request_data=data,
            status="success"
        )

        # –ï—Å–ª–∏ —ç—Ç–æ recovery mode, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if origin == "download":
            logger.info(f"Recovery mode: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ {phone}")
            return {"success": True, "message": "Recovery mode - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã"}

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
        actions = config.get(f"{call_type}_call_actions", {})

        if actions.get("create_order", False):
            # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            login = config.get("login", "")
            password = config.get("password", "")
            api_url = config.get("api_url", MOYSKLAD_CONFIG["base_url"])

            customer = await get_customer_by_phone(phone, login, password, api_url)

            if customer:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                order_data = {
                    "customer_id": customer["id"],
                    "description": f"–ó–≤–æ–Ω–æ–∫ –æ—Ç {phone}",
                    "source": actions.get("order_source", "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
                }

                order_id = await create_order(order_data, login, password, api_url)

                if order_id:
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer['id']}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer['id']}")

        return {"success": True, "message": "–ó–≤–æ–Ω–æ–∫ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω"}

    except Exception as e:
        logger.error(f"Error in log_call: {e}")
        return {"success": False, "error": str(e)}


@app.post("/customer-by-phone")
async def customer_by_phone(request: Request):
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        login = config.get("login", "")
        password = config.get("password", "")
        api_url = config.get("api_url", MOYSKLAD_CONFIG["base_url"])

        customer = await get_customer_by_phone(phone, login, password, api_url)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await log_integration_event(
            enterprise_number=enterprise_number,
            event_type="customer_search",
            request_data={"phone": phone},
            response_data=customer,
            status="success" if customer else "not_found"
        )

        if customer:
            return {
                "success": True,
                "customer": customer,
                "display_name": customer["name"],
                "person_uid": customer["id"]
            }
        else:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

    except Exception as e:
        logger.error(f"Error in customer_by_phone: {e}")
        return {"success": False, "error": str(e)}


@app.post("/responsible-extension")
async def responsible_extension(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        login = config.get("login", "")
        password = config.get("password", "")
        api_url = config.get("api_url", MOYSKLAD_CONFIG["base_url"])

        customer = await get_customer_by_phone(phone, login, password, api_url)

        if customer and customer.get("manager_id"):
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await log_integration_event(
                enterprise_number=enterprise_number,
                event_type="responsible_manager",
                request_data={"phone": phone},
                response_data={"manager_id": customer["manager_id"], "manager_name": customer["manager"]},
                status="success"
            )

            return {
                "success": True,
                "manager_id": customer["manager_id"],
                "manager_name": customer["manager"],
                "extension": ""  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            }
        else:
            return {
                "success": False,
                "error": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

    except Exception as e:
        logger.error(f"Error in responsible_extension: {e}")
        return {"success": False, "error": str(e)}


# =============================================================================
# MOYSKLAD PHONE API FUNCTIONS
# =============================================================================

async def find_contact_by_phone(phone: str, api_token: str) -> dict:
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ –æ—Å–Ω–æ–≤–Ω–æ–º API"""
    try:
        async with httpx.AsyncClient() as client:
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            response = await client.get(
                "https://api.moysklad.ru/api/remap/1.2/entity/counterparty",
                headers={"Authorization": f"Bearer {api_token}"},
                params={"filter": f"phone~{phone}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("rows"):
                    contact = data["rows"][0]
                    return {
                        "found": True,
                        "name": contact.get("name", ""),
                        "phone": contact.get("phone", ""),
                        "email": contact.get("email", ""),
                        "id": contact.get("id", ""),
                        "description": contact.get("description", "")
                    }
                    
    except Exception as e:
        logger.error(f"Error finding contact by phone {phone}: {e}")
    
    return {"found": False}

async def create_ms_call(phone_api_url: str, integration_code: str, caller_phone: str, called_extension: str, contact_info: dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ Phone API"""
    try:
        async with httpx.AsyncClient() as client:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π externalId –¥–ª—è –∑–≤–æ–Ω–∫–∞
            import time
            external_id = f"webhook-{int(time.time())}-{caller_phone.replace('+', '')}"
            
            call_data = {
                "from": caller_phone,
                "number": called_extension,
                "externalId": external_id,
                "isIncoming": True,
                "startTime": "2025-09-02 12:45:00"
            }
            
            response = await client.post(
                f"{phone_api_url}/call",
                headers={"Lognex-Phone-Auth-Token": integration_code},
                json=call_data
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get("id", "")
                
    except Exception as e:
        logger.error(f"Error creating MS call: {e}")
    
    return ""

async def send_ms_popup(phone_api_url: str, integration_code: str, call_id: str, event_type: str, extension: str, employee_id: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ø–∞–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        async with httpx.AsyncClient() as client:
            event_data = {
                "eventType": event_type,
                "extension": extension,
                "sequence": 1
            }
            
            if employee_id:
                event_data["employee"] = {
                    "href": f"https://api.moysklad.ru/api/remap/1.2/entity/employee/{employee_id}",
                    "type": "employee"
                }
            
            response = await client.post(
                f"{phone_api_url}/call/{call_id}/event",
                headers={"Lognex-Phone-Auth-Token": integration_code},
                json=event_data
            )
            
            if response.status_code in [200, 204]:
                logger.info(f"MS popup sent successfully: {event_type} to extension {extension}")
                return True
            else:
                logger.error(f"Failed to send MS popup: {response.status_code} - {response.text}")
                
    except Exception as e:
        logger.error(f"Error sending MS popup: {e}")
    
    return False

async def find_employee_by_extension(phone_api_url: str, integration_code: str, extension: str) -> dict:
    """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–æ–±–∞–≤–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤ Phone API"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{phone_api_url}/employee",
                headers={"Lognex-Phone-Auth-Token": integration_code}
            )
            
            if response.status_code == 200:
                data = response.json()
                for emp in data.get("employees", []):
                    if emp.get("extention") == extension:  # –î–∞, —Å –æ—à–∏–±–∫–æ–π "extention"
                        employee_id = emp.get("meta", {}).get("href", "").split("/")[-1]
                        return {
                            "found": True,
                            "id": employee_id,
                            "extension": extension
                        }
                        
    except Exception as e:
        logger.error(f"Error finding employee by extension {extension}: {e}")
    
    return {"found": False}

async def process_ms_webhook_event(webhook_data: dict, ms_config: dict, enterprise_number: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π webhook –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º (Asterisk) –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ
        event_type = webhook_data.get("event_type", "")
        caller_phone = webhook_data.get("caller_phone", "")
        called_extension = webhook_data.get("called_extension", "")
        
        logger.info(f"Processing MS webhook event: {event_type}, from {caller_phone} to {called_extension}")
        
        if event_type == "call_start" and caller_phone and called_extension:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            phone_api_url = ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0")
            integration_code = ms_config.get("integration_code", "")
            api_token = ms_config.get("api_token", "")
            
            if not integration_code or not api_token:
                logger.warning(f"MS integration not fully configured for enterprise {enterprise_number}")
                return
            
            # 1. –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–æ–±–∞–≤–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
            employee_info = await find_employee_by_extension(phone_api_url, integration_code, called_extension)
            if not employee_info.get("found"):
                logger.warning(f"Employee not found for extension {called_extension}")
                return
            
            # 2. –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            contact_info = await find_contact_by_phone(caller_phone, api_token)
            
            # 3. –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –ú–æ–π–°–∫–ª–∞–¥
            call_id = await create_ms_call(phone_api_url, integration_code, caller_phone, called_extension, contact_info)
            if not call_id:
                logger.error("Failed to create call in MoySklad")
                return
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SHOW –ø–æ–ø–∞–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            success = await send_ms_popup(
                phone_api_url, 
                integration_code, 
                call_id, 
                "SHOW", 
                called_extension, 
                employee_info.get("id", "")
            )
            
            if success:
                logger.info(f"Successfully sent popup to extension {called_extension} for call from {caller_phone}")
            else:
                logger.error(f"Failed to send popup to extension {called_extension}")
                
    except Exception as e:
        logger.error(f"Error processing MS webhook event: {e}")

# =============================================================================
# WEBHOOK –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ú–û–ô–°–ö–õ–ê–î
# =============================================================================

@app.post("/ms/webhook/{webhook_uuid}")
async def ms_webhook(webhook_uuid: str, request: Request):
    """Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        import asyncpg, json
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        content_type = request.headers.get("content-type", "")
        
        if "application/json" in content_type:
            data = json.loads(body.decode('utf-8'))
        else:
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º form-data
            form_data = await request.form()
            data = dict(form_data)
        
        logger.info(f"MS webhook received: UUID={webhook_uuid}, data={data}")
        
        # –ù–∞—Ö–æ–¥–∏–º enterprise –ø–æ webhook_uuid
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg==",
            database="postgres"
        )
        
        try:
            # –ò—â–µ–º enterprise —Å –¥–∞–Ω–Ω—ã–º webhook_uuid
            row = await conn.fetchrow(
                "SELECT number, integrations_config FROM enterprises WHERE integrations_config::text LIKE $1",
                f'%"webhook_uuid": "{webhook_uuid}"%'
            )
            
            if not row:
                logger.warning(f"Enterprise not found for webhook UUID: {webhook_uuid}")
                return {"success": False, "error": "Invalid webhook UUID"}
            
            enterprise_number = row['number']
            logger.info(f"Found enterprise {enterprise_number} for webhook UUID {webhook_uuid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            config = json.loads(row['integrations_config']) if row['integrations_config'] else {}
            ms_config = config.get("ms", {})
            
            if not ms_config.get("enabled", False):
                logger.warning(f"MoySklad integration disabled for enterprise {enterprise_number}")
                return {"success": False, "error": "Integration disabled"}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook –¥–∞–Ω–Ω—ã–µ
            await process_ms_webhook_event(data, ms_config, enterprise_number)
            
            logger.info(f"MS webhook processed successfully for enterprise {enterprise_number}")
            return {"success": True, "message": "Webhook processed"}
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"Error processing MS webhook: {e}")
        return {"success": False, "error": str(e)}

# =============================================================================

if __name__ == "__main__":
    uvicorn.run(
        "ms:app",
        host="0.0.0.0",
        port=8023,
        reload=True,
        log_level="info"
    )
