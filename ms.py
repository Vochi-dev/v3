#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üè™ –ú–æ–π–°–∫–ª–∞–¥ Integration Service
================================

–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ API Remap 1.2.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 31.01.2025
–í–µ—Ä—Å–∏—è: 1.0 (–§–∞–∑–∞ 1 - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)
"""

import asyncio
import os
import json
import logging
import sys
import time
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple

import aiohttp
import httpx
import uvicorn
from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import asyncpg

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö hangup —Å–æ–±—ã—Ç–∏–π
processed_hangup_events = set()

# –ö—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î/cache
ms_config_cache = {}  # {enterprise_number: {"config": {...}, "expires": timestamp}}
MS_CONFIG_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

# –ú–æ–π–°–∫–ª–∞–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MOYSKLAD_CONFIG = {
    "base_url": "https://api.moysklad.ru/api/remap/1.2",
    "login": "",
    "password": "",
    "api_version": "1.2",
    "timeout": 30
}

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –ú–æ–π–°–∫–ª–∞–¥
JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY", "vochi-moysklad-secret-key-2025")
JWT_ALGORITHM = "HS256"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/asterisk-webhook/logs/ms.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("MoySklad")

# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

class MoySkladResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ú–æ–π–°–∫–ª–∞–¥ API"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    response_time: float
    endpoint: str


class PhoneData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    number: str


class CustomerData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    name: Optional[str] = None
    phone: Optional[str] = None  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    phones: Optional[List[PhoneData]] = None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    email: Optional[str] = None
    tags: Optional[List[str]] = None
    manager_id: Optional[str] = None  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏


class OrderData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞"""
    customer_id: str
    description: Optional[str] = None
    source: Optional[str] = None
    status_id: Optional[str] = None


class CallEventData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    phone: str
    type: str  # incoming, outgoing
    duration: Optional[int] = None
    status: str  # answered, busy, failed, etc.
    customer_id: Optional[str] = None  # ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
    manager_name: Optional[str] = None  # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    recording_url: Optional[str] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å


# =============================================================================
# –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–°
# =============================================================================

app = FastAPI(
    title="–ú–æ–π–°–∫–ª–∞–¥ Integration Service",
    version="1.0.0",
    description="–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥ —á–µ—Ä–µ–∑ API Remap 1.2"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
_CONFIG_CACHE: Dict[str, Dict[str, Any]] = {}
_LAST_CONFIG_UPDATE: Dict[str, float] = {}

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

async def get_enterprise_config(enterprise_number: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ë–î"""
    cache_key = f"config_{enterprise_number}"
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (5 –º–∏–Ω—É—Ç)
    if (cache_key in _CONFIG_CACHE and
        current_time - _LAST_CONFIG_UPDATE.get(cache_key, 0) < 300):
        return _CONFIG_CACHE[cache_key]

    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã moy_sklad_config
        row = await conn.fetchrow(
            "SELECT config FROM moy_sklad_config WHERE enterprise_number = $1",
            enterprise_number
        )

        await conn.close()

        if row:
            config = row["config"]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            _CONFIG_CACHE[cache_key] = config
            _LAST_CONFIG_UPDATE[cache_key] = current_time
            return config
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_config = {
                "enabled": False,
                "login": "",
                "password": "",
                "api_url": MOYSKLAD_CONFIG["base_url"],
                "notifications": {
                    "call_notify_mode": "none",
                    "notify_incoming": False,
                    "notify_outgoing": False
                },
                "incoming_call_actions": {
                    "create_order": False,
                    "order_status": "–ù–æ–≤—ã–π",
                    "order_source": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
                },
                "outgoing_call_actions": {
                    "create_order": False,
                    "order_status": "–ù–æ–≤—ã–π",
                    "order_source": "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
                }
            }
            return default_config

    except Exception as e:
        logger.error(f"Failed to get enterprise config: {e}")
        return {
            "enabled": False,
            "login": "",
            "password": "",
            "api_url": MOYSKLAD_CONFIG["base_url"],
            "notifications": {"call_notify_mode": "none", "notify_incoming": False, "notify_outgoing": False},
            "incoming_call_actions": {"create_order": False, "order_status": "–ù–æ–≤—ã–π", "order_source": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"},
            "outgoing_call_actions": {"create_order": False, "order_status": "–ù–æ–≤—ã–π", "order_source": "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"}
        }


async def moy_sklad_client(login: str, password: str) -> aiohttp.ClientSession:
    """–°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    auth = aiohttp.BasicAuth(login, password)
    timeout = aiohttp.ClientTimeout(total=30.0, connect=10.0)
    return aiohttp.ClientSession(
        auth=auth,
        timeout=timeout,
        headers={
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    )


async def moy_sklad_request(
    method: str,
    url: str,
    login: str,
    password: str,
    data: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ú–æ–π–°–∫–ª–∞–¥ API"""
    start_time = time.time()

    try:
        async with await moy_sklad_client(login, password) as session:
            json_data = json.dumps(data) if data else None

            async with session.request(
                method=method,
                url=url,
                data=json_data
            ) as response:

                response_time = time.time() - start_time

                try:
                    result_data = await response.json()
                except:
                    result_data = {"status_code": response.status}

                if response.status == 200:
                    return MoySkladResponse(
                        success=True,
                        data=result_data,
                        response_time=response_time,
                        endpoint=url
                    ).dict()
                else:
                    error_msg = result_data.get("errors", [{}])[0].get("error", f"HTTP {response.status}")
                    return MoySkladResponse(
                        success=False,
                        error=error_msg,
                        data=result_data,
                        response_time=response_time,
                        endpoint=url
                    ).dict()

    except Exception as e:
        response_time = time.time() - start_time
        return MoySkladResponse(
            success=False,
            error=str(e),
            response_time=response_time,
            endpoint=url
        ).dict()


async def log_integration_event(
    enterprise_number: str,
    event_type: str,
    request_data: Optional[Dict[str, Any]] = None,
    response_data: Optional[Dict[str, Any]] = None,
    error_message: Optional[str] = None,
    status: str = "success"
) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î"""
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )

        await conn.execute("""
            INSERT INTO integration_logs
            (enterprise_number, integration_type, event_type, request_data, response_data, error_message, status, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
        """,
        enterprise_number,
        "ms",
        event_type,
        json.dumps(request_data) if request_data else None,
        json.dumps(response_data) if response_data else None,
        error_message,
        status
        )

        await conn.close()

    except Exception as e:
        logger.error(f"Failed to log integration event: {e}")


# =============================================================================
# –û–°–ù–û–í–ù–´–ï API –§–£–ù–ö–¶–ò–ò
# =============================================================================

async def get_customer_by_phone(
    phone: str,
    login: str,
    password: str,
    api_url: str
) -> Optional[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, phone))

        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        url = f"{api_url}/entity/counterparty"
        params = {
            "filter": f"phone={clean_phone}",
            "limit": 1
        }

        response = await moy_sklad_request("GET", url, login, password)

        if response["success"] and response["data"]["rows"]:
            customer = response["data"]["rows"][0]
            return {
                "id": customer["id"],
                "name": customer["name"],
                "phone": clean_phone,
                "email": customer.get("email", ""),
                "tags": customer.get("tags", []),
                "manager": customer.get("owner", {}).get("name", "") if customer.get("owner") else "",
                "manager_id": customer.get("owner", {}).get("id", "") if customer.get("owner") else ""
            }

        return None

    except Exception as e:
        logger.error(f"Error getting customer by phone: {e}")
        return None


async def create_customer(
    customer_data: Dict[str, Any],
    api_token: str,
    api_url: str = "https://api.moysklad.ru/api/remap/1.2"
) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Bearer token"""
    try:
        url = f"{api_url}/entity/counterparty"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        data = {
            "name": customer_data["name"],
            "phone": customer_data["phone"],
            "email": customer_data.get("email", ""),
            "tags": customer_data.get("tags", [])
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if customer_data.get("owner_id"):
            data["owner"] = {"meta": {"href": f"https://api.moysklad.ru/api/remap/1.2/entity/employee/{customer_data['owner_id']}", "type": "employee"}}

        logger.info(f"üÜï Creating customer via Main API: {data['name']} ({data['phone']})")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                url,
                headers={
                    "Authorization": f"Bearer {api_token}",
                    "Accept": "application/json;charset=utf-8",
                    "Content-Type": "application/json;charset=utf-8"
                },
                json=data
            )
            
            logger.info(f"üìû Create customer response: status={response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                customer_id = result.get("id")
                logger.info(f"‚úÖ Customer created successfully: {customer_id}")
                return customer_id
            else:
                logger.error(f"‚ùå Failed to create customer: {response.status_code} - {response.text}")
                return None

    except Exception as e:
        logger.error(f"‚ùå Error creating customer: {e}")
        return None


async def create_order(
    order_data: Dict[str, Any],
    login: str,
    password: str,
    api_url: str
) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        url = f"{api_url}/entity/customerorder"

        data = {
            "agent": {
                "meta": {
                    "href": f"{api_url}/entity/counterparty/{order_data['customer_id']}",
                    "type": "counterparty"
                }
            },
            "description": order_data.get("description", "–°–æ–∑–¥–∞–Ω–æ –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"),
            "source": {
                "meta": {
                    "href": f"{api_url}/entity/saleschannel/{order_data.get('source_id', '')}",
                    "type": "saleschannel"
                }
            } if order_data.get("source_id") else None
        }

        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        data = {k: v for k, v in data.items() if v is not None}

        response = await moy_sklad_request("POST", url, login, password, data)

        if response["success"]:
            return response["data"]["id"]

        return None

    except Exception as e:
        logger.error(f"Error creating order: {e}")
        return None


async def get_organization(login: str, password: str, api_url: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        url = f"{api_url}/entity/organization"
        params = {"limit": 1}

        response = await moy_sklad_request("GET", url, login, password)

        if response["success"] and response["data"]["rows"]:
            org = response["data"]["rows"][0]
            return {
                "id": org["id"],
                "name": org["name"],
                "inn": org.get("inn", ""),
                "kpp": org.get("kpp", "")
            }

        return None

    except Exception as e:
        logger.error(f"Error getting organization: {e}")
        return None


# =============================================================================
# FASTAPI –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

# =============================================================================
# –ê–î–ú–ò–ù–ö–ê HTML –®–ê–ë–õ–û–ù
# =============================================================================

MS_ADMIN_HTML = """
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{enterprise_name} –ú–æ–π–°–∫–ª–∞–¥</title>
  <link rel="icon" href="/ms-admin/favicon.ico"> 
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; background:#0b1728; color:#e7eef8; }
    .wrap { max-width: 820px; margin: 0 auto; padding: 28px; }
    h1 { font-size: 24px; margin: 0 0 18px; }
    .card { background:#0f2233; border:1px solid #1b3350; border-radius:12px; padding:22px; }
    label { display:block; margin:12px 0 8px; color:#a8c0e0; font-size:14px; }
    input[type=text], input[type=password], input[type=url] { width:100%; padding:12px 14px; border-radius:10px; border:1px solid #2c4a6e; background:#0b1a2a; color:#e7eef8; font-size:16px; }
    .row { display:flex; gap:16px; flex-wrap: wrap; }
    .row > div { flex:1 1 320px; }
    .actions { margin-top:20px; display:flex; align-items:center; gap:16px; }
    .btn { background:#2563eb; color:#fff; border:none; padding:12px 18px; border-radius:10px; cursor:pointer; font-size:16px; }
    .btn:disabled { opacity:.6; cursor:not-allowed; }
    input[type=checkbox] { width:20px; height:20px; accent-color:#2563eb; }
    .hint { color:#8fb3da; font-size:13px; margin-top:6px; }
    .success { color:#4ade80; }
    .error { color:#f87171; }
    .webhook-url { background:#1a2b42; border:1px solid #2c4a6e; border-radius:8px; padding:12px; margin:8px 0; font-family:monospace; font-size:14px; word-break:break-all; }
    .copy-btn { background:#059669; color:#fff; border:none; padding:6px 12px; border-radius:6px; cursor:pointer; font-size:12px; margin-left:8px; }
  </style>
</head>
<body>
  <div class="wrap">
    <div style="display:flex; align-items:center; margin-bottom:20px;">
      <h1 style="margin:0; margin-right:15px;">{enterprise_name} –ú–æ–π–°–∫–ª–∞–¥</h1>
      <img src="/ms.png" alt="–ú–æ–π–°–∫–ª–∞–¥" style="height:48px; width:auto; background:white; padding:4px; border-radius:4px; border:1px solid #ddd;">
    </div>
    <div class="card">
      <div class="row">
        <div>
          <label>Phone API URL</label>
          <input id="phoneApiUrl" type="url" value="https://api.moysklad.ru/api/phone/1.0" readonly style="background:#1a2b42; opacity:0.7;" />
          <div class="hint">–ê–¥—Ä–µ—Å Phone API –ú–æ–π–°–∫–ª–∞–¥ (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω)</div>
        </div>
        <div>
          <label>–ö–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</label>
          <input id="integrationCode" type="text" value="" placeholder="165e3202-66ea-46e5-ab4f-3c65ad41d9ab" />
          <div class="hint">–ö–ª—é—á –æ—Ç –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏</div>
        </div>
        <div>
          <label>–¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API</label>
          <input id="apiToken" type="text" value="" placeholder="cd5134fa1beec235ed6cc3c4973d4daf540bab8b" />
          <div class="hint">–¢–æ–∫–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API –ú–æ–π–°–∫–ª–∞–¥ 1.2 (–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤)</div>
        </div>
      </div>

      <div style="margin:16px 0;">
        <label style="color:#a8c0e0; font-size:14px; margin-bottom:8px; display:block;">Webhook URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥:</label>
        <div class="webhook-url" id="webhookUrl">
          https://bot.vochi.by/ms/webhook/loading...
        </div>
        <button type="button" class="copy-btn" onclick="copyWebhookUrl()">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
        <div class="hint">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥</div>
      </div>
      <div class="actions">
        <label><input id="enabled" type="checkbox" /> –ê–∫—Ç–∏–≤–µ–Ω?</label>
        <button id="saveBtn" type="button" class="btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button id="deleteBtn" type="button" class="btn" style="background:#dc2626; margin-left:auto;">–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é</button>
        <button id="journalBtn" type="button" class="btn" style="background:#374151;">–ñ—É—Ä–Ω–∞–ª</button>
        <span id="msg" class="hint"></span>
      </div>

      <!-- –°–µ–∫—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ -->
      <div style="margin-top: 32px; border-top: 1px solid #2d3a52; padding-top: 24px;">
        <h3 style="color: #ffffff; margin-bottom: 16px; font-size: 18px;">
          üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ú–æ–π–°–∫–ª–∞–¥
        </h3>
        
        <div style="margin-bottom: 16px;">
          <button id="loadEmployeesBtn" type="button" class="btn" style="background:#059669; margin-right: 12px;">
            üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
          </button>
          <span id="employeesStatus" style="color: #a8c0e0; font-size: 14px;"></span>
        </div>

        <div id="employeesContainer" style="display: none;">
          <div style="background: #1e2537; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
            <div style="display: grid; grid-template-columns: 3fr 1fr 1fr; gap: 12px; padding: 8px 0; border-bottom: 1px solid #2d3a52; margin-bottom: 12px; font-weight: bold; color: #a8c0e0;">
              <div>–§–ò–û</div>
              <div>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä</div>
              <div>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
            </div>
            <div id="employeesList"></div>
          </div>
          
          <div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px; color: #a8c0e0;">
            <div id="employeesTotal"></div>
            <div id="employeesApiStatus"></div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- –ë–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ -->
    <div class="card" style="margin-top:20px;">
      <h2 style="margin:0 0 15px 0; font-size:20px; color:#e7eef8;">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
      
      <div style="margin-top:20px;">
        <h3 style="margin:0 0 15px 0; font-size:18px; color:#e7eef8;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
        
        <div style="margin-bottom:15px;">
          <div style="color:#a8c0e0; font-size:14px; margin-bottom:8px;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ</div>
          <div style="display:flex; gap:20px; align-items:center; margin-bottom:10px;">
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="callNotifyMode" value="none" style="width:16px; height:16px; accent-color:#2563eb;">
              –ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å
            </label>
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="callNotifyMode" value="during" checked style="width:16px; height:16px; accent-color:#2563eb;">
              –í–æ –≤—Ä–µ–º—è –¥–æ–∑–≤–æ–Ω–∞
            </label>
          </div>
        </div>
        
        <div style="display:flex; gap:20px; align-items:center;">
          <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="notifyIncoming" style="width:16px; height:16px; accent-color:#2563eb;" checked>
            –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º
          </label>
          <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="notifyOutgoing" style="width:16px; height:16px; accent-color:#2563eb;">
            –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –∏—Å—Ö–æ–¥—è—â–µ–º
          </label>
        </div>
      </div>
      
      <div style="margin-top:30px;">
        <h3 style="margin:0 0 15px 0; font-size:18px; color:#e7eef8;">–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ</h3>
        
        <div style="margin-bottom:15px;">
          <label style="display:flex; align-items:center; gap:8px; margin:0 0 10px 0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="createClientOnCall" style="width:16px; height:16px; accent-color:#2563eb;" checked>
            –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –∑–≤–æ–Ω–∫–µ
          </label>
        </div>
        
        <div style="margin-bottom:15px;">
          <div style="color:#a8c0e0; font-size:14px; margin-bottom:8px;">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</div>
          <div style="display:flex; gap:15px; align-items:center; margin-bottom:10px;">
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="createOrder" value="none" checked style="width:16px; height:16px; accent-color:#2563eb;">
              –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            </label>
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="createOrder" value="always" style="width:16px; height:16px; accent-color:#2563eb;">
              –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            </label>
          </div>
        </div>
        
        <div style="margin-bottom:15px;">
          <label style="color:#a8c0e0; font-size:14px; margin-bottom:8px; display:block;">–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞</label>
          <input type="text" id="orderSource" value="–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫" style="width:100%; padding:8px 12px; border-radius:6px; border:1px solid #2c4a6e; background:#0b1a2a; color:#e7eef8; font-size:14px;">
        </div>
      </div>
      
      <div style="margin-top:30px;">
        <h3 style="margin:0 0 15px 0; font-size:18px; color:#e7eef8;">–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∏—Å—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ</h3>
        
        <div style="margin-bottom:15px;">
          <label style="display:flex; align-items:center; gap:8px; margin:0 0 10px 0; color:#e7eef8; cursor:pointer;">
            <input type="checkbox" id="createClientOnOutgoing" style="width:16px; height:16px; accent-color:#2563eb;">
            –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ
          </label>
        </div>
        
        <div style="margin-bottom:15px;">
          <div style="color:#a8c0e0; font-size:14px; margin-bottom:8px;">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</div>
          <div style="display:flex; gap:15px; align-items:center; margin-bottom:10px;">
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="createOrderOutgoing" value="none" checked style="width:16px; height:16px; accent-color:#2563eb;">
              –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            </label>
            <label style="display:flex; align-items:center; gap:8px; margin:0; color:#e7eef8; cursor:pointer;">
              <input type="radio" name="createOrderOutgoing" value="always" style="width:16px; height:16px; accent-color:#2563eb;">
              –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å
            </label>
          </div>
        </div>
        
        <div style="margin-bottom:15px;">
          <label style="color:#a8c0e0; font-size:14px; margin-bottom:8px; display:block;">–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞</label>
          <input type="text" id="orderSourceOutgoing" value="–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫" style="width:100%; padding:8px 12px; border-radius:6px; border:1px solid #2c4a6e; background:#0b1a2a; color:#e7eef8; font-size:14px;">
        </div>
      </div>
    </div>
  </div>
  <script>
  (function(){
  try {
    const qs = new URLSearchParams(location.search);
    const enterprise = qs.get('enterprise_number');

    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è webhook URL
    window.copyWebhookUrl = function() {
      const webhookUrl = document.getElementById('webhookUrl').textContent;
      navigator.clipboard.writeText(webhookUrl).then(() => {
        const btn = document.querySelector('.copy-btn');
        const originalText = btn.textContent;
        btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
        setTimeout(() => {
          btn.textContent = originalText;
        }, 2000);
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL');
      });
    };

    async function load() {
      try {
        const r = await fetch(`./api/config/${enterprise}`);
        const j = await r.json();
        const cfg = (j||{});
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø–æ–ª—è
        document.getElementById('integrationCode').value = cfg.integration_code || '';
        document.getElementById('apiToken').value = cfg.api_token || '';
        document.getElementById('enabled').checked = !!cfg.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º webhook URL - —Ç–µ–ø–µ—Ä—å –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å UUID
        const webhookUrl = cfg.webhook_url || `https://bot.vochi.by/ms/webhook/${enterprise}`;
        document.getElementById('webhookUrl').textContent = webhookUrl;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifications = cfg.notifications || {};
        const callModeNone = document.querySelector('input[name="callNotifyMode"][value="none"]');
        const callModeDuring = document.querySelector('input[name="callNotifyMode"][value="during"]');
        const notifyIncoming = document.getElementById('notifyIncoming');
        const notifyOutgoing = document.getElementById('notifyOutgoing');
        
        if (callModeNone && callModeDuring) {
          const mode = notifications.call_notify_mode || 'during';
          callModeNone.checked = (mode === 'none');
          callModeDuring.checked = (mode === 'during');
        }
        if (notifyIncoming) {
          notifyIncoming.checked = notifications.notify_incoming !== false;
        }
        if (notifyOutgoing) {
          notifyOutgoing.checked = !!notifications.notify_outgoing;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
        const actions = cfg.incoming_call_actions || {};
        const createClientOnCall = document.getElementById('createClientOnCall');
        const createOrderNone = document.querySelector('input[name="createOrder"][value="none"]');
        const createOrderAlways = document.querySelector('input[name="createOrder"][value="always"]');
        const orderSource = document.getElementById('orderSource');
        
        if (createClientOnCall) {
          createClientOnCall.checked = actions.create_client !== false;
        }
        
        if (createOrderNone && createOrderAlways) {
          const createOrderMode = actions.create_order || 'none';
          createOrderNone.checked = (createOrderMode === 'none');
          createOrderAlways.checked = (createOrderMode === 'always');
        }
        
        if (orderSource) {
          orderSource.value = actions.order_source || '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –∏—Å—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
        const outgoingActions = cfg.outgoing_call_actions || {};
        const createClientOnOutgoing = document.getElementById('createClientOnOutgoing');
        const createOrderOutgoingNone = document.querySelector('input[name="createOrderOutgoing"][value="none"]');
        const createOrderOutgoingAlways = document.querySelector('input[name="createOrderOutgoing"][value="always"]');
        const orderSourceOutgoing = document.getElementById('orderSourceOutgoing');
        
        if (createClientOnOutgoing) {
          createClientOnOutgoing.checked = outgoingActions.create_client !== false;
        }
        
        if (createOrderOutgoingNone && createOrderOutgoingAlways) {
          const createOrderOutgoingMode = outgoingActions.create_order || 'none';
          createOrderOutgoingNone.checked = (createOrderOutgoingMode === 'none');
          createOrderOutgoingAlways.checked = (createOrderOutgoingMode === 'always');
        }
        
        if (orderSourceOutgoing) {
          orderSourceOutgoing.value = outgoingActions.order_source || '–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫';
        }
        
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', cfg);
      } catch(e) { 
        console.warn('load() error', e); 
      }
    }

    async function save() {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      const employeesList = document.getElementById('employeesList');
      if (employeesList && employeesList.children.length === 0) {
        console.log('Employees not loaded yet, loading...');
        await loadEmployees();
      }
      const integrationCode = document.getElementById('integrationCode').value?.trim() || '';
      const apiToken = document.getElementById('apiToken').value?.trim() || '';
      const enabled = !!document.getElementById('enabled').checked;
      
      // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const callModeNone = document.querySelector('input[name="callNotifyMode"][value="none"]');
      const callModeDuring = document.querySelector('input[name="callNotifyMode"][value="during"]');
      const notifyIncoming = document.getElementById('notifyIncoming');
      const notifyOutgoing = document.getElementById('notifyOutgoing');
      
      const notifications = {
        call_notify_mode: (callModeNone && callModeNone.checked) ? 'none' : 'during',
        notify_incoming: !!(notifyIncoming && notifyIncoming.checked),
        notify_outgoing: !!(notifyOutgoing && notifyOutgoing.checked)
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
      const createClientOnCall = document.getElementById('createClientOnCall');
      const createOrderNone = document.querySelector('input[name="createOrder"][value="none"]');
      const createOrderAlways = document.querySelector('input[name="createOrder"][value="always"]');
      const orderSource = document.getElementById('orderSource');
      
      let createOrderMode = 'none';
      if (createOrderAlways && createOrderAlways.checked) createOrderMode = 'always';
      
      const incoming_call_actions = {
        create_client: !!(createClientOnCall && createClientOnCall.checked),
        create_order: createOrderMode,
        order_source: (orderSource && orderSource.value) || '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫'
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –∏—Å—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
      const createClientOnOutgoing = document.getElementById('createClientOnOutgoing');
      const createOrderOutgoingNone = document.querySelector('input[name="createOrderOutgoing"][value="none"]');
      const createOrderOutgoingAlways = document.querySelector('input[name="createOrderOutgoing"][value="always"]');
      const orderSourceOutgoing = document.getElementById('orderSourceOutgoing');
      
      let createOrderOutgoingMode = 'none';
      if (createOrderOutgoingAlways && createOrderOutgoingAlways.checked) createOrderOutgoingMode = 'always';
      
      const outgoing_call_actions = {
        create_client: !!(createClientOnOutgoing && createClientOnOutgoing.checked),
        create_order: createOrderOutgoingMode,
        order_source: (orderSourceOutgoing && orderSourceOutgoing.value) || '–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫'
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID ‚Üî extension
      const employeeMapping = {};
      if (employeesList) {
        const employees = employeesList.querySelectorAll('.employee-item');
        console.log('Found employee elements:', employees.length);
        employees.forEach(emp => {
          const employeeId = emp.dataset.employeeId;
          const extension = emp.dataset.extension;
          const name = emp.dataset.name;
          const email = emp.dataset.email;
          console.log('Processing employee:', {employeeId, extension, name, email});
          if (employeeId && extension) {
            employeeMapping[extension] = {
              employee_id: employeeId,
              name: name || '',
              email: email || ''
            };
          }
        });
      }
      console.log('Final employee mapping:', employeeMapping);
      
      const btn = document.getElementById('saveBtn');
      const msg = document.getElementById('msg');
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        let r = await fetch(`./api/config/${enterprise}`, { 
          method:'PUT', 
          headers:{'Content-Type':'application/json'}, 
          body: JSON.stringify({
            phone_api_url: 'https://api.moysklad.ru/api/phone/1.0',
            integration_code: integrationCode,
            api_token: apiToken,
            enabled: enabled,
            notifications: notifications,
            incoming_call_actions: incoming_call_actions,
            outgoing_call_actions: outgoing_call_actions,
            employee_mapping: employeeMapping
          }) 
        });
        const jr = await r.json();
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        if (msg) { msg.textContent='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'; msg.className='hint success'; }
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }

    async function deleteIntegration() {
      const btn = document.getElementById('deleteBtn');
      const msg = document.getElementById('msg');
      if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        const r = await fetch(`./api/config/${enterprise}`, { method:'DELETE', headers:{'Content-Type':'application/json'} });
        const jr = await r.json();
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        if (msg) { msg.textContent='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'; msg.className='hint success'; }
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('integrationCode').value = '';
        document.getElementById('apiToken').value = '';
        document.getElementById('enabled').checked = false;
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    window.testManager = async function(employeeId, extension, name) {
      console.log('üß™ Testing manager:', {employeeId, extension, name});
      
      const msg = document.getElementById('msg');
      if (msg) { 
        msg.textContent = `üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è ${name} (–≤–Ω—É—Ç—Ä. ${extension})...`;
        msg.className = 'hint';
      }
      
      try {
        const response = await fetch(`./api/test-manager/${enterprise}`, {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({
            employee_id: employeeId,
            extension: extension,
            name: name
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          if (msg) {
            msg.textContent = `‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${name}! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –ú–æ–π–°–∫–ª–∞–¥.`;
            msg.className = 'hint success';
          }
        } else {
          if (msg) {
            msg.textContent = `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${result.error}`;
            msg.className = 'hint error';
          }
        }
      } catch(error) {
        console.error('Test manager error:', error);
        if (msg) {
          msg.textContent = `‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`;
          msg.className = 'hint error';
        }
      }
    };

    function openJournal() {
      const url = `./journal?enterprise_number=${enterprise}`;
      window.open(url, '_blank');
    }

    // –°–æ–±—ã—Ç–∏—è
    const saveBtn = document.getElementById('saveBtn');
    const deleteBtn = document.getElementById('deleteBtn');
    const journalBtn = document.getElementById('journalBtn');
    
    if (saveBtn) saveBtn.addEventListener('click', save);
    if (deleteBtn) deleteBtn.addEventListener('click', deleteIntegration);
    if (journalBtn) journalBtn.addEventListener('click', openJournal);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    async function loadEmployees() {
      const loadBtn = document.getElementById('loadEmployeesBtn');
      const status = document.getElementById('employeesStatus');
      const container = document.getElementById('employeesContainer');
      const list = document.getElementById('employeesList');
      const total = document.getElementById('employeesTotal');
      const apiStatus = document.getElementById('employeesApiStatus');
      
      try {
        loadBtn.disabled = true;
        loadBtn.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        status.textContent = '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...';
        
        const response = await fetch(`/ms-admin/api/employees/${enterprise}`);
        const data = await response.json();
        
        if (data.success) {
          const employees = data.employees || [];
          
          // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
          list.innerHTML = '';
          
          if (employees.length === 0) {
            list.innerHTML = '<div style="color: #a8c0e0; text-align: center; padding: 16px;">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
          } else {
            employees.forEach(emp => {
              console.log('Creating element for employee:', emp);
              const row = document.createElement('div');
              row.className = 'employee-item';
              row.style.cssText = 'display: grid; grid-template-columns: 3fr 1fr 1fr; gap: 12px; padding: 8px 0; border-bottom: 1px solid #374151; align-items: center;';
              
              // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
              if (emp.id) row.dataset.employeeId = emp.id;
              if (emp.extension) row.dataset.extension = emp.extension;
              if (emp.name) row.dataset.name = emp.name;
              if (emp.email) row.dataset.email = emp.email;
              console.log('Added data attributes:', {employeeId: emp.id, extension: emp.extension, name: emp.name, email: emp.email});
              
              const extensionStyle = emp.has_extension ? 
                'background: #065f46; color: #10b981; padding: 2px 8px; border-radius: 4px; text-align: center; font-weight: bold;' :
                'color: #6b7280; text-align: center;';
              
              // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º
              const testButtonHtml = emp.has_extension ? 
                `<button type="button" 
                   onclick="testManager('${emp.id}', '${emp.extension}', '${emp.name}')" 
                   style="background: #059669; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;"
                   title="–¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è ${emp.name}">
                  üß™ –¢–µ—Å—Ç
                </button>` :
                '<span style="color: #6b7280; text-align: center;">‚Äî</span>';
              
              row.innerHTML = `
                <div style="color: #ffffff;">${emp.name}</div>
                <div style="${extensionStyle}">${emp.extension || '‚Äî'}</div>
                <div style="text-align: center;">${testButtonHtml}</div>
              `;
              list.appendChild(row);
            });
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          container.style.display = 'block';
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const withExtension = employees.filter(e => e.has_extension).length;
          total.textContent = `–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}, —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏: ${withExtension}`;
          
          const apiInfo = [];
          if (data.phone_api_available) apiInfo.push('Phone API: ‚úÖ');
          if (data.main_api_available) apiInfo.push('–û—Å–Ω–æ–≤–Ω–æ–π API: ‚úÖ');
          apiStatus.textContent = apiInfo.join(' | ');
          
          status.textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`;
          status.style.color = '#10b981';
          
        } else {
          status.textContent = `–û—à–∏–±–∫–∞: ${data.error}`;
          status.style.color = '#ef4444';
          container.style.display = 'none';
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error);
        status.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
        status.style.color = '#ef4444';
        container.style.display = 'none';
      } finally {
        loadBtn.disabled = false;
        loadBtn.innerHTML = 'üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤';
      }
    }
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    document.getElementById('loadEmployeesBtn').addEventListener('click', loadEmployees);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    load();
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ  
    loadEmployees();
  } catch(e) { console.error('Main script error:', e); }
  })();
  </script>
</body>
</html>
"""

@app.get("/")
async def root():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "–ú–æ–π–°–∫–ª–∞–¥ Integration Service",
        "version": "1.0.0",
        "port": 8023,
        "api_docs": "https://dev.moysklad.ru/doc/api/remap/1.2/#mojsklad-json-api",
        "status": "running",
        "timestamp": datetime.now().isoformat()
    }


# =============================================================================
# –õ–û–ì–û–¢–ò–ü –ò –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´
# =============================================================================

@app.get("/ms.png")
async def serve_logo():
    """–û—Ç–¥–∞—á–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ú–æ–π–°–∫–ª–∞–¥"""
    import os
    from fastapi.responses import FileResponse
    
    logo_path = "/root/asterisk-webhook/ms.png"
    if os.path.exists(logo_path):
        return FileResponse(logo_path, media_type="image/png")
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        raise HTTPException(status_code=404, detail="Logo not found")

@app.get("/ms-admin/favicon.ico")
async def serve_favicon():
    """–û—Ç–¥–∞—á–∞ favicon –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    import os
    from fastapi.responses import FileResponse
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π favicon —Å–∏—Å—Ç–µ–º—ã
    favicon_path = "/root/asterisk-webhook/app/static/favicon.ico"
    if os.path.exists(favicon_path):
        return FileResponse(favicon_path, media_type="image/x-icon")
    else:
        raise HTTPException(status_code=404, detail="Favicon not found")

# =============================================================================
# –ê–î–ú–ò–ù–ö–ê –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.get("/ms-admin/")
async def ms_admin_page(enterprise_number: str):
    """–ê–¥–º–∏–Ω–∫–∞ –ú–æ–π–°–∫–ª–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    import asyncpg
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ë–î
    enterprise_name = "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"
    try:
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres", 
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        row = await conn.fetchrow(
            "SELECT name FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        if row:
            enterprise_name = row["name"]
            
        await conn.close()
    except Exception as e:
        logger.error(f"Failed to get enterprise name: {e}")
    
    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –≤ HTML
    html_content = MS_ADMIN_HTML.replace("{enterprise_name}", enterprise_name).replace("{enterprise_number}", enterprise_number)
    
    from fastapi.responses import HTMLResponse
    return HTMLResponse(content=html_content)

@app.get("/ms-admin/api/config/{enterprise_number}")
async def ms_admin_api_get_config(enterprise_number: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        await conn.close()
        
        cfg: dict = {}
        if row and row.get("integrations_config") is not None:
            raw_cfg = row["integrations_config"]
            if isinstance(raw_cfg, str):
                try:
                    cfg = json.loads(raw_cfg) or {}
                except Exception:
                    cfg = {}
            elif isinstance(raw_cfg, dict):
                cfg = raw_cfg
            else:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–ª–æ–≤–∞—Ä—é
                try:
                    cfg = dict(raw_cfg)
                except Exception:
                    cfg = {}

        ms_config = (cfg.get("ms") if isinstance(cfg, dict) else None) or {}
        notifications = ms_config.get("notifications", {})
        incoming_call_actions = ms_config.get("incoming_call_actions", {})
        outgoing_call_actions = ms_config.get("outgoing_call_actions", {})

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º webhook URL —Å UUID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        webhook_uuid = ms_config.get("webhook_uuid")
        if not webhook_uuid:
            import uuid
            webhook_uuid = str(uuid.uuid4())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            ms_config["webhook_uuid"] = webhook_uuid
            current_config["ms"] = ms_config
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await conn.execute(
                "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
                json.dumps(current_config),
                enterprise_number
            )
        
        webhook_url = f"https://bot.vochi.by/ms/webhook/{webhook_uuid}"
        
        return {
            "phone_api_url": ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0"),
            "integration_code": ms_config.get("integration_code", ""),
            "api_token": ms_config.get("api_token", ""),
            "enabled": ms_config.get("enabled", False),
            "webhook_url": webhook_url,
            "notifications": {
                "call_notify_mode": notifications.get("call_notify_mode", "during"),
                "notify_incoming": notifications.get("notify_incoming", True),
                "notify_outgoing": notifications.get("notify_outgoing", False)
            },
            "incoming_call_actions": {
                "create_client": incoming_call_actions.get("create_client", True),
                "create_order": incoming_call_actions.get("create_order", "none"),
                "order_source": incoming_call_actions.get("order_source", "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
            },
            "outgoing_call_actions": {
                "create_client": outgoing_call_actions.get("create_client", False),
                "create_order": outgoing_call_actions.get("create_order", "none"),
                "order_source": outgoing_call_actions.get("order_source", "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫")
            },
            "employee_mapping": ms_config.get("employee_mapping", {})
        }
        
    except Exception as e:
        logger.error(f"Error getting MS config: {e}")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π UUID –¥–ª—è –Ω–æ–≤–æ–≥–æ enterprise
        import uuid
        webhook_uuid = str(uuid.uuid4())
        webhook_url = f"https://bot.vochi.by/ms/webhook/{webhook_uuid}"
        
        return {
            "phone_api_url": "https://api.moysklad.ru/api/phone/1.0",
            "integration_code": "",
            "api_token": "",
            "enabled": False,
            "webhook_url": webhook_url,
            "notifications": {
                "call_notify_mode": "during",
                "notify_incoming": True,
                "notify_outgoing": False
            },
            "incoming_call_actions": {
                "create_client": True,
                "create_order": "none",
                "order_source": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
            },
            "outgoing_call_actions": {
                "create_client": False,
                "create_order": "none",
                "order_source": "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
            }
        }

@app.put("/ms-admin/api/config/{enterprise_number}")
async def ms_admin_api_put_config(enterprise_number: str, request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        body = await request.json()
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        current_config = {}
        if row and row.get("integrations_config"):
            raw_cfg = row["integrations_config"]
            if isinstance(raw_cfg, str):
                try:
                    current_config = json.loads(raw_cfg)
                except Exception:
                    current_config = {}
            elif isinstance(raw_cfg, dict):
                current_config = raw_cfg

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é ms
        if "ms" not in current_config:
            current_config["ms"] = {}
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è webhook, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        existing_ms_config = current_config.get("ms", {})
        webhook_uuid = existing_ms_config.get("webhook_uuid")
        if not webhook_uuid:
            import uuid
            webhook_uuid = str(uuid.uuid4())
        
        ms_config = {
            "phone_api_url": body.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0"),
            "integration_code": body.get("integration_code", ""),
            "api_token": body.get("api_token", ""),
            "enabled": bool(body.get("enabled", False)),
            "webhook_uuid": webhook_uuid,
            "notifications": body.get("notifications", {}),
            "incoming_call_actions": body.get("incoming_call_actions", {}),
            "outgoing_call_actions": body.get("outgoing_call_actions", {}),
            "employee_mapping": body.get("employee_mapping", {})
        }
        
        current_config["ms"] = ms_config
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await conn.execute(
            "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
            json.dumps(current_config), enterprise_number
        )
        
        await conn.close()
        
        logger.info(f"MS config saved for enterprise {enterprise_number}")
        return {"success": True}
        
    except Exception as e:
        logger.error(f"Error saving MS config: {e}")
        return {"success": False, "error": str(e)}

@app.delete("/ms-admin/api/config/{enterprise_number}")
async def ms_admin_api_delete_config(enterprise_number: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        current_config = {}
        if row and row.get("integrations_config"):
            raw_cfg = row["integrations_config"]
            if isinstance(raw_cfg, str):
                try:
                    current_config = json.loads(raw_cfg)
                except Exception:
                    current_config = {}
            elif isinstance(raw_cfg, dict):
                current_config = raw_cfg

        # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é ms
        if "ms" in current_config:
            del current_config["ms"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await conn.execute(
            "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
            json.dumps(current_config), enterprise_number
        )
        
        await conn.close()
        
        logger.info(f"MS config deleted for enterprise {enterprise_number}")
        return {"success": True}
        
    except Exception as e:
        logger.error(f"Error deleting MS config: {e}")
        return {"success": False, "error": str(e)}

@app.get("/ms-admin/api/test/{enterprise_number}")
async def ms_admin_api_test(enterprise_number: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        import asyncpg, json
        
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        await conn.close()
        
        if not row or not row.get("integrations_config"):
            return {"success": False, "error": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
        raw_cfg = row["integrations_config"]
        if isinstance(raw_cfg, str):
            try:
                cfg = json.loads(raw_cfg)
            except Exception:
                return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
        else:
            cfg = raw_cfg
            
        ms_config = cfg.get("ms", {})
        if not ms_config.get("enabled"):
            return {"success": False, "error": "–ú–æ–π–°–∫–ª–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}
            
        integration_code = ms_config.get("integration_code", "")
        api_token = ms_config.get("api_token", "")
        phone_api_url = ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–π
        if not integration_code and not api_token:
            return {"success": False, "error": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç–æ–∫–µ–Ω"}
        
        import httpx
        timeout = httpx.Timeout(10.0)
        test_results = []
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            # –¢–µ—Å—Ç 1: Phone API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
            if integration_code:
                try:
                    headers = {
                        "Lognex-Phone-Auth-Token": integration_code,
                        "Accept-Encoding": "gzip",
                        "Content-Type": "application/json"
                    }
                    response = await client.get(f"{phone_api_url}/employee", headers=headers)
                    if response.status_code == 200:
                        data = response.json()
                        employee_count = len(data.get("rows", []))
                        test_results.append(f"‚úÖ Phone API: {employee_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ–±–∞–≤–æ—á–Ω—ã–º–∏")
                    else:
                        test_results.append(f"‚ùå Phone API: –æ—à–∏–±–∫–∞ {response.status_code}")
                except Exception as e:
                    test_results.append(f"‚ùå Phone API: {str(e)}")
            
            # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–æ–π API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
            if api_token:
                try:
                    headers = {
                        "Authorization": f"Bearer {api_token}",
                        "Accept-Encoding": "gzip", 
                        "Content-Type": "application/json"
                    }
                    response = await client.get("https://api.moysklad.ru/api/remap/1.2/entity/employee", headers=headers)
                    if response.status_code == 200:
                        data = response.json()
                        employee_count = data.get("meta", {}).get("size", 0)
                        test_results.append(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API: {employee_count} –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                    else:
                        test_results.append(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API: –æ—à–∏–±–∫–∞ {response.status_code}")
                except Exception as e:
                    test_results.append(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API: {str(e)}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            if api_token:
                try:
                    headers = {
                        "Authorization": f"Bearer {api_token}",
                        "Accept-Encoding": "gzip",
                        "Content-Type": "application/json"
                    }
                    response = await client.get("https://api.moysklad.ru/api/remap/1.2/entity/counterparty?limit=5", headers=headers)
                    if response.status_code == 200:
                        data = response.json()
                        counterparty_count = data.get("meta", {}).get("size", 0)
                        test_results.append(f"‚úÖ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {counterparty_count} –Ω–∞–π–¥–µ–Ω–æ")
                    else:
                        test_results.append(f"‚ùå –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: –æ—à–∏–±–∫–∞ {response.status_code}")
                except Exception as e:
                    test_results.append(f"‚ùå –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {str(e)}")
                    
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if test_results:
            return {"success": True, "message": "\n".join(test_results)}
        else:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}
            
    except Exception as e:
        logger.error(f"Error testing MS connection: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞: {str(e)}"}


@app.get("/ms-admin/api/employees/{enterprise_number}")
async def ms_admin_api_employees(enterprise_number: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Phone API –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        row = await conn.fetchrow(
            "SELECT integrations_config FROM enterprises WHERE number = $1",
            enterprise_number
        )
        
        await conn.close()
            
        if not row or not row['integrations_config']:
            return {"success": False, "error": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "employees": []}
        
        # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        integrations_config = row['integrations_config']
        if isinstance(integrations_config, str):
            import json
            try:
                integrations_config = json.loads(integrations_config)
            except json.JSONDecodeError:
                return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "employees": []}
        
        ms_config = integrations_config.get('ms', {})
        integration_code = ms_config.get("integration_code", "")
        api_token = ms_config.get("api_token", "")
        
        if not integration_code and not api_token:
            return {"success": False, "error": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "employees": []}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Phone API –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
        employees_result = []
        phone_employees = {}
        
        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ Phone API
            if integration_code:
                async with httpx.AsyncClient() as client:
                    phone_response = await client.get(
                        f"{ms_config.get('phone_api_url', 'https://api.moysklad.ru/api/phone/1.0')}/employee",
                        headers={"Lognex-Phone-Auth-Token": integration_code}
                    )
                    if phone_response.status_code == 200:
                        phone_data = phone_response.json()
                        for emp in phone_data.get("employees", []):
                            employee_id = emp.get("meta", {}).get("href", "").split("/")[-1]
                            phone_employees[employee_id] = emp.get("extention", "")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
            if api_token:
                async with httpx.AsyncClient() as client:
                    main_response = await client.get(
                        "https://api.moysklad.ru/api/remap/1.2/entity/employee",
                        headers={"Authorization": f"Bearer {api_token}"}
                    )
                    if main_response.status_code == 200:
                        main_data = main_response.json()
                        for emp in main_data.get("rows", []):
                            employee_id = emp.get("id")
                            extension = phone_employees.get(employee_id, "")
                            
                            employees_result.append({
                                "id": employee_id,
                                "name": emp.get("name", ""),
                                "email": emp.get("email", ""),
                                "phone": emp.get("phone", ""),
                                "extension": extension,
                                "has_extension": bool(extension)
                            })
        
        except Exception as e:
            logger.error(f"Error fetching employees: {e}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}", "employees": []}
        
        return {
            "success": True, 
            "employees": employees_result,
            "total": len(employees_result),
            "phone_api_available": bool(integration_code),
            "main_api_available": bool(api_token)
        }
        
    except Exception as e:
        logger.error(f"Error in ms_admin_api_employees: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞: {str(e)}", "employees": []}

# =============================================================================
# –¢–ï–°–¢–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.get("/test/credentials")
async def test_credentials():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥ API"""
    try:
        # –¢–µ—Å—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        login = MOYSKLAD_CONFIG["login"] or "demo"
        password = MOYSKLAD_CONFIG["password"] or "demo"
        api_url = MOYSKLAD_CONFIG["base_url"]

        org = await get_organization(login, password, api_url)

        if org:
            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ú–æ–π–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ",
                "organization": org
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ú–æ–π–°–∫–ª–∞–¥",
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }

    except Exception as e:
        return {
            "success": False,
            "message": "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "error": str(e)
        }


@app.get("/test/organizations")
async def test_organizations():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
    try:
        login = MOYSKLAD_CONFIG["login"] or "demo"
        password = MOYSKLAD_CONFIG["password"] or "demo"
        api_url = MOYSKLAD_CONFIG["base_url"]

        org = await get_organization(login, password, api_url)

        return {
            "success": org is not None,
            "organization": org
        }

    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@app.post("/ms-admin/api/test-manager/{enterprise_number}")
async def ms_admin_api_test_manager(enterprise_number: str, request: Request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É –∑–≤–æ–Ω–∫–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        body = await request.json()
        employee_id = body.get("employee_id")
        extension = body.get("extension")
        name = body.get("name", "")
        
        logger.info(f"üß™ Testing manager {name} (ID: {employee_id}, ext: {extension}) for enterprise {enterprise_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥
        ms_config = await get_ms_config_from_cache(enterprise_number)
        if not ms_config:
            return {"success": False, "error": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ú–æ–π–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        integration_code = ms_config.get('integration_code')
        phone_api_url = ms_config.get('phone_api_url', 'https://api.moysklad.ru/api/phone/1.0')
        
        if not integration_code:
            return {"success": False, "error": "–ö–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_phone = "+375290000000"
        test_unique_id = f"test-manager-{employee_id}-{int(time.time())}"
        test_comment = f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è {name}"
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ)
        contact_info = {}
        incoming_call_actions = ms_config.get('incoming_call_actions', {})
        if incoming_call_actions.get('create_client', False):
            contact_info = await find_or_create_contact(
                phone=test_phone,
                auto_create=True,
                ms_config=ms_config,
                employee_id=employee_id
            )
            logger.info(f"üìû Test contact created/found: {contact_info.get('name', 'Unknown')}")
        
        # 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ (dial event) 
        logger.info(f"üìû Simulating incoming call from {test_phone} to extension {extension}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º popup –≤ –ú–æ–π–°–∫–ª–∞–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –ú–æ–π–°–∫–ª–∞–¥
        call_id = await create_ms_call(
            phone_api_url=phone_api_url,
            integration_code=integration_code,
            caller_phone=test_phone,
            called_extension=extension,
            contact_info=contact_info,
            is_incoming=True
        )
        
        if not call_id:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –≤ –ú–æ–π–°–∫–ª–∞–¥"}
        
        logger.info(f"üìû Test call created in –ú–æ–π–°–∫–ª–∞–¥: {call_id}")
        
        # 3.5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º popup —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º call_id
        try:
            await send_ms_popup(
                phone_api_url=phone_api_url,
                integration_code=integration_code,
                call_id=call_id,
                event_type="SHOW",
                extension=extension,
                employee_id=employee_id
            )
            logger.info(f"‚úÖ Popup sent successfully for call {call_id}")
        except Exception as popup_error:
            logger.warning(f"‚ö†Ô∏è Popup failed: {popup_error}")
        
        # 4. –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ (hangup event) —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ hangup —Å–æ–±—ã—Ç–∏—è
        hangup_raw = {
            "CallStatus": "2",  # –û—Ç–≤–µ—á–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫
            "StartTime": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "EndTime": (datetime.now() + timedelta(seconds=30)).strftime("%Y-%m-%d %H:%M:%S"),
            "Duration": "30",
            "BillSec": "25",
            "Trunk": "test-trunk",
            "Comment": test_comment
        }
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ —Å –∑–∞–ø–∏—Å—å—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        success = await update_ms_call_with_recording(
            phone_api_url=phone_api_url,
            integration_code=integration_code,
            phone=test_phone,
            extension=extension,
            unique_id=test_unique_id,
            record_url="",  # –ü—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
            call_data={"raw": hangup_raw}
        )
        
        if success:
            logger.info(f"‚úÖ Test call completed successfully for {name}")
            return {
                "success": True,
                "message": f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {name}",
                "call_id": call_id,
                "contact_created": contact_info.get("found", False),
                "contact_name": contact_info.get("name", "")
            }
        else:
            return {
                "success": False,
                "error": "–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
            }
        
    except Exception as e:
        logger.error(f"‚ùå Test manager error for {enterprise_number}: {e}")
        return {"success": False, "error": str(e)}


@app.post("/notify-incoming")
async def notify_incoming(request: Request):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")
        origin = data.get("origin", "live")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await log_integration_event(
            enterprise_number=enterprise_number,
            event_type="incoming_call",
            request_data=data,
            status="success"
        )

        # –ï—Å–ª–∏ —ç—Ç–æ recovery mode, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if origin == "download":
            logger.info(f"Recovery mode: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ {phone}")
            return {"success": True, "message": "Recovery mode - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã"}

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications = config.get("notifications", {})
        if notifications.get("notify_incoming", False):
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ: {phone}")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        return {"success": True, "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"}

    except Exception as e:
        logger.error(f"Error in notify_incoming: {e}")
        return {"success": False, "error": str(e)}


@app.post("/log-call")
async def log_call(request: Request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")
        call_type = data.get("type", "incoming")
        origin = data.get("origin", "live")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await log_integration_event(
            enterprise_number=enterprise_number,
            event_type=f"{call_type}_call_logged",
            request_data=data,
            status="success"
        )

        # –ï—Å–ª–∏ —ç—Ç–æ recovery mode, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if origin == "download":
            logger.info(f"Recovery mode: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ {phone}")
            return {"success": True, "message": "Recovery mode - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã"}

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
        actions = config.get(f"{call_type}_call_actions", {})

        if actions.get("create_order", False):
            # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            login = config.get("login", "")
            password = config.get("password", "")
            api_url = config.get("api_url", MOYSKLAD_CONFIG["base_url"])

            customer = await get_customer_by_phone(phone, login, password, api_url)

            if customer:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                order_data = {
                    "customer_id": customer["id"],
                    "description": f"–ó–≤–æ–Ω–æ–∫ –æ—Ç {phone}",
                    "source": actions.get("order_source", "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
                }

                order_id = await create_order(order_data, login, password, api_url)

                if order_id:
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer['id']}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer['id']}")

        return {"success": True, "message": "–ó–≤–æ–Ω–æ–∫ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω"}

    except Exception as e:
        logger.error(f"Error in log_call: {e}")
        return {"success": False, "error": str(e)}


@app.post("/customer-by-phone")
async def customer_by_phone(request: Request):
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        login = config.get("login", "")
        password = config.get("password", "")
        api_url = config.get("api_url", MOYSKLAD_CONFIG["base_url"])

        customer = await get_customer_by_phone(phone, login, password, api_url)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await log_integration_event(
            enterprise_number=enterprise_number,
            event_type="customer_search",
            request_data={"phone": phone},
            response_data=customer,
            status="success" if customer else "not_found"
        )

        if customer:
            return {
                "success": True,
                "customer": customer,
                "display_name": customer["name"],
                "person_uid": customer["id"]
            }
        else:
            return {
                "success": False,
                "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

    except Exception as e:
        logger.error(f"Error in customer_by_phone: {e}")
        return {"success": False, "error": str(e)}


@app.post("/responsible-extension")
async def responsible_extension(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        data = await request.json()
        enterprise_number = data.get("enterprise_number", "")
        phone = data.get("phone", "")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config = await get_enterprise_config(enterprise_number)

        if not config.get("enabled", False):
            return {"success": False, "error": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}

        login = config.get("login", "")
        password = config.get("password", "")
        api_url = config.get("api_url", MOYSKLAD_CONFIG["base_url"])

        customer = await get_customer_by_phone(phone, login, password, api_url)

        if customer and customer.get("manager_id"):
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await log_integration_event(
                enterprise_number=enterprise_number,
                event_type="responsible_manager",
                request_data={"phone": phone},
                response_data={"manager_id": customer["manager_id"], "manager_name": customer["manager"]},
                status="success"
            )

            return {
                "success": True,
                "manager_id": customer["manager_id"],
                "manager_name": customer["manager"],
                "extension": ""  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            }
        else:
            return {
                "success": False,
                "error": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

    except Exception as e:
        logger.error(f"Error in responsible_extension: {e}")
        return {"success": False, "error": str(e)}


# =============================================================================
# MOYSKLAD PHONE API FUNCTIONS
# =============================================================================

async def find_contact_by_phone(phone: str, api_token: str) -> dict:
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ –æ—Å–Ω–æ–≤–Ω–æ–º API"""
    try:
        logger.info(f"üîç Searching for contact with phone: {phone}")
        async with httpx.AsyncClient() as client:
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            response = await client.get(
                "https://api.moysklad.ru/api/remap/1.2/entity/counterparty",
                headers={"Authorization": f"Bearer {api_token}"},
                params={"filter": f"phone~{phone}"}
            )
            
            logger.info(f"üìû Contact search response: status={response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üìã Found {len(data.get('rows', []))} contacts")
                
                if data.get("rows"):
                    contact = data["rows"][0]
                    result = {
                        "found": True,
                        "name": contact.get("name", ""),
                        "phone": contact.get("phone", ""),
                        "email": contact.get("email", ""),
                        "id": contact.get("id", ""),
                        "description": contact.get("description", "")
                    }
                    logger.info(f"‚úÖ Contact found: {result['name']} ({result['phone']})")
                    return result
                else:
                    logger.warning(f"‚ö†Ô∏è No contacts found for phone {phone}")
            else:
                logger.error(f"‚ùå Contact search failed with status {response.status_code}: {response.text}")
                    
    except Exception as e:
        logger.error(f"‚ùå Error finding contact by phone {phone}: {e}")
    
    return {"found": False}

async def find_or_create_contact(phone: str, auto_create: bool, ms_config: dict, employee_id: str = None) -> dict:
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
        api_token = ms_config.get('api_token')
        if api_token:
            contact_info = await find_contact_by_phone(phone, api_token)
            if contact_info.get("found"):
                logger.info(f"‚úÖ Existing contact found: {contact_info['name']} ({contact_info['phone']})")
                return contact_info
        
        # –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è
        if not auto_create:
            logger.info(f"üîÑ Contact not found for {phone}, auto-creation disabled")
            return {"found": False}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ api_token —á—Ç–æ –∏ –¥–ª—è Phone API
        if not api_token:
            logger.warning(f"‚ö†Ô∏è Cannot auto-create contact for {phone}: missing api_token in configuration")
            return {"found": False}
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"üÜï Creating new customer for phone: {phone}")
        customer_data = {
            "name": phone,
            "phone": phone,
            "email": "",
            "tags": ["–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if employee_id:
            customer_data["owner_id"] = employee_id
            logger.info(f"üîß Setting customer owner to employee: {employee_id}")
        
        customer_id = await create_customer(customer_data, api_token)
        
        if customer_id:
            logger.info(f"‚úÖ Successfully created customer {customer_id} for phone {phone}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ find_contact_by_phone
            return {
                "found": True,
                "name": customer_data["name"],
                "phone": phone,
                "email": "",
                "id": customer_id,
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç",
                "auto_created": True  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥
            }
        else:
            logger.error(f"‚ùå Failed to create customer for phone {phone}")
            return {"found": False}
            
    except Exception as e:
        logger.error(f"‚ùå Error in find_or_create_contact for {phone}: {e}")
        return {"found": False}

async def create_ms_call(phone_api_url: str, integration_code: str, caller_phone: str, called_extension: str = None, contact_info: dict = {}, is_incoming: bool = True) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ Phone API"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π externalId –¥–ª—è –∑–≤–æ–Ω–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º (extension –º–æ–∂–µ—Ç –±—ã—Ç—å None)
            import time
            extension_part = called_extension if called_extension else "no-ext"
            external_id = f"webhook-{int(time.time())}-{caller_phone.replace('+', '')}-{extension_part}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ GMT+3 –¥–ª—è startTime (–ú–æ–π–°–∫–ª–∞–¥ –æ–∂–∏–¥–∞–µ—Ç –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è)
            from datetime import datetime, timezone, timedelta
            gmt_plus_3 = timezone(timedelta(hours=3))
            current_time_local = datetime.now(gmt_plus_3)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è GMT+3, –∞ –ù–ï UTC
            current_time = current_time_local.strftime("%Y-%m-%d %H:%M:%S")
            
            call_data = {
                "from": caller_phone,
                "number": caller_phone,  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä
                "externalId": external_id,
                "isIncoming": is_incoming,
                "startTime": current_time
                # –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º extension –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ hangup
            }
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º counterparty –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # if contact_info.get("found") and contact_info.get("id"):
            #     call_data["counterparty"] = {
            #         "meta": {
            #             "href": f"https://api.moysklad.ru/api/remap/1.2/entity/counterparty/{contact_info.get('id')}",
            #             "type": "counterparty",
            #             "mediaType": "application/json"
            #         }
            #     }
            #     logger.info(f"üìã Creating call with counterparty: {contact_info.get('name')} (ID: {contact_info.get('id')})")
            # else:
            logger.info(f"üìã Creating call without counterparty info for {caller_phone} (debugging)")
            
            logger.info(f"üìû Creating MS call with data: {call_data}")
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º call_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ hangup
            import time
            timestamp = int(time.time())
            extension_for_key = called_extension if called_extension else "no-ext"
            call_mapping_key = f"{caller_phone}:{extension_for_key}:{timestamp}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º POST - –ú–æ–π–°–∫–ª–∞–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            response = await client.post(
                f"{phone_api_url}/call",
                headers={"Lognex-Phone-Auth-Token": integration_code},
                json=call_data
            )
        
            logger.info(f"üìû MS call creation response: status={response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                call_id = result.get("id", "")
                logger.info(f"‚úÖ MS call created successfully: {call_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫—ç—à–µ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö extensions
                if not hasattr(create_ms_call, 'call_cache'):
                    create_ms_call.call_cache = {}
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
                create_ms_call.call_cache[call_mapping_key] = call_id
                logger.info(f"üíæ Saved call mapping: {call_mapping_key} -> {call_id}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö extensions (150, 151, 152)
                # —á—Ç–æ–±—ã hangup –º–æ–≥ –Ω–∞–π—Ç–∏ call_id –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–π extension –ø—Ä–∏—à–µ–ª hangup
                phone_clean = caller_phone.replace('+', '')
                for possible_ext in ['150', '151', '152']:
                    additional_key = f"{caller_phone}:{possible_ext}:{timestamp}"
                    create_ms_call.call_cache[additional_key] = call_id
                    logger.debug(f"üíæ Saved additional mapping: {additional_key} -> {call_id}")
                
                return call_id
            else:
                logger.error(f"‚ùå MS call creation failed: {response.status_code} - {response.text}")
                return ""
                
    except Exception as e:
        logger.error(f"Error creating MS call: {e}")
    
    return ""

async def send_ms_popup(phone_api_url: str, integration_code: str, call_id: str, event_type: str, extension: str, employee_id: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ø–∞–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        async with httpx.AsyncClient() as client:
            event_data = {
                "eventType": event_type,
                "extension": extension,
                "sequence": 1
            }
            
            if employee_id:
                event_data["employee"] = {
                    "href": f"https://api.moysklad.ru/api/remap/1.2/entity/employee/{employee_id}",
                    "type": "employee"
                }
            
            response = await client.post(
                f"{phone_api_url}/call/{call_id}/event",
                headers={"Lognex-Phone-Auth-Token": integration_code},
                json=event_data
            )
            
            if response.status_code in [200, 204]:
                logger.info(f"MS popup sent successfully: {event_type} to extension {extension}")
                return True
            else:
                logger.error(f"Failed to send MS popup: {response.status_code} - {response.text}")
                
    except Exception as e:
        logger.error(f"Error sending MS popup: {e}")
    
    return False

async def send_ms_popup_by_external_id(phone_api_url: str, integration_code: str, external_id: str, event_type: str, extension: str, employee_id: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ø–∞–ø–∞ —á–µ—Ä–µ–∑ externalId (–¥–ª—è hangup —Å–æ–±—ã—Ç–∏–π)"""
    try:
        async with httpx.AsyncClient() as client:
            event_data = {
                "eventType": event_type,
                "extension": extension,
                "sequence": 999 if event_type == "HIDE_ALL" else 1
            }
            
            if employee_id:
                event_data["employee"] = {
                    "href": f"https://api.moysklad.ru/api/remap/1.2/entity/employee/{employee_id}",
                    "type": "employee"
                }
            
            response = await client.post(
                f"{phone_api_url}/call/extid/{external_id}/event",
                headers={"Lognex-Phone-Auth-Token": integration_code},
                json=event_data
            )
            
            # 204 - —É—Å–ø–µ—à–Ω–æ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, 200 - —É—Å–ø–µ—à–Ω–æ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            if response.status_code in [200, 204]:
                logger.info(f"MS popup sent successfully: {event_type} to extension {extension} (extid: {external_id})")
                return True
            else:
                logger.error(f"MS popup failed: {response.status_code} - {response.text}")
                
    except Exception as e:
        logger.error(f"Error sending MS popup by external_id: {e}")
    
    return False

async def update_ms_call_with_recording(phone_api_url: str, integration_code: str, phone: str, extension: str, unique_id: str, record_url: str, call_data: dict = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ hangup —Å–æ–±—ã—Ç–∏–π
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ phone+extension –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–∫–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ (30 —Å–µ–∫)
        import time
        current_time = int(time.time())
        time_window = current_time // 30  # 30-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –æ–∫–Ω–∞
        dedup_key = f"{phone}:{extension}:{time_window}"
        
        if dedup_key in processed_hangup_events:
            logger.info(f"‚è≠Ô∏è Hangup event already processed for {dedup_key}, skipping duplicate")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        raw_data = call_data.get('raw', {}) if call_data else {}
        call_type = raw_data.get('CallType', '')
        trunk = raw_data.get('Trunk', '')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
        if call_type == 2 and not trunk:
            logger.info(f"‚è≠Ô∏è Skipping parasitic incoming channel for outgoing call: CallType={call_type}, Trunk='{trunk}'")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ set –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        processed_hangup_events.add(dedup_key)
        logger.info(f"üÜï Processing new hangup event: {dedup_key} (CallType={call_type}, Trunk='{trunk}')")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä set'–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–±—ã—Ç–∏–π)
        if len(processed_hangup_events) > 1000:
            oldest_events = list(processed_hangup_events)[:100]  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 100
            for event in oldest_events:
                processed_hangup_events.discard(event)
            logger.info(f"üßπ Cleaned up old hangup events, current size: {len(processed_hangup_events)}")
        # –ò—â–µ–º call_id –≤ –∫—ç—à–µ - –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ phone:extension
        phone_without_plus = phone.lstrip('+')
        
        # –î–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (extension –ø—É—Å—Ç–æ–π) –∏—â–µ–º –ø–æ –ª—é–±–æ–º—É extension
        if not extension or extension.strip() == '':
            cache_key_patterns = [
                f"{phone}:",
                f"{phone_without_plus}:",
                f"+{phone_without_plus}:"
            ]
        else:
            cache_key_patterns = [
                f"{phone}:{extension}:",
                f"{phone_without_plus}:{extension}:",
                f"+{phone_without_plus}:{extension}:"
            ]
        
        call_id = None
        if hasattr(create_ms_call, 'call_cache'):
            # –ò—â–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–ª—é—á–∏ –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
            matching_keys = []
            for key in create_ms_call.call_cache:
                if any(key.startswith(pattern) for pattern in cache_key_patterns):
                    matching_keys.append(key)
            
            if matching_keys:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
                latest_key = max(matching_keys, key=lambda k: int(k.split(':')[-1]) if k.split(':')[-1].isdigit() else 0)
                call_id = create_ms_call.call_cache[latest_key]
                logger.info(f"üîç Found call_id {call_id} for recording update using latest key {latest_key}")
        
        if not call_id:
            logger.warning(f"‚ö†Ô∏è Call ID not found for recording update: {phone} -> {extension}")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {
            "recordUrl": [record_url] if record_url else [],
            "extension": extension  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π extension —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ call_data
        if call_data and call_data.get('raw'):
            raw_data = call_data['raw']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ StartTime –∏ EndTime
            start_time = raw_data.get('StartTime')
            end_time = raw_data.get('EndTime')
            if start_time and end_time:
                try:
                    from datetime import datetime, timezone, timedelta
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–µ—Å—Ç–∫–æ GMT+3 (–ú–∏–Ω—Å–∫/–ú–æ—Å–∫–≤–∞) –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    gmt_plus_3 = timezone(timedelta(hours=3))
                    
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –∫–∞–∫ GMT+3
                    start_dt_local = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
                    end_dt_local = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ GMT+3
                    start_dt_tz = start_dt_local.replace(tzinfo=gmt_plus_3)
                    end_dt_tz = end_dt_local.replace(tzinfo=gmt_plus_3)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ API
                    start_dt_utc = start_dt_tz.astimezone(timezone.utc)
                    end_dt_utc = end_dt_tz.astimezone(timezone.utc)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    duration_seconds = int((end_dt_utc - start_dt_utc).total_seconds())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å endTime —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                    # –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                    current_utc = datetime.now(timezone.utc)
                    if end_dt_utc <= current_utc:
                        logger.info(f"‚è∞ Historical call detected: endTime {end_dt_utc} <= current {current_utc}")
                        logger.info(f"üìù Updating only comment and recording, skipping time update")
                        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–ª—è "–∂–∏–≤—ã—Ö" –∑–≤–æ–Ω–∫–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º GMT+3, –∞ –Ω–µ UTC)
                        update_data["endTime"] = end_dt_tz.strftime("%Y-%m-%d %H:%M:%S.000") 
                        logger.info(f"üåç GMT+3 endTime for API: {end_dt_tz.strftime('%Y-%m-%d %H:%M:%S')}")
                    
                    logger.info(f"üïê Call duration calculated: {duration_seconds} seconds")
                    logger.info(f"üåç Local times (GMT+3): {start_time} - {end_time}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Failed to calculate call duration: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ CallStatus
            call_status = raw_data.get('CallStatus', '')
            direction = call_data.get('direction', 'in')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø–æ externalId –≤ –∫—ç—à–µ
            is_outgoing_call = False
            if hasattr(create_ms_call, 'call_cache') and call_id:
                call_cache = create_ms_call.call_cache
                # –ò—â–µ–º external_id —Å—Ä–µ–¥–∏ –∫–ª—é—á–µ–π –∫—ç—à–∞ —Å —ç—Ç–∏–º call_id
                for cached_key, cached_call_id in call_cache.items():
                    if cached_call_id == call_id and 'outgoing-' in cached_key:
                        is_outgoing_call = True
                        direction = 'out'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º direction –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö
                        logger.info(f"üîÑ Detected outgoing call by cache key: {cached_key}")
                        break
            
            comment_parts = []
            
            if call_status == '0':
                if direction == 'in':
                    comment_parts.append("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫")
                else:
                    comment_parts.append("–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫")
            elif call_status == '2':
                if direction == 'in':
                    comment_parts.append("–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω")
                else:
                    comment_parts.append("–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω")
            elif call_status == '1':
                comment_parts.append("–ó–≤–æ–Ω–æ–∫ –∑–∞–Ω—è—Ç")
            else:
                comment_parts.append(f"–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {call_status})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if update_data.get("duration"):
                duration_sec = update_data["duration"]  # –¢–µ–ø–µ—Ä—å —É–∂–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                minutes = duration_sec // 60
                seconds = duration_sec % 60
                if minutes > 0:
                    comment_parts.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
                else:
                    comment_parts.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {seconds} —Å–µ–∫")
            
            comment = " | ".join(comment_parts)
            if comment:
                update_data["comment"] = comment
                logger.info(f"üí¨ Call comment: {comment}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ externalId –∏–∑ –∫—ç—à–∞ call_id -> externalId
        external_id = None
        if hasattr(create_ms_call, 'call_cache'):
            # –ò—â–µ–º external_id —Å—Ä–µ–¥–∏ –∫–ª—é—á–µ–π –∫—ç—à–∞
            for cache_key, cached_call_id in create_ms_call.call_cache.items():
                if cached_call_id == call_id:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º external_id –∏–∑ cache_key —Ñ–æ—Ä–º–∞—Ç–∞: phone:extension:timestamp
                    parts = cache_key.split(':')
                    if len(parts) >= 3:
                        timestamp = parts[-1]
                        phone_clean = phone.replace('+', '')
                        ext_part = extension if extension else "no-ext"
                        external_id = f"webhook-{timestamp}-{phone_clean}-{ext_part}"
                        break
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π endpoint –ø–æ call_id (externalId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        update_url = f"{phone_api_url}/call/{call_id}"
        logger.info(f"üîß Updating call {call_id} with data: {update_data}")
        if external_id:
            logger.info(f"üîß (externalId would be: {external_id})")
        
        async with httpx.AsyncClient() as client:
            response = await client.put(
                update_url,
                headers={"Lognex-Phone-Auth-Token": integration_code},
                json=update_data
            )
            
            if response.status_code in [200, 204]:
                logger.info(f"‚úÖ MS call {call_id} updated with recording: {record_url} and extension: {extension}")
                try:
                    response_data = response.json()
                    logger.info(f"üìù API response: {response_data}")
                except:
                    logger.info(f"üìù API response (non-JSON): {response.text[:200]}")
                return True
            else:
                logger.error(f"‚ùå Failed to update MS call {call_id} with recording: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"Error updating MS call with recording: {e}")
        return False

async def find_employee_by_extension(phone_api_url: str, integration_code: str, extension: str) -> dict:
    """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–æ–±–∞–≤–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤ Phone API"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{phone_api_url}/employee",
                headers={"Lognex-Phone-Auth-Token": integration_code}
            )
            
            if response.status_code == 200:
                data = response.json()
                for emp in data.get("employees", []):
                    if emp.get("extention") == extension:  # –î–∞, —Å –æ—à–∏–±–∫–æ–π "extention"
                        employee_id = emp.get("meta", {}).get("href", "").split("/")[-1]
                        return {
                            "found": True,
                            "id": employee_id,
                            "extension": extension
                        }
                        
    except Exception as e:
        logger.error(f"Error finding employee by extension {extension}: {e}")
    
    return {"found": False}

async def process_ms_incoming_call(phone: str, extension: str, ms_config: dict, enterprise_number: str, unique_id: str, call_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ - –¢–û–õ–¨–ö–û –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ø–∞–ø–æ–≤ (–∑–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ hangup)"""
    try:
        integration_code = ms_config.get('integration_code')
        api_token = ms_config.get('api_token')
        
        if not integration_code:
            logger.error(f"‚ùå Missing integration_code for enterprise {enterprise_number}")
            return
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è)
        contact_info = {}
        if api_token:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            incoming_call_actions = ms_config.get('incoming_call_actions', {})
            auto_create = incoming_call_actions.get('create_client', False)
            logger.info(f"üîß incoming_call_actions: {incoming_call_actions}")
            logger.info(f"üîß Auto-create setting: {auto_create}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º
            contact_info = await find_or_create_contact(phone, auto_create, ms_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –ë–ï–ó extension (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ hangup) + –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ø–∞–ø–æ–≤
        phone_api_url = "https://api.moysklad.ru/api/phone/1.0"
        extensions = call_data.get('raw', {}).get('Extensions', [])
        
        if extensions:
            employee_mapping = ms_config.get('employee_mapping', {})
            logger.info(f"üîç Employee mapping loaded: {employee_mapping}")
            logger.info(f"üìã Processing extensions: {extensions}")
            sent_popups = 0
            
            # –°–æ–∑–¥–∞–µ–º –û–î–ò–ù –∑–≤–æ–Ω–æ–∫ –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ extension (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ hangup)
            call_id = await create_ms_call(phone_api_url, integration_code, phone, None, contact_info)
            logger.info(f"üìû Created call {call_id} without extension (will be updated on hangup)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø–∞–ø—ã –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
            for ext in extensions:
                employee_data = employee_mapping.get(ext)
                
                if employee_data and employee_data.get('employee_id'):
                    employee_id = employee_data['employee_id']
                    employee_name = employee_data.get('name', 'Unknown')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø–∞–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫ –æ–±—â–µ–º—É –∑–≤–æ–Ω–∫—É
                    await send_ms_popup(phone_api_url, integration_code, call_id, "SHOW", ext, employee_id)
                    logger.info(f"‚úÖ –ú–æ–π–°–∫–ª–∞–¥ popup sent to extension {ext} ({employee_name}) - extension will be set on hangup")
                    sent_popups += 1
                else:
                    logger.debug(f"üîÑ Extension {ext} has no employee mapping - skipping popup")
            
            if sent_popups == 0:
                logger.warning(f"‚ö†Ô∏è No employee mappings found for any extensions {extensions}. Please save employee configuration in admin panel.")
            else:
                logger.info(f"üì± –ú–æ–π–°–∫–ª–∞–¥ popups sent to {sent_popups} employees")
        else:
            logger.warning(f"‚ö†Ô∏è No extensions provided for call")
            
    except Exception as e:
        logger.error(f"‚ùå Error processing –ú–æ–π–°–∫–ª–∞–¥ incoming call: {e}")

async def process_ms_hangup_call(phone: str, extension: str, ms_config: dict, enterprise_number: str, unique_id: str, record_url: str, call_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ hangup —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ - –æ—Ç–ø—Ä–∞–≤–∫–∞ HIDE_ALL –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        integration_code = ms_config.get('integration_code')
        
        if not integration_code:
            logger.error(f"‚ùå Missing integration_code for enterprise {enterprise_number}")
            return
        
        phone_api_url = "https://api.moysklad.ru/api/phone/1.0"
        extensions = call_data.get('raw', {}).get('Extensions', [])
        
        if extensions:
            employee_mapping = ms_config.get('employee_mapping', {})
            sent_hides = 0
            
            for ext in extensions:
                employee_data = employee_mapping.get(ext)
                
                if employee_data and employee_data.get('employee_id'):
                    employee_id = employee_data['employee_id']
                    employee_name = employee_data.get('name', 'Unknown')
                    
                    # –ò—â–µ–º call_id –≤ –∫—ç—à–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, extension –∏ unique_id
                    phone_without_plus = phone.lstrip('+')
                    target_key = None
                    call_id = None
                    
                    if hasattr(create_ms_call, 'call_cache'):
                        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ unique_id
                        call_timestamp = unique_id.split('.')[0] if '.' in unique_id else unique_id
                        
                        cache_key_patterns = [
                            f"{phone}:{ext}:",
                            f"{phone_without_plus}:{ext}:",
                            f"+{phone_without_plus}:{ext}:"
                        ]
                        
                        # –ò—â–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–ª—é—á–∏ –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π (—Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º timestamp)
                        matching_keys = []
                        for key in create_ms_call.call_cache:
                            if any(key.startswith(pattern) for pattern in cache_key_patterns):
                                matching_keys.append(key)
                        
                        if matching_keys:
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –∫–ª—é—á–∞) –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
                            latest_key = max(matching_keys, key=lambda k: int(k.split(':')[-1]) if k.split(':')[-1].isdigit() else 0)
                            call_id = create_ms_call.call_cache[latest_key]
                            logger.info(f"üîç Found call_id {call_id} for {ext} using latest key {latest_key}")
                        else:
                            logger.warning(f"‚ö†Ô∏è No call_id found for {ext}, phone {phone}")
                    
                    if call_id:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HIDE_ALL —á–µ—Ä–µ–∑ call_id
                        success = await send_ms_popup(phone_api_url, integration_code, call_id, "HIDE_ALL", ext, employee_id)
                        if success:
                            logger.info(f"‚úÖ –ú–æ–π–°–∫–ª–∞–¥ HIDE_ALL sent to extension {ext} ({employee_name})")
                            sent_hides += 1
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ —Å –∑–∞–ø–∏—Å—å—é –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                            await update_ms_call_with_recording(phone_api_url, integration_code, phone, ext, unique_id, record_url, call_data)
                        else:
                            logger.error(f"‚ùå Failed to send HIDE_ALL to extension {ext}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Call ID not found for extension {ext}, phone {phone} - cannot send HIDE_ALL")
                        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –∑–∞–ø–∏—Å—å—é, –¥–∞–∂–µ –µ—Å–ª–∏ HIDE_ALL –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                        await update_ms_call_with_recording(phone_api_url, integration_code, phone, ext, unique_id, record_url, call_data)
                        sent_hides += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                else:
                    logger.debug(f"üîÑ Extension {ext} has no employee mapping - skipping HIDE_ALL")
            
            if sent_hides == 0:
                logger.warning(f"‚ö†Ô∏è No HIDE_ALL events sent for extensions {extensions}")
                
                # –î–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (extension –ø—É—Å—Ç–æ–π) –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫
                if not extensions or extensions == ['']:
                    logger.info(f"üìù Updating missed call without extension mapping")
                    await update_ms_call_with_recording(phone_api_url, integration_code, phone, '', unique_id, record_url, call_data)
            else:
                logger.info(f"üîÑ –ú–æ–π–°–∫–ª–∞–¥ HIDE_ALL sent to {sent_hides} employees")
        else:
            logger.warning(f"‚ö†Ô∏è No extensions provided for hangup call {unique_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç extension'–æ–≤
            logger.info(f"üìù Updating call without any extensions")
            await update_ms_call_with_recording(phone_api_url, integration_code, phone, '', unique_id, record_url, call_data)
            
    except Exception as e:
        logger.error(f"‚ùå Error processing –ú–æ–π–°–∫–ª–∞–¥ hangup call: {e}")

async def process_outgoing_call_request(webhook_data: dict, ms_config: dict, enterprise_number: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        logger.info(f"üöÄ Starting background outgoing call processing for enterprise {enterprise_number}")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
        src_number = webhook_data.get("srcNumber", "")  # –î–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –ú–æ–π–°–∫–ª–∞–¥
        dest_number = webhook_data.get("destNumber", "")  # –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        uid = webhook_data.get("uid", "")  # UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–æ–π–°–∫–ª–∞–¥
        
        logger.info(f"üìû Outgoing call request: {src_number} -> {dest_number} (user: {uid})")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not src_number or not dest_number:
            logger.error(f"‚ùå Invalid outgoing call data: srcNumber={src_number}, destNumber={dest_number}")
            return
        
        # –ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä Asterisk –ø–æ srcNumber
        employee_mapping = ms_config.get("employee_mapping", {})
        internal_extension = None
        
        # –ò—â–µ–º –≤ employee_mapping –ø–æ –∫–ª—é—á—É srcNumber
        if src_number in employee_mapping:
            employee_info = employee_mapping[src_number]
            if isinstance(employee_info, dict):
                # employee_mapping —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Å name, email, employee_id
                internal_extension = src_number  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º srcNumber –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä
                logger.info(f"‚úÖ Found employee mapping: {src_number} -> {employee_info.get('name', 'Unknown')}")
            else:
                internal_extension = src_number
        else:
            logger.warning(f"‚ö†Ô∏è No employee mapping found for srcNumber {src_number}, using as-is")
            internal_extension = src_number
        
        logger.info(f"üìû Mapping: –ú–æ–π–°–∫–ª–∞–¥ extension {src_number} -> Asterisk extension {internal_extension}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è Asterisk API
        import asyncpg
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        try:
            row = await conn.fetchrow(
                "SELECT secret FROM enterprises WHERE number = $1",
                enterprise_number
            )
            
            if not row:
                logger.error(f"‚ùå Enterprise secret not found for {enterprise_number}")
                return
                
            client_id = row["secret"]
            logger.info(f"üîë Using enterprise secret: {client_id[:8]}...")
            
        finally:
            await conn.close()
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Asterisk API
        asterisk_result = await call_asterisk_api(
            code=internal_extension,
            phone=dest_number,
            client_id=client_id
        )
        
        if asterisk_result["success"]:
            logger.info(f"‚úÖ Outgoing call initiated successfully: {internal_extension} -> {dest_number}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
            await create_outgoing_call_in_moysklad(
                ms_config=ms_config,
                src_number=src_number,
                dest_number=dest_number,
                uid=uid
            )
            
        else:
            logger.error(f"‚ùå Failed to initiate outgoing call: {asterisk_result.get('error', 'Unknown error')}")
            
        logger.info(f"üèÅ Background outgoing call processing completed for enterprise {enterprise_number}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in background outgoing call processing for enterprise {enterprise_number}: {e}")
        # –í background –∑–∞–¥–∞—á–µ –º—ã –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º

async def call_asterisk_api(code: str, phone: str, client_id: str) -> dict:
    """–í—ã–∑—ã–≤–∞–µ—Ç asterisk.py API –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞"""
    try:
        import aiohttp, json
        
        asterisk_url = "http://localhost:8018/api/makecallexternal"
        params = {
            "code": code,
            "phone": phone,
            "clientId": client_id
        }
        
        logger.info(f"üîó Calling Asterisk API: {asterisk_url} with params {params}")
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(asterisk_url, params=params) as response:
                response_text = await response.text()
                
                if response.status == 200:
                    try:
                        result = json.loads(response_text)
                        logger.info(f"‚úÖ Asterisk API success: {result}")
                        return {"success": True, "data": result}
                    except json.JSONDecodeError:
                        logger.info(f"‚úÖ Asterisk API success (non-JSON): {response_text}")
                        return {"success": True, "message": response_text}
                else:
                    logger.error(f"‚ùå Asterisk API error {response.status}: {response_text}")
                    return {"success": False, "error": f"HTTP {response.status}: {response_text}"}
                    
    except Exception as e:
        logger.error(f"‚ùå Error calling asterisk API: {e}")
        return {"success": False, "error": str(e)}

async def create_outgoing_call_in_moysklad(ms_config: dict, src_number: str, dest_number: str, uid: str):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        import time
        
        phone_api_url = ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0")
        integration_code = ms_config.get("integration_code", "")
        
        if not integration_code:
            logger.warning(f"‚ö†Ô∏è No integration code for outgoing call creation")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π externalId –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        external_id = f"outgoing-{int(time.time())}-{dest_number.replace('+', '')}-{src_number}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ GMT+3 –¥–ª—è startTime
        from datetime import datetime, timezone, timedelta
        gmt_plus_3 = timezone(timedelta(hours=3))
        current_time_local = datetime.now(gmt_plus_3)
        current_time = current_time_local.strftime("%Y-%m-%d %H:%M:%S")
        
        call_data = {
            "from": dest_number,  # –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–º—É –∑–≤–æ–Ω–∏–º)
            "number": dest_number,
            "externalId": external_id,
            "isIncoming": False,  # –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
            "startTime": current_time,
            "extension": src_number  # –î–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        }
        
        logger.info(f"üìû Creating outgoing MS call: {call_data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –ú–æ–π–°–∫–ª–∞–¥
        async with httpx.AsyncClient(timeout=10) as client:
            headers = {
                "Lognex-Phone-Auth-Token": integration_code,
                "Content-Type": "application/json",
                "Accept-Encoding": "gzip"
            }
            
            resp = await client.post(
                f"{phone_api_url}/call",
                headers=headers,
                json=call_data
            )
            resp.raise_for_status()
            result = resp.json()
            
            call_id = result.get("id")
            logger.info(f"‚úÖ Outgoing MS call created: {call_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º popup —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            await send_ms_popup(
                phone_api_url=phone_api_url,
                integration_code=integration_code,
                call_id=call_id,
                event_type="SHOW",
                extension=src_number,
                employee_id=""  # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö
            )
            
    except Exception as e:
        logger.error(f"‚ùå Error creating outgoing call in –ú–æ–π–°–∫–ª–∞–¥: {e}")

async def process_ms_webhook_event(webhook_data: dict, ms_config: dict, enterprise_number: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π webhook –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º (Asterisk) –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ
        event_type = webhook_data.get("event_type", "")
        caller_phone = webhook_data.get("caller_phone", "")
        called_extension = webhook_data.get("called_extension", "")
        
        logger.info(f"Processing MS webhook event: {event_type}, from {caller_phone} to {called_extension}")
        
        if event_type == "call_start" and caller_phone and called_extension:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            phone_api_url = ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0")
            integration_code = ms_config.get("integration_code", "")
            api_token = ms_config.get("api_token", "")
            
            if not integration_code or not api_token:
                logger.warning(f"MS integration not fully configured for enterprise {enterprise_number}")
                return
            
            # 1. –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –¥–æ–±–∞–≤–æ—á–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
            employee_info = await find_employee_by_extension(phone_api_url, integration_code, called_extension)
            if not employee_info.get("found"):
                logger.warning(f"Employee not found for extension {called_extension}")
                return
            
            # 2. –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            contact_info = await find_contact_by_phone(caller_phone, api_token)
            
            # 3. –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –ú–æ–π–°–∫–ª–∞–¥
            call_id = await create_ms_call(phone_api_url, integration_code, caller_phone, called_extension, contact_info)
            if not call_id:
                logger.error("Failed to create call in MoySklad")
                return
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SHOW –ø–æ–ø–∞–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            success = await send_ms_popup(
                phone_api_url, 
                integration_code, 
                call_id, 
                "SHOW", 
                called_extension, 
                employee_info.get("id", "")
            )
            
            if success:
                logger.info(f"Successfully sent popup to extension {called_extension} for call from {caller_phone}")
            else:
                logger.error(f"Failed to send popup to extension {called_extension}")
                
    except Exception as e:
        logger.error(f"Error processing MS webhook event: {e}")

async def process_ms_outgoing_call(phone: str, extension: str, ms_config: dict, enterprise_number: str, unique_id: str, call_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ - –ø–æ–ø–∞–ø –¢–û–õ–¨–ö–û —É –∑–≤–æ–Ω—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        integration_code = ms_config.get('integration_code')
        api_token = ms_config.get('api_token')
        
        if not integration_code:
            logger.error(f"‚ùå Missing integration_code for enterprise {enterprise_number}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
        notifications = ms_config.get('notifications', {})
        if not notifications.get('notify_outgoing', False):
            logger.info(f"‚ÑπÔ∏è Outgoing call notifications disabled for enterprise {enterprise_number}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ó–í–û–ù–Ø–©–ï–ì–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        raw_data = call_data.get('raw', {})
        caller_id = raw_data.get('CallerIDNum', '')
        
        calling_extension = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–≤–æ–Ω—è—â–µ–≥–æ –∏–∑ CallerIDNum
        if caller_id and caller_id.isdigit():
            calling_extension = caller_id
            logger.info(f"üìû Outgoing call from CallerIDNum: {calling_extension}")
        else:
            # –ï—Å–ª–∏ CallerIDNum –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º Extensions (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö)
            extensions = raw_data.get('Extensions', [])
            if len(extensions) == 1:
                calling_extension = extensions[0]
                logger.info(f"üìû Outgoing call from Extensions[0]: {calling_extension}")
            else:
                logger.warning(f"‚ö†Ô∏è Cannot determine calling extension: CallerIDNum='{caller_id}', Extensions={extensions}")
        
        if calling_extension:
            employee_mapping = ms_config.get('employee_mapping', {})
            employee_data = employee_mapping.get(calling_extension)
            
            if employee_data and employee_data.get('employee_id'):
                employee_id = employee_data['employee_id']
                employee_name = employee_data.get('name', 'Unknown')
                
                # –ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
                contact_info = {}
                if api_token:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö
                    outgoing_call_actions = ms_config.get('outgoing_call_actions', {})
                    auto_create = outgoing_call_actions.get('create_client', False)
                    logger.info(f"üîß outgoing_call_actions: {outgoing_call_actions}")
                    logger.info(f"üîß Auto-create setting for outgoing: {auto_create}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º employee_id
                    contact_info = await find_or_create_contact(phone, auto_create, ms_config, employee_id)
                
                # –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏—Å—Ö–æ–¥—è—â–∏–π)
                phone_api_url = "https://api.moysklad.ru/api/phone/1.0"
                call_id = await create_ms_call(phone_api_url, integration_code, phone, calling_extension, contact_info, is_incoming=False)
                
                if call_id:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø–∞–ø –¢–û–õ–¨–ö–û –∑–≤–æ–Ω—è—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
                    await send_ms_popup(phone_api_url, integration_code, call_id, "SHOW", calling_extension, employee_id)
                    logger.info(f"‚úÖ –ú–æ–π–°–∫–ª–∞–¥ outgoing popup sent ONLY to calling extension {calling_extension} ({employee_name})")
                else:
                    logger.error(f"‚ùå Failed to create outgoing call for extension {calling_extension}")
            else:
                logger.warning(f"‚ö†Ô∏è No employee mapping found for calling extension {calling_extension}")
        else:
            logger.warning(f"‚ö†Ô∏è Cannot determine calling extension from call data")
            
    except Exception as e:
        logger.error(f"‚ùå Error processing –ú–æ–π–°–∫–ª–∞–¥ outgoing call: {e}")

# =============================================================================
# –í–ù–£–¢–†–ï–ù–ù–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# =============================================================================

@app.post("/internal/ms/incoming-call")
async def internal_ms_call_event(request: Request):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ dial —Å–æ–±—ã—Ç–∏–π (–≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö) –æ—Ç integration_cache"""
    try:
        payload = await request.json()
        logger.info(f"üìû Received incoming call from integration_cache: {payload}")
        
        enterprise_number = payload.get("enterprise_number")
        phone = payload.get("phone")
        extension = payload.get("extension", "")
        direction = payload.get("direction", "in")
        unique_id = payload.get("unique_id")
        
        if not enterprise_number or not phone:
            raise HTTPException(status_code=400, detail="Missing enterprise_number or phone")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        import asyncpg, json
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if not row:
                logger.error(f"‚ùå Enterprise {enterprise_number} not found")
                raise HTTPException(status_code=404, detail="Enterprise not found")
            
            integrations_config = row['integrations_config']
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            
            ms_config = integrations_config.get('ms', {})
            if not ms_config.get('enabled'):
                logger.info(f"‚ÑπÔ∏è –ú–æ–π–°–∫–ª–∞–¥ integration not enabled for enterprise {enterprise_number}")
                return {"status": "disabled"}
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if direction == "in":
                await process_ms_incoming_call(phone, extension, ms_config, enterprise_number, unique_id, payload)
            elif direction == "out":
                await process_ms_outgoing_call(phone, extension, ms_config, enterprise_number, unique_id, payload)
            
            return {"status": "success"}
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"‚ùå Error processing incoming call: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/internal/ms/hangup-call")
async def ms_internal_hangup_call(request: Request):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ hangup —Å–æ–±—ã—Ç–∏–π –æ—Ç integration_cache"""
    try:
        payload = await request.json()
        logger.info(f"üìû Received hangup event from integration_cache: {payload}")
        
        enterprise_number = payload.get("enterprise_number")
        phone = payload.get("phone")
        extension = payload.get("extension", "")
        direction = payload.get("direction", "in")
        unique_id = payload.get("unique_id")
        record_url = payload.get("record_url")
        
        if not enterprise_number or not phone:
            raise HTTPException(status_code=400, detail="Missing enterprise_number or phone")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        import asyncpg, json
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if not row:
                logger.error(f"‚ùå Enterprise {enterprise_number} not found")
                raise HTTPException(status_code=404, detail="Enterprise not found")
            
            integrations_config = row['integrations_config']
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            
            ms_config = integrations_config.get('ms', {})
            if not ms_config.get('enabled'):
                logger.info(f"‚ÑπÔ∏è –ú–æ–π–°–∫–ª–∞–¥ integration not enabled for enterprise {enterprise_number}")
                return {"status": "disabled"}
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å hangup event
            await process_ms_hangup_call(phone, extension, ms_config, enterprise_number, unique_id, record_url, payload)
            
            return {"status": "success"}
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"‚ùå Error in MS hangup call handler: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# WEBHOOK –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ú–û–ô–°–ö–õ–ê–î
# =============================================================================

@app.post("/ms/webhook/{webhook_uuid}")
async def ms_webhook(webhook_uuid: str, request: Request):
    """Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ú–æ–π–°–∫–ª–∞–¥"""
    try:
        import asyncpg, json
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        content_type = request.headers.get("content-type", "")
        
        if "application/json" in content_type:
            data = json.loads(body.decode('utf-8'))
        else:
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º form-data
            form_data = await request.form()
            data = dict(form_data)
        
        logger.info(f"MS webhook received: UUID={webhook_uuid}, data={data}")
        
        # –ù–∞—Ö–æ–¥–∏–º enterprise –ø–æ webhook_uuid
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg==",
            database="postgres"
        )
        
        try:
            # –ò—â–µ–º enterprise —Å –¥–∞–Ω–Ω—ã–º webhook_uuid
            row = await conn.fetchrow(
                "SELECT number, integrations_config FROM enterprises WHERE integrations_config::text LIKE $1",
                f'%"webhook_uuid": "{webhook_uuid}"%'
            )
            
            if not row:
                logger.warning(f"Enterprise not found for webhook UUID: {webhook_uuid}")
                return {"success": False, "error": "Invalid webhook UUID"}
            
            enterprise_number = row['number']
            logger.info(f"Found enterprise {enterprise_number} for webhook UUID {webhook_uuid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            config = json.loads(row['integrations_config']) if row['integrations_config'] else {}
            ms_config = config.get("ms", {})
            
            if not ms_config.get("enabled", False):
                logger.warning(f"MoySklad integration disabled for enterprise {enterprise_number}")
                return {"success": False, "error": "Integration disabled"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø webhook –¥–∞–Ω–Ω—ã—Ö
            if "srcNumber" in data and "destNumber" in data:
                # –≠—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
                logger.info(f"üîÑ Processing outgoing call request from MoySklad")
                
                # –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –ú–æ–π–°–∫–ª–∞–¥, –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–ª–∞–µ–º –≤ —Ñ–æ–Ω–µ
                import asyncio
                asyncio.create_task(process_outgoing_call_request(data, ms_config, enterprise_number))
                
                logger.info(f"‚úÖ Outgoing call request accepted for enterprise {enterprise_number}")
                return {"success": True, "message": "Call initiation started"}
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk
                await process_ms_webhook_event(data, ms_config, enterprise_number)
                logger.info(f"MS webhook processed successfully for enterprise {enterprise_number}")
                return {"success": True, "message": "Webhook processed"}
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"Error processing MS webhook: {e}")
        return {"success": False, "error": str(e)}

# =============================================================================
# SMART.PY INTEGRATION ENDPOINTS
# =============================================================================

def normalize_phone_e164(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç E.164"""
    if not phone:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = "".join(c for c in phone if c.isdigit())
    
    if not digits:
        return ""
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 375 (–ë–µ–ª–∞—Ä—É—Å—å) –∏ –∏–º–µ–µ—Ç 9 —Ü–∏—Ñ—Ä
    if len(digits) == 9 and digits.startswith("375"):
        return "+" + digits
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 375 –∏ –∏–º–µ–µ—Ç 12 —Ü–∏—Ñ—Ä  
    if len(digits) == 12 and digits.startswith("375"):
        return "+" + digits
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–†–æ—Å—Å–∏—è) –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä
    if len(digits) == 11 and digits.startswith("7"):
        return "+" + digits
        
    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º +
    if not phone.startswith("+"):
        return "+" + digits
    
    return phone


async def search_ms_customer(api_token: str, phone_e164: str):
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            headers = {
                "Authorization": f"Bearer {api_token}",
                "Accept": "application/json;charset=utf-8",
                "Content-Type": "application/json;charset=utf-8"
            }
            
            # –£–±–∏—Ä–∞–µ–º + –∏–∑ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_phone = phone_e164.replace("+", "") if phone_e164.startswith("+") else phone_e164
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            url = f"https://api.moysklad.ru/api/remap/1.2/entity/counterparty"
            params = {
                "filter": f"phone~{search_phone}",
                "limit": 10
            }
            
            response = await client.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json() or {}
                rows = data.get("rows", [])
                
                if rows:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç
                    return {
                        "found": True,
                        "raw": rows[0]
                    }
                else:
                    return {"found": False}
            else:
                logger.warning(f"MS customer search failed: {response.status_code} - {response.text}")
                return {"found": False}
                
    except Exception as e:
        logger.error(f"search_ms_customer error: {e}")
        return {"found": False}


@app.get("/internal/ms/responsible-extension")
async def ms_responsible_extension(phone: str, enterprise_number: Optional[str] = None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç extension –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ú–æ–π–°–∫–ª–∞–¥.
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ retailcrm –∏ uon –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º.
    
    Returns: {"extension": str|null, "manager_id": str|null}
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥
        import asyncpg
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        if enterprise_number:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ –∏–∑ –ë–î
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if row and row["integrations_config"]:
                config_data = row["integrations_config"]
                if isinstance(config_data, str):
                    import json
                    config_data = json.loads(config_data)
                config = config_data.get("ms", {}) if config_data else {}
            else:
                config = None
        else:
            # –ò—â–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ú–æ–π–°–∫–ª–∞–¥
            row = await conn.fetchrow(
                "SELECT number, integrations_config FROM enterprises WHERE active = true "
                "AND integrations_config -> 'ms' ->> 'enabled' = 'true' LIMIT 1"
            )
            if row:
                enterprise_number = row["number"]
                config_data = row["integrations_config"]
                if isinstance(config_data, str):
                    import json
                    config_data = json.loads(config_data)
                config = config_data.get("ms", {}) if config_data else {}
            else:
                config = None
        
        await conn.close()
        
        if not config or not config.get("enabled"):
            return {"extension": None, "manager_id": None}
        
        api_token = config.get("api_token")  # Main API token
        if not api_token:
            return {"extension": None, "manager_id": None}
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_e164 = normalize_phone_e164(phone)
        if not phone_e164:
            return {"extension": None, "manager_id": None}
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ —á–µ—Ä–µ–∑ Main API
        counterparty_data = await search_ms_customer(api_token, phone_e164)
        
        if not counterparty_data or not counterparty_data.get("found"):
            return {"extension": None, "manager_id": None}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º owner (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞) –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        raw_data = counterparty_data.get("raw", {})
        owner_href = None
        
        if isinstance(raw_data, dict):
            owner = raw_data.get("owner")
            if isinstance(owner, dict) and owner.get("meta"):
                owner_href = owner["meta"].get("href")
        
        if not owner_href:
            return {"extension": None, "manager_id": None}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º employee ID –∏–∑ href
        # –ü—Ä–∏–º–µ—Ä: https://api.moysklad.ru/api/remap/1.2/entity/employee/b822ef8f-8649-11f0-0a80-14bb00347cf2
        import re
        match = re.search(r'/employee/([a-f0-9-]+)$', owner_href)
        if not match:
            return {"extension": None, "manager_id": None}
        
        employee_id = match.group(1)
        
        # –ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥ employee_id -> extension –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        employee_mapping = config.get("employee_mapping", {})
        mapped_extension = None
        
        if isinstance(employee_mapping, dict):
            for ext, employee_data in employee_mapping.items():
                if isinstance(employee_data, dict):
                    emp_id = employee_data.get("employee_id")
                    if emp_id == employee_id:
                        mapped_extension = ext
                        break
                elif isinstance(employee_data, str):
                    # Fallback –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ extension -> employee_id
                    if employee_data == employee_id:
                        mapped_extension = ext
                        break
        
        logger.info(f"üîç MS responsible-extension: phone={phone_e164}, employee_id={employee_id}, extension={mapped_extension}")
        
        return {
            "extension": mapped_extension,
            "manager_id": employee_id
        }
        
    except Exception as e:
        logger.error(f"ms_responsible_extension error: {e}")
        return {"extension": None, "manager_id": None}


@app.get("/internal/ms/customer-name")
async def ms_customer_name(phone: str, enterprise_number: Optional[str] = None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ retailcrm –∏ uon –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º.
    
    Returns: {"name": str|null}
    """
    try:
        if enterprise_number:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ —á–µ—Ä–µ–∑ cache service —Å fallback –∫ –ë–î
            config = await get_ms_config_from_cache(enterprise_number)
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {"name": None}
        
        if not config or not config.get("enabled"):
            return {"name": None}
        
        api_token = config.get("api_token")  # Main API token
        if not api_token:
            return {"name": None}
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_e164 = normalize_phone_e164(phone)
        if not phone_e164:
            return {"name": None}
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ —á–µ—Ä–µ–∑ Main API
        counterparty_data = await search_ms_customer(api_token, phone_e164)
        
        if not counterparty_data or not counterparty_data.get("found"):
            return {"name": None}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        raw_data = counterparty_data.get("raw", {})
        display_name = None
        
        if isinstance(raw_data, dict):
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏ -> –§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–∞
            company_name = raw_data.get("name", "").strip()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –§–ò–û –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            contact_name = None
            
            # –ü–æ–∏—Å–∫ –§–ò–û –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            attributes = raw_data.get("attributes", [])
            if isinstance(attributes, list):
                first_name = None
                last_name = None
                for attr in attributes:
                    if isinstance(attr, dict):
                        attr_name = (attr.get("name") or "").lower()
                        attr_value = attr.get("value", "").strip()
                        if "–∏–º—è" in attr_name or "first" in attr_name:
                            first_name = attr_value
                        elif "—Ñ–∞–º–∏–ª–∏—è" in attr_name or "last" in attr_name:
                            last_name = attr_value
                
                if first_name or last_name:
                    contact_name = f"{last_name or ''} {first_name or ''}".strip()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if company_name and company_name != phone_e164:
                display_name = company_name
                if contact_name:
                    display_name = f"{company_name} ({contact_name})"
            elif contact_name:
                display_name = contact_name
        
        logger.info(f"üîç MS customer-name: phone={phone_e164}, name={display_name}")
        
        return {"name": display_name}
        
    except Exception as e:
        logger.error(f"ms_customer_name error: {e}")
        return {"name": None}


@app.post("/internal/ms/enrich-customer")
async def ms_enrich_customer(phone: str, enterprise_number: Optional[str] = None):
    """
    Endpoint –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ë–î –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥.
    """
    try:
        if not enterprise_number:
            return {"error": "enterprise_number is required"}
            
        result = await enrich_customer_data_from_moysklad(enterprise_number, phone)
        return result
        
    except Exception as e:
        logger.error(f"ms_enrich_customer error: {e}")
        return {"enriched": 0, "skipped": 0, "errors": [str(e)]}

@app.get("/internal/ms/customer-debug")
async def ms_customer_debug(phone: str, enterprise_number: Optional[str] = None):
    """
    DEBUG: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ë–î.
    """
    try:
        if enterprise_number:
            config = await get_ms_config_from_cache(enterprise_number)
        else:
            return {"error": "enterprise_number is required"}
        
        if not config or not config.get("enabled"):
            return {"error": "–ú–æ–π–°–∫–ª–∞–¥ integration not enabled"}
        
        api_token = config.get("api_token")
        if not api_token:
            return {"error": "–ú–æ–π–°–∫–ª–∞–¥ API token not found"}
        
        phone_e164 = normalize_phone_e164(phone)
        logger.info(f"üîç MS customer DEBUG: phone={phone_e164}")
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        counterparty_data = await search_ms_customer(api_token, phone_e164)
        
        if not counterparty_data or not counterparty_data.get("found"):
            return {"found": False, "phone": phone_e164}
        
        raw_data = counterparty_data.get("raw", {})
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞
        contactpersons = []
        try:
            counterparty_id = raw_data.get("id")
            if counterparty_id:
                async with httpx.AsyncClient(timeout=5) as client:
                    headers = {
                        "Authorization": f"Bearer {api_token}",
                        "Accept": "application/json;charset=utf-8",
                        "User-Agent": "VochiCRM/1.0"
                    }
                    
                    contacts_url = f"https://api.moysklad.ru/api/remap/1.2/entity/counterparty/{counterparty_id}/contactpersons"
                    response = await client.get(contacts_url, headers=headers)
                    
                    logger.info(f"üåê Contacts request: {response.status_code} {response.reason_phrase}")
                    
                    if response.status_code == 200:
                        contacts_data = response.json()
                        contactpersons = contacts_data.get("rows", [])
                        logger.info(f"üìû Found {len(contactpersons)} contact persons")
                    else:
                        logger.warning(f"‚ö†Ô∏è Contacts request failed: {response.status_code}")
                        logger.warning(f"‚ö†Ô∏è Response body: {response.text[:200]}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error fetching contacts: {e}")
        
        return {
            "found": True,
            "phone": phone_e164,
            "counterparty": {
                "id": raw_data.get("id"),
                "name": raw_data.get("name"),
                "companyType": raw_data.get("companyType"),
                "phone": raw_data.get("phone"),
                "email": raw_data.get("email"),
                "tags": raw_data.get("tags", [])
            },
            "contactpersons": [
                {
                    "id": cp.get("id"),
                    "name": cp.get("name"),
                    "phone": cp.get("phone"),  
                    "email": cp.get("email"),
                    "position": cp.get("position")
                } for cp in contactpersons
            ],
            "raw_structure": {
                "counterparty_keys": list(raw_data.keys()) if raw_data else [],
                "contactperson_keys": [list(cp.keys()) for cp in contactpersons[:1]] if contactpersons else []
            }
        }
        
    except Exception as e:
        logger.error(f"ms_customer_debug error: {e}")
        return {"error": str(e)}

@app.get("/internal/ms/customer-profile")
async def ms_customer_profile(phone: str, enterprise_number: Optional[str] = None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ë–î.
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ retailcrm –∏ uon –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º.
    
    Returns: {
        "last_name": str|null,
        "first_name": str|null, 
        "middle_name": str|null,
        "enterprise_name": str|null,
        "source": {"raw": dict}
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥
        import asyncpg
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        if enterprise_number:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ –∏–∑ –ë–î
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if row and row["integrations_config"]:
                config_data = row["integrations_config"]
                if isinstance(config_data, str):
                    import json
                    config_data = json.loads(config_data)
                config = config_data.get("ms", {}) if config_data else {}
            else:
                config = None
        else:
            # –ò—â–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ú–æ–π–°–∫–ª–∞–¥
            row = await conn.fetchrow(
                "SELECT number, integrations_config FROM enterprises WHERE active = true "
                "AND integrations_config -> 'ms' ->> 'enabled' = 'true' LIMIT 1"
            )
            if row:
                enterprise_number = row["number"]
                config_data = row["integrations_config"]
                if isinstance(config_data, str):
                    import json
                    config_data = json.loads(config_data)
                config = config_data.get("ms", {}) if config_data else {}
            else:
                config = None
        
        await conn.close()
        
        if not config or not config.get("enabled"):
            return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}
        
        api_token = config.get("api_token")  # Main API token
        if not api_token:
            return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_e164 = normalize_phone_e164(phone)
        if not phone_e164:
            return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ —á–µ—Ä–µ–∑ Main API
        counterparty_data = await search_ms_customer(api_token, phone_e164)
        
        if not counterparty_data or not counterparty_data.get("found"):
            return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        raw_data = counterparty_data.get("raw", {})
        profile = {
            "last_name": None,
            "first_name": None,
            "middle_name": None,
            "enterprise_name": None
        }
        
        if isinstance(raw_data, dict):
            # –ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏
            company_name = raw_data.get("name", "").strip()
            if company_name and company_name != phone_e164:
                profile["enterprise_name"] = company_name
            
            # –ü–æ–∏—Å–∫ –§–ò–û –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            attributes = raw_data.get("attributes", [])
            if isinstance(attributes, list):
                for attr in attributes:
                    if isinstance(attr, dict):
                        attr_name = (attr.get("name") or "").lower()
                        attr_value = attr.get("value", "").strip()
                        
                        if ("–∏–º—è" in attr_name or "first" in attr_name) and not profile["first_name"]:
                            profile["first_name"] = attr_value
                        elif ("—Ñ–∞–º–∏–ª–∏—è" in attr_name or "last" in attr_name) and not profile["last_name"]:
                            profile["last_name"] = attr_value
                        elif ("–æ—Ç—á–µ—Å—Ç–≤–æ" in attr_name or "middle" in attr_name or "patronymic" in attr_name) and not profile["middle_name"]:
                            profile["middle_name"] = attr_value
        
        logger.info(f"üîç MS customer-profile: phone={phone_e164}, profile={profile}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        return {
            **profile,
            "source": {"raw": raw_data}
        }
        
    except Exception as e:
        logger.error(f"ms_customer_profile error: {e}")
        return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}

@app.post("/internal/ms/recovery-call")
async def recovery_call(request: Request):
    """
    Recovery —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    –ë–ï–ó –ø–æ–ø–∞–ø–æ–≤, –Ω–æ –° —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    """
    try:
        body = await request.json()
        logger.info(f"üì¶ Recovery call: {body}")
        
        enterprise_number = body.get("enterprise_number")
        phone = body.get("phone")
        extension = body.get("extension", "")
        direction = body.get("direction", "in")
        unique_id = body.get("unique_id")
        record_url = body.get("record_url")
        raw = body.get("raw", {})
        
        if not all([enterprise_number, phone, unique_id]):
            return {"error": "Missing required fields"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ –∏–∑ –ë–î
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if not row or not row["integrations_config"]:
                return {"error": "–ú–æ–π–°–∫–ª–∞–¥ not configured"}
                
            config_data = row["integrations_config"]
            if isinstance(config_data, str):
                import json
                config_data = json.loads(config_data)
            
            ms_config = config_data.get("ms", {})
            if not ms_config:
                return {"error": "–ú–æ–π–°–∫–ª–∞–¥ not configured"}
                
            api_token = ms_config.get('api_token')
            if not api_token:
                return {"error": "–ú–æ–π–°–∫–ª–∞–¥ API token not found"}
        finally:
            await conn.close()
        
        logger.info(f"üîÑ Recovery: {direction} call {phone} -> {extension}, status: {raw.get('CallStatus')}")
        
        # 1. –°–û–ó–î–ê–ï–ú –ö–õ–ò–ï–ù–¢–ê (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ)
        try:
            if direction == "in":
                # –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º incoming_call_actions
                incoming_call_actions = ms_config.get('incoming_call_actions', {})
                auto_create = incoming_call_actions.get('create_client', False)
                logger.info(f"üîß Incoming auto-create: {auto_create}")
            else:
                # –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º outgoing_call_actions  
                outgoing_call_actions = ms_config.get('outgoing_call_actions', {})
                auto_create = outgoing_call_actions.get('create_client', False)
                logger.info(f"üîß Outgoing auto-create: {auto_create}")
            
            if auto_create:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º employee_id –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
                employee_id = None
                if direction == "out" and extension:
                    employee_mapping = ms_config.get("employee_mapping", {})
                    for emp_data in employee_mapping:
                        if isinstance(emp_data, dict) and emp_data.get("extension") == extension:
                            employee_id = emp_data.get("employee_id")
                            break
                
                # –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
                customer_data = await find_or_create_contact(
                    phone=phone,
                    auto_create=True,
                    ms_config=ms_config,
                    employee_id=employee_id
                )
                logger.info(f"‚úÖ Customer processed: {customer_data.get('name', 'Unknown')}")
            else:
                logger.info(f"‚ÑπÔ∏è Auto-create disabled for {direction} calls")
                
        except Exception as e:
            logger.error(f"Customer creation failed: {e}")
        
        # 2. –°–û–ó–î–ê–ï–ú –ó–í–û–ù–û–ö –í –ú–û–ô–°–ö–õ–ê–î
        try:
            phone_api_url = ms_config.get("phone_api_url", "https://api.moysklad.ru/api/phone/1.0")
            integration_code = ms_config.get("integration_code", "webhook")
            
            # –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫
            call_id = await create_ms_call(
                phone_api_url=phone_api_url,
                integration_code=integration_code,
                caller_phone=phone,
                called_extension=extension,
                contact_info=customer_data if 'customer_data' in locals() else {},
                is_incoming=(direction == "in")
            )
            
            if call_id:
                logger.info(f"‚úÖ Recovery call created in –ú–æ–π–°–∫–ª–∞–¥: {call_id}")
                
                # 3. –û–ë–ù–û–í–õ–Ø–ï–ú –° –ó–ê–ü–ò–°–¨–Æ –ò –í–†–ï–ú–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
                if record_url or raw.get("EndTime"):
                    await update_ms_call_with_recording(
                        phone_api_url=phone_api_url,
                        integration_code=integration_code,
                        phone=phone,
                        extension=extension,
                        unique_id=unique_id,
                        record_url=record_url or "",
                        call_data={"raw": raw}
                    )
                    logger.info(f"üìù Recovery call updated with recording")
                
                return {"status": "success", "call_id": call_id, "message": "Recovery call processed"}
            else:
                logger.warning(f"‚ö†Ô∏è Recovery call creation failed")
                return {"status": "warning", "message": "Call creation failed"}
                
        except Exception as e:
            logger.error(f"Recovery call creation error: {e}")
            return {"status": "error", "message": f"Call processing failed: {str(e)}"}
            
    except Exception as e:
        logger.error(f"Recovery call processing error: {e}")
        return {"error": f"Processing failed: {str(e)}"}


# =============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô
# =============================================================================

def normalize_phone_e164(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç E164."""
    if not phone:
        return phone
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = ''.join(c for c in phone if c.isdigit())
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if digits.startswith('8') and len(digits) == 11:
        digits = '7' + digits[1:]
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 375 (–ë–µ–ª–∞—Ä—É—Å—å) - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if digits.startswith('375') and len(digits) == 12:
        return '+' + digits
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–†–æ—Å—Å–∏—è) - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å 
    if digits.startswith('7') and len(digits) == 11:
        return '+' + digits
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not phone.startswith('+'):
        return '+' + digits
    
    return phone

def is_auto_generated_name(name: str, phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞).
    """
    if not name or not phone:
        return True
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    phone_digits = ''.join(c for c in phone if c.isdigit())
    name_digits = ''.join(c for c in name if c.isdigit())
    
    # –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —ç—Ç–æ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if phone_digits and phone_digits in name_digits:
        return True
        
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å + –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã - —Ç–æ–∂–µ –∞–≤—Ç–æ—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    if name.startswith('+') and any(c.isdigit() for c in name):
        return True
        
    return False

async def enrich_customer_data_from_moysklad(enterprise_number: str, phone: str) -> Dict[str, Any]:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é (—Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    3. –û–±–æ–≥–∞—â–∞–µ—Ç last_name –∏ enterprise_name, –æ—á–∏—â–∞–µ—Ç first_name/middle_name
    4. –°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ enterprise_name
    
    Returns: {"enriched": int, "skipped": int, "errors": list}
    """
    enriched_count = 0
    skipped_count = 0
    errors = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥
        config = await get_ms_config_from_cache(enterprise_number)
        if not config or not config.get("enabled"):
            return {"enriched": 0, "skipped": 0, "errors": ["–ú–æ–π–°–∫–ª–∞–¥ integration not enabled"]}
        
        api_token = config.get("api_token")
        if not api_token:
            return {"enriched": 0, "skipped": 0, "errors": ["–ú–æ–π–°–∫–ª–∞–¥ API token not found"]}
        
        phone_e164 = normalize_phone_e164(phone)
        logger.info(f"üîç Enriching customer data for {phone_e164}")
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
        counterparty_data = await search_ms_customer(api_token, phone_e164)
        
        if not counterparty_data or not counterparty_data.get("found"):
            logger.info(f"‚ö†Ô∏è Customer not found in –ú–æ–π–°–∫–ª–∞–¥: {phone_e164}")
            return {"enriched": 0, "skipped": 1, "errors": []}
        
        raw_data = counterparty_data.get("raw", {})
        counterparty_name = raw_data.get("name", "").strip()
        counterparty_id = raw_data.get("id")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            if is_auto_generated_name(counterparty_name, phone_e164):
                logger.info(f"‚è≠Ô∏è Skipping auto-generated counterparty name: '{counterparty_name}'")
                skipped_count += 1
            else:
                # –û–±–æ–≥–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä
                await conn.execute("""
                    INSERT INTO customers (enterprise_number, phone_e164, last_name, first_name, middle_name, enterprise_name, meta)
                    VALUES ($1, $2, $3, NULL, NULL, $4, $5)
                    ON CONFLICT (enterprise_number, phone_e164) 
                    DO UPDATE SET 
                        last_name = EXCLUDED.last_name,
                        first_name = NULL,
                        middle_name = NULL,
                        enterprise_name = EXCLUDED.enterprise_name,
                        meta = COALESCE(customers.meta, '{}'::jsonb) || EXCLUDED.meta
                """, enterprise_number, phone_e164, counterparty_name, counterparty_name, 
                json.dumps({"moysklad_counterparty_id": counterparty_id, "source": "moysklad", "updated_at": datetime.now().isoformat()}))
                
                logger.info(f"üè¢ Enriched counterparty: {phone_e164} ‚Üí '{counterparty_name}'")
                enriched_count += 1
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
            contactpersons = []
            try:
                if counterparty_id:
                    async with httpx.AsyncClient(timeout=5) as client:
                        headers = {
                            "Authorization": f"Bearer {api_token}",
                            "Accept": "application/json;charset=utf-8",
                            "User-Agent": "VochiCRM/1.0"
                        }
                        
                        contacts_url = f"https://api.moysklad.ru/api/remap/1.2/entity/counterparty/{counterparty_id}/contactpersons"
                        response = await client.get(contacts_url, headers=headers)
                        
                        if response.status_code == 200:
                            contacts_data = response.json()
                            contactpersons = contacts_data.get("rows", [])
                            logger.info(f"üìû Found {len(contactpersons)} contact persons")
                        else:
                            logger.warning(f"‚ö†Ô∏è Contacts request failed: {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error fetching contacts: {e}")
                errors.append(f"Error fetching contacts: {str(e)}")
            
            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
            for contact in contactpersons:
                contact_name = contact.get("name", "").strip()
                contact_phone = contact.get("phone", "").strip()
                
                if not contact_phone:
                    logger.info(f"‚è≠Ô∏è Skipping contact without phone: '{contact_name}'")
                    continue
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
                contact_phone_e164 = normalize_phone_e164(contact_phone)
                
                if not contact_name or is_auto_generated_name(contact_name, contact_phone_e164):
                    logger.info(f"‚è≠Ô∏è Skipping auto-generated contact name: '{contact_name}'")
                    skipped_count += 1
                    continue
                
                # –û–±–æ–≥–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
                await conn.execute("""
                    INSERT INTO customers (enterprise_number, phone_e164, last_name, first_name, middle_name, enterprise_name, meta)
                    VALUES ($1, $2, $3, NULL, NULL, $4, $5)
                    ON CONFLICT (enterprise_number, phone_e164) 
                    DO UPDATE SET 
                        last_name = EXCLUDED.last_name,
                        first_name = NULL,
                        middle_name = NULL,
                        enterprise_name = EXCLUDED.enterprise_name,
                        meta = COALESCE(customers.meta, '{}'::jsonb) || EXCLUDED.meta
                """, enterprise_number, contact_phone_e164, contact_name, counterparty_name,
                json.dumps({"moysklad_contact_id": contact.get("id"), "source": "moysklad", "updated_at": datetime.now().isoformat()}))
                
                logger.info(f"üë§ Enriched contact person: {contact_phone_e164} ‚Üí '{contact_name}' (company: '{counterparty_name}')")
                enriched_count += 1
        
        finally:
            await conn.close()
        
        logger.info(f"üîó Enrichment completed: {enriched_count} enriched, {skipped_count} skipped")
        return {"enriched": enriched_count, "skipped": skipped_count, "errors": errors}
        
    except Exception as e:
        error_msg = f"Enrichment error: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
        return {"enriched": enriched_count, "skipped": skipped_count, "errors": errors}

async def get_ms_config_legacy_fallback(enterprise_number: str) -> Optional[Dict[str, Any]]:
    """
    LEGACY: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ú–æ–π–°–∫–ª–∞–¥.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –≤ —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.
    """
    try:
        import asyncpg, json
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if not row or not row["integrations_config"]:
                return None

            config_data = row["integrations_config"]
            if isinstance(config_data, str):
                config_data = json.loads(config_data)

            ms_config = config_data.get("ms", {})
            return ms_config if ms_config else None
                
        finally:
            await conn.close()
    
    except Exception as e:
        logger.error(f"‚ùå Legacy DB fallback failed for {enterprise_number}: {e}")
        return None

async def get_ms_config_from_cache(enterprise_number: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ú–æ–π–°–∫–ª–∞–¥ –∏–∑ cache service —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à -> cache service (8020) -> –ë–î
    """
    current_time = time.time()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
    if enterprise_number in ms_config_cache:
        cached_entry = ms_config_cache[enterprise_number]
        if cached_entry["expires"] > current_time:
            logger.debug(f"üéØ MS config from LOCAL cache for {enterprise_number}")
            return cached_entry["config"]
        else:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            del ms_config_cache[enterprise_number]
    
    try:
        # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ cache service (8020)
        async with httpx.AsyncClient(timeout=3.0) as client:
            response = await client.get(f"http://127.0.0.1:8020/config/{enterprise_number}/ms")
            
            if response.status_code == 200:
                data = response.json()
                ms_config = data.get("config", {})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                ms_config_cache[enterprise_number] = {
                    "config": ms_config,
                    "expires": current_time + MS_CONFIG_CACHE_TTL
                }
                
                logger.info(f"‚úÖ MS config from CACHE service for {enterprise_number}: enabled={ms_config.get('enabled', False)}")
                return ms_config
            
            elif response.status_code == 404:
                logger.warning(f"‚ö†Ô∏è MS integration not configured for {enterprise_number}")
                return None
            
            else:
                logger.warning(f"‚ö†Ô∏è Cache service error {response.status_code} for {enterprise_number}")
                
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Cache service unavailable for {enterprise_number}: {e}")
    
    # 3. Fallback –∫ –ë–î (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ cache –Ω–µ —Å—Ç–∞–±–∏–ª–µ–Ω)
    try:
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if not row or not row["integrations_config"]:
                logger.warning(f"‚ö†Ô∏è No integrations config found for {enterprise_number}")
                return None

            config_data = row["integrations_config"]
            if isinstance(config_data, str):
                config_data = json.loads(config_data)

            ms_config = config_data.get("ms", {})
            if ms_config:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                ms_config_cache[enterprise_number] = {
                    "config": ms_config,
                    "expires": current_time + MS_CONFIG_CACHE_TTL
                }
                
                logger.info(f"üîÑ MS config from DATABASE fallback for {enterprise_number}: enabled={ms_config.get('enabled', False)}")
                return ms_config
            else:
                logger.warning(f"‚ö†Ô∏è MS config not found in integrations for {enterprise_number}")
                return None
                
        finally:
            await conn.close()
    
    except Exception as e:
        logger.error(f"‚ùå Database fallback failed for {enterprise_number}: {e}")
        return None

# =============================================================================

if __name__ == "__main__":
    uvicorn.run(
        "ms:app",
        host="0.0.0.0",
        port=8023,
        reload=True,
        log_level="info"
    )
