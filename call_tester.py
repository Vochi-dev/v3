#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ - call_tester.py
–ü–æ—Ä—Ç 8025

–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —Å –≤—ã–±–æ—Ä–æ–º:
- –¢–∏–ø–∞ –∑–≤–æ–Ω–∫–∞ (1-1, 2-1, 3-1, etc.)
- –í–Ω–µ—à–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
- –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ 
- –õ–∏–Ω–∏–π
- –†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π start‚Üídial‚Üíbridge‚Üíhangup
–≤ —Å–µ—Ä–≤–∏—Å 8000 –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
"""

import asyncio
import asyncpg
import json
import logging
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path

import httpx
from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Call Tester Service", description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_SERVICE_URL = "http://localhost:8000"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DATABASE_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'user': 'postgres', 
    'password': 'r/Yskqh/ZbZuvjb2b3ahfg==',
    'database': 'postgres'
}

class CallTestService:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.db_pool = None
        self.enterprises_cache = {}  # {enterprise_number: {managers: {}, lines: {}, tokens: {}}}
        
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î"""
        try:
            self.db_pool = await asyncpg.create_pool(**DATABASE_CONFIG)
            logger.info("‚úÖ Database pool created successfully")
            await self.load_enterprises_list()
        except Exception as e:
            logger.error(f"‚ùå Failed to create database pool: {e}")
            
    async def load_enterprises_list(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π"""
        try:
            async with self.db_pool.acquire() as conn:
                enterprises = await conn.fetch("""
                    SELECT number, name, secret
                    FROM enterprises
                    WHERE number IS NOT NULL AND number != ''
                    ORDER BY number
                """)
                
                for ent in enterprises:
                    self.enterprises_cache[ent['number']] = {
                        'name': ent['name'],
                        'token': ent['secret'],
                        'managers': {},
                        'lines': {},
                        'loaded': False
                    }
                
                logger.info(f"‚úÖ Loaded {len(self.enterprises_cache)} enterprises")
                
        except Exception as e:
            logger.error(f"‚ùå Failed to load enterprises: {e}")
    
    async def load_enterprise_data(self, enterprise_number: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        logger.info(f"üîç Trying to load enterprise {enterprise_number}")
        
        if enterprise_number not in self.enterprises_cache:
            logger.error(f"‚ùå Enterprise {enterprise_number} not found in cache. Available: {list(self.enterprises_cache.keys())[:5]}...")
            return False
            
        if self.enterprises_cache[enterprise_number]['loaded']:
            logger.info(f"‚úÖ Enterprise {enterprise_number} already loaded")
            return True  # –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            
        try:
            async with self.db_pool.acquire() as conn:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –∏ –±–µ–∑)
                managers = await conn.fetch("""
                    SELECT uip.phone_number as internal_phone, 
                           u.first_name, u.last_name, u.patronymic as middle_name, 
                           u.personal_phone
                    FROM user_internal_phones uip
                    LEFT JOIN users u ON uip.user_id = u.id
                    WHERE uip.enterprise_number = $1
                    ORDER BY CASE WHEN uip.phone_number ~ '^[0-9]+$' 
                                  THEN uip.phone_number::int 
                                  ELSE 9999 END, uip.phone_number
                """, enterprise_number)
                
                managers_data = {}
                for mgr in managers:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä
                    if mgr['first_name'] or mgr['last_name']:
                        full_name = " ".join(filter(None, [mgr['first_name'], mgr['last_name']]))
                        display_name = f"{mgr['internal_phone']} - {full_name}"
                        # –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –§–ò–û –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞
                        clean_name = full_name
                    else:
                        display_name = mgr['internal_phone']
                        clean_name = mgr['internal_phone']
                    
                    managers_data[mgr['internal_phone']] = {
                        'name': display_name,
                        'clean_name': clean_name,  # –ò–º—è –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞
                        'personal_phone': mgr['personal_phone'] or '',
                        'follow_me_number': None,
                        'follow_me_enabled': False
                    }
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º GSM –ª–∏–Ω–∏–∏ (–ë–ï–ó shop_lines!)
                gsm_lines = await conn.fetch("""
                    SELECT gl.line_id, gl.internal_id, gl.phone_number, gl.line_name,
                           gl.prefix, g.gateway_name as goip_name, g.device_ip as goip_ip
                    FROM gsm_lines gl
                    LEFT JOIN goip g ON gl.goip_id = g.id
                    WHERE gl.enterprise_number = $1
                    ORDER BY gl.line_id
                """, enterprise_number)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º SIP –ª–∏–Ω–∏–∏  
                sip_lines = await conn.fetch("""
                    SELECT su.id as line_id, su.line_name, su.line_name as phone_number,
                           su.prefix, sp.name as provider_name, 'SIP' as line_type
                    FROM sip_unit su
                    LEFT JOIN sip sp ON su.provider_id = sp.id
                    WHERE su.enterprise_number = $1
                    ORDER BY su.id
                """, enterprise_number)
                
                lines_data = {}
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GSM –ª–∏–Ω–∏–∏
                for line in gsm_lines:
                    line_name = line['line_name'] or f"GSM-{line['line_id']}"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    operator = "GSM"
                    if any(op in line_name.upper() for op in ['A1', '–ú–¢–°', 'LIFE']):
                        if 'A1' in line_name.upper():
                            operator = "A1"
                        elif '–ú–¢–°' in line_name.upper():
                            operator = "–ú–¢–°"
                        elif 'LIFE' in line_name.upper():
                            operator = "Life"
                    
                    lines_data[line['line_id']] = {
                        'name': f"{line_name} (GSM)",
                        'phone': line['phone_number'] or '',
                        'operator': operator,
                        'type': 'GSM',
                        'goip_name': line['goip_name']
                    }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIP –ª–∏–Ω–∏–∏
                for line in sip_lines:
                    line_name = line['line_name'] or f"SIP-{line['line_id']}"
                    
                    lines_data[f"SIP-{line['line_id']}"] = {
                        'name': f"{line_name} (SIP)",
                        'phone': line['phone_number'] or '',
                        'operator': 'SIP',
                        'type': 'SIP',
                        'provider_name': line['provider_name'],
                        'prefix': line['prefix']
                    }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
                self.enterprises_cache[enterprise_number]['managers'] = managers_data
                self.enterprises_cache[enterprise_number]['lines'] = lines_data
                self.enterprises_cache[enterprise_number]['loaded'] = True
                
                logger.info(f"‚úÖ Loaded {len(managers_data)} managers and {len(lines_data)} lines for {enterprise_number}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Failed to load data for enterprise {enterprise_number}: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    async def send_event(self, event_type: str, data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Å–µ—Ä–≤–∏—Å 8000"""
        try:
            endpoint_map = {
                "start": "/start",
                "dial": "/dial",
                "bridge": "/bridge", 
                "hangup": "/hangup"
            }
            
            endpoint = endpoint_map.get(event_type)
            if not endpoint:
                logger.error(f"Unknown event type: {event_type}")
                return False
            
            url = f"{TARGET_SERVICE_URL}{endpoint}"
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(url, json=data)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ Event {event_type} sent successfully")
                    return True
                else:
                    logger.error(f"‚ùå Event {event_type} failed: HTTP {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error sending {event_type}: {e}")
            return False
    
    async def simulate_call(self, call_params: Dict[str, Any]) -> Dict[str, Any]:
        """–≠–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            unique_id = f"test_{int(datetime.now().timestamp())}.{uuid.uuid4().hex[:8]}"
            start_time = datetime.now()
            duration_seconds = call_params.get('duration_seconds', 180)  # 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            end_time = start_time + timedelta(seconds=duration_seconds)
            
            call_type = call_params['call_type']
            external_phone = call_params['external_phone']
            internal_phone = call_params['internal_phone']
            line_id = call_params['line_id']
            call_status = call_params['call_status']  # 2=–æ—Ç–≤–µ—Ç–∏–ª–∏, 3=–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
            enterprise_number = call_params['enterprise_number']
            enterprise_token = call_params['enterprise_token']
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–º—É–ª—è—Ü–∏–∏
            result = {
                'unique_id': unique_id,
                'events_sent': 0,
                'events_failed': 0,
                'errors': [],
                'success': False
            }
            
            # 1. START —Å–æ–±—ã—Ç–∏–µ
            start_data = {
                "Event": "start",
                "UniqueId": unique_id,
                "Token": enterprise_token,
                "CallerIDNum": external_phone if call_type == 0 else internal_phone,
                "Extensions": [internal_phone],
                "CallType": call_type,
                "Exten": line_id,
                "StartTime": start_time.isoformat(),
                "Channel": f"SIP/{line_id}-00000001" if call_type == 0 else f"SIP/{internal_phone}-00000001"
            }
            
            if await self.send_event("start", start_data):
                result['events_sent'] += 1
            else:
                result['events_failed'] += 1
                result['errors'].append("Failed to send start event")
            
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            
            # 2. DIAL —Å–æ–±—ã—Ç–∏–µ
            dial_data = {
                "Event": "dial", 
                "UniqueId": unique_id,
                "Token": enterprise_token,
                "CallerIDNum": external_phone if call_type == 0 else internal_phone,
                "Phone": external_phone,
                "Extensions": [internal_phone],
                "CallType": call_type,
                "Trunk": line_id,
                "Channel": f"SIP/{line_id}-00000001" if call_type == 0 else f"SIP/{internal_phone}-00000001"
            }
            
            if await self.send_event("dial", dial_data):
                result['events_sent'] += 1
            else:
                result['events_failed'] += 1
                result['errors'].append("Failed to send dial event")
                
            await asyncio.sleep(3)
            
            # 3. BRIDGE —Å–æ–±—ã—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏)
            if call_status == 2:  # –û—Ç–≤–µ—Ç–∏–ª–∏
                bridge_data = {
                    "Event": "bridge",
                    "UniqueId": unique_id,
                    "Token": enterprise_token,
                    "CallerIDNum": external_phone if call_type == 0 else internal_phone,
                    "ConnectedLineNum": internal_phone if call_type == 0 else external_phone,
                    "CallType": call_type,
                    "Channel": f"SIP/{internal_phone}-00000002",
                    "DestChannel": f"SIP/{line_id}-00000001"
                }
                
                if await self.send_event("bridge", bridge_data):
                    result['events_sent'] += 1
                else:
                    result['events_failed'] += 1
                    result['errors'].append("Failed to send bridge event")
                    
                await asyncio.sleep(duration_seconds)  # –†–∞–∑–≥–æ–≤–æ—Ä
            else:
                await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
            
            # 4. HANGUP —Å–æ–±—ã—Ç–∏–µ
            hangup_data = {
                "Event": "hangup",
                "UniqueId": unique_id,
                "Token": enterprise_token,
                "CallerIDNum": external_phone if call_type == 0 else internal_phone,
                "Phone": external_phone,
                "Extensions": [internal_phone],
                "CallType": call_type,
                "CallStatus": call_status,
                "StartTime": start_time.isoformat(),
                "EndTime": end_time.isoformat(),
                "Trunk": line_id,
                "Channel": f"SIP/{internal_phone}-00000002" if call_status == 2 else f"SIP/{line_id}-00000001",
                "Cause": "16" if call_status == 2 else "19",
                "CauseTxt": "Normal Clearing" if call_status == 2 else "No Answer"
            }
            
            if await self.send_event("hangup", hangup_data):
                result['events_sent'] += 1
            else:
                result['events_failed'] += 1
                result['errors'].append("Failed to send hangup event")
            
            result['success'] = result['events_failed'] == 0
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Call simulation failed: {e}")
            return {
                'unique_id': unique_id if 'unique_id' in locals() else 'unknown',
                'events_sent': 0,
                'events_failed': 1,
                'errors': [str(e)],
                'success': False
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
test_service = CallTestService()

@app.on_event("startup")
async def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await test_service.init_db()

@app.get("/", response_class=HTMLResponse)
async def main_page(request: Request, enterprise: str = "0367"):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ
    if enterprise not in test_service.enterprises_cache:
        raise HTTPException(status_code=404, detail=f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    await test_service.load_enterprise_data(enterprise)
    
    enterprise_data = test_service.enterprises_cache[enterprise]
    
    # –¢–∏–ø—ã –∑–≤–æ–Ω–∫–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º + —Å–ø–µ—Ä–µ–¥–∏)
    call_types = [
        # –ò—Å—Ö–æ–¥—è—â–∏–µ (1-X)
        {"id": 1, "name": "1-1", "description": "–ü—Ä—è–º–æ–π –Ω–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞ - –∞–±–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª"},
        {"id": 2, "name": "1-2", "description": "–ù–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞ —Å –≤–Ω–µ—à–Ω–µ–π –∏–Ω–∏—Ü–∏–∞—Ü–∏–µ–π (–∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, CRM) - –∑–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω\n(—Å–Ω–∞—á–∞–ª–∞ –¥–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç–µ—Ä—É –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏—é –≤—ã–∑–æ–≤–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞)"},
        {"id": 3, "name": "1-3", "description": "–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º - –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º - –¥—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É, –Ω–æ –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å\n—Å —ç—Ç–∏–º –∞–±–æ–Ω–µ–Ω—Ç–æ–º, –∏ –ø–æ–ª–æ–∂–∏–ª —Ç—Ä—É–±–∫—É, —Ä–∞–∑–≥–æ–≤–æ—Ä –≤–µ—Ä–Ω—É–ª—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (151)"},
        {"id": 4, "name": "1-4", "description": "–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º - –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º - –æ–Ω —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, 151-–π –ø–æ–ª–æ–∂–∏–ª —Ç—Ä—É–±–∫—É, –∏ –≤–Ω–µ—à–Ω–∏–π –∞–±–æ–Ω–µ–Ω—Ç\n–ø–æ–≥–æ–≤–æ—Ä–∏–ª —Å–æ 152-–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"},
        {"id": 5, "name": "1-5", "description": "–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º - –≤—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–Ω–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ)"},
        {"id": 6, "name": "1-6", "description": "–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ - –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"},
        {"id": 7, "name": "1-7", "description": "–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ - –≤—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"},
        {"id": 8, "name": "1-8", "description": "–ü—Ä—è–º–æ–π –Ω–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞ - –∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"},
        {"id": 9, "name": "1-9", "description": "–ü—Ä—è–º–æ–π –Ω–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞ - 151 –∑–≤–æ–Ω–∏—Ç –∞–±–æ–Ω–µ–Ω—Ç—É +375296254070, —Å–∏—Å—Ç–µ–º–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ª–ø–ª–∞–Ω—É –Ω–∞–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Å –ª–∏–Ω–∏–∏ 0001363, –Ω–æ –æ–Ω–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º,\n–∏ –∑–≤–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ—à–µ–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ª–∏–Ω–∏–∏ 0001366, —Ç—Ä—É–±–∫—É –ø–æ–¥–Ω—è–ª–∏"},
        {"id": 10, "name": "1-10", "description": "–ü—Ä—è–º–æ–π –Ω–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞ - 151 –∑–≤–æ–Ω–∏—Ç –∞–±–æ–Ω–µ–Ω—Ç—É +375296254070, —Å–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ª–ø–ª–∞–Ω—É —Å–¥–µ–ª–∞—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –ª–∏–Ω–∏–∏ 0001363, –Ω–æ –æ–Ω–∞\n–∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º, –∞ –∏–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è –∞–±–æ–Ω–µ–Ω—Ç–∞ 151 –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ, –∏ –∑–≤–æ–Ω–æ–∫ –ø—Ä–µ—Ä–≤–∞–ª—Å—è"},
        {"id": 11, "name": "1-11", "description": "151-–π –∞–±–æ–Ω–µ–Ω—Ç –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—ã–∑–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (+7), –∫—É–¥–∞ –≤—ã–∑–æ–≤—ã –µ–º—É –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ +375), –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫–∞–∑ –≤ –Ω–∞–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞\n+74957776644"},
        
        # –í—Ö–æ–¥—è—â–∏–µ (2-X)
        {"id": 12, "name": "2-1", "description": "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –Ω–∞–±–æ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ - –æ—Ç–≤–µ—Ç"},
        {"id": 13, "name": "2-2", "description": "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –Ω–∞–±–æ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ - –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞"},
        {"id": 14, "name": "2-3", "description": "–ó–≤–æ–Ω–æ–∫ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è - –Ω–∞–±–æ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ - –æ—Ç–≤–µ—Ç"},
        {"id": 15, "name": "2-4", "description": "–ó–≤–æ–Ω–æ–∫ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è - –Ω–∞–±–æ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ - –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞"},
        {"id": 16, "name": "2-5", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ + –º–æ–±–∏–ª—å–Ω—ã–π = –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º"},
        {"id": 17, "name": "2-6", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ + –º–æ–±–∏–ª—å–Ω—ã–π = –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º"},
        {"id": 18, "name": "2-7", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ - –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É - –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º - –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º - —Ä–∞–∑–≥–æ–≤–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω"},
        {"id": 19, "name": "2-8", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ - –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É - –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º - –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º - —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Å—Ç–æ—è–ª—Å—è"},
        {"id": 20, "name": "2-9", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ - –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É - –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º - –≤—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–Ω–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ)"},
        {"id": 21, "name": "2-10", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ - –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É - –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ - –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"},
        {"id": 22, "name": "2-11", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—É –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ - –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É - –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ - –≤—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"},
        {"id": 23, "name": "2-12", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –µ—â–µ –æ–¥–∏–Ω –∞–±–æ–Ω–µ–Ω—Ç - —Ç—Ä—É–±–∫—É –ø–æ–¥–Ω—è–ª–∏"},
        {"id": 24, "name": "2-13", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –µ—â–µ –æ–¥–∏–Ω –∞–±–æ–Ω–µ–Ω—Ç, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –º–æ–±–∏–ª—å–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —Ç—Ä—É–±–∫—É –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º"},
        {"id": 25, "name": "2-14", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –µ—â–µ –æ–¥–∏–Ω –∞–±–æ–Ω–µ–Ω—Ç, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –º–æ–±–∏–ª—å–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —Ç—Ä—É–±–∫—É –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º"},
        {"id": 26, "name": "2-15", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –µ—â–µ –æ–¥–∏–Ω –∞–±–æ–Ω–µ–Ω—Ç, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–ª—Å—è –º–æ–±–∏–ª—å–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —Ç—Ä—É–±–∫—É –Ω–µ –ø–æ–¥–Ω—è–ª–∏ –Ω–∏–≥–¥–µ"},
        {"id": 27, "name": "2-16", "description": "–ó–≤–æ–Ω–æ–∫ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –∑–≤–æ–Ω–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –∑–≤–æ–Ω–æ–∫ –Ω–∞ –¥–≤—É—Ö - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –∑–≤–æ–Ω–æ–∫ –Ω–∞ 2-—Ö + –º–æ–±–∏–ª—å–Ω—ã–π - –æ—Ç–≤–µ—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º"},
        {"id": 28, "name": "2-17", "description": "–ó–≤–æ–Ω–æ–∫ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –∑–≤–æ–Ω–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –∑–≤–æ–Ω–æ–∫ –Ω–∞ –¥–≤—É—Ö - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –∑–≤–æ–Ω–æ–∫ –Ω–∞ 2-—Ö + –º–æ–±–∏–ª—å–Ω—ã–π - –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º"},
        {"id": 29, "name": "2-18", "description": "–í–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫ ‚Üí –æ—Ç–≤–µ—á–∞–µ—Ç 151-–π 2. 151 –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ 152-–≥–æ (—Å –∑–∞–ø—Ä–æ—Å–æ–º) 3. 152 –ø—Ä–∏–Ω–∏–º–∞–µ—Ç, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∞–ª—å—à–µ –Ω–∞ 150-–≥–æ 4. 150 —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º"},
        {"id": 30, "name": "2-19", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - 151-–π –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É, –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–æ–Ω–æ–∫ —Å –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–π –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π 152-–º—É, –Ω–æ 152-–π –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å–∞–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª (–±—ã–ª –∑–∞–Ω—è—Ç) (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ)"},
        {"id": 31, "name": "2-20", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - 151-–π –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É, –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–æ–Ω–æ–∫ —Å —É—Å–ª–æ–≤–Ω–æ–π –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π 152-–º—É, –Ω–æ 152-–π –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å–∞–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª (–±—ã–ª –∑–∞–Ω—è—Ç) (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ)"},
        {"id": 32, "name": "2-21", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - 151-–π –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É, –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–æ–Ω–æ–∫ —Å –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–π –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π 152-–º—É, –Ω–æ 152-–π –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å–∞–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª (–±—ã–ª –∑–∞–Ω—è—Ç) (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ)"},
        {"id": 33, "name": "2-22", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - 151-–π –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É, –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–æ–Ω–æ–∫ —Å —É—Å–ª–æ–≤–Ω–æ–π –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π 152-–º—É, –Ω–æ 152-–π –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å–∞–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª (–±—ã–ª –∑–∞–Ω—è—Ç) (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ)"},
        {"id": 34, "name": "2-23", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ +375296254070 –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"},
        {"id": 35, "name": "2-24", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ +375296254070 –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"},
        {"id": 36, "name": "2-25", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ 150 –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"},
        {"id": 37, "name": "2-26", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ 150 –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"},
        {"id": 38, "name": "2-27", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ 150 –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏"},
        {"id": 39, "name": "2-28", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –ø–æ–¥–Ω—è–ª–∏ –Ω–∞ +375296254070 –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏"},
        {"id": 40, "name": "2-29", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –Ω–∏–≥–¥–µ —Ç—Ä—É–±–∫—É –Ω–µ –ø–æ–¥–Ω—è–ª–∏"},
        {"id": 41, "name": "2-30", "description": "–ü–æ—Å—Ç—É–ø–∏–ª –∑–≤–æ–Ω–æ–∫ - –ø–æ–¥–Ω—è–ª 151, –∏ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –Ω–æ–º–µ—Ä 300 (FollowMe –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞) - –∑–≤–æ–Ω–æ–∫ –ø–æ—à–µ–ª —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ 150, –ø–æ—Ç–æ–º –Ω–∞ 150 –∏ +375296254070, –Ω–∏–≥–¥–µ —Ç—Ä—É–±–∫—É –Ω–µ –ø–æ–¥–Ω—è–ª–∏"},
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ (3-X)
        {"id": 42, "name": "3-1", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –∞–±–æ–Ω–µ–Ω—Ç–∞ - –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É"},
        {"id": 43, "name": "3-2", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –∞–±–æ–Ω–µ–Ω—Ç–∞ - –Ω–µ –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É"},
        {"id": 44, "name": "3-3", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª - –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É"},
        {"id": 45, "name": "3-4", "description": "–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª - –Ω–µ –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É"}
        ]
    
    # –°—Ç–∞—Ç—É—Å—ã –∑–≤–æ–Ω–∫–æ–≤
    call_statuses = [
        {"id": 2, "name": "–û—Ç–≤–µ—Ç–∏–ª–∏", "icon": "‚úÖ"},
        {"id": 3, "name": "–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏", "icon": "‚ùå"}
    ]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    managers_list = []
    for phone, manager_data in enterprise_data.get('managers', {}).items():
        managers_list.append({
            'phone': phone,
            'name': manager_data['name'],
            'clean_name': manager_data.get('clean_name', manager_data['name']),  # –ò–º—è –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞
            'personal_phone': manager_data.get('personal_phone', ''),
            'follow_me_number': manager_data.get('follow_me_number'),
            'follow_me_enabled': manager_data.get('follow_me_enabled', False)
        })
    
    lines_list = []
    for line_id, line_data in enterprise_data.get('lines', {}).items():
        lines_list.append({
            'id': line_id,
            'name': line_data['name'],
            'phone': line_data.get('phone', ''),
            'operator': line_data.get('operator', '')
        })
    
    return templates.TemplateResponse("test_interface.html", {
        "request": request,
        "enterprise_number": enterprise,
        "enterprise_name": enterprise_data['name'],
        "call_types": call_types,
        "call_statuses": call_statuses,
        "managers": managers_list,
        "lines": lines_list
    })

@app.post("/api/webhook-event")
async def webhook_event(request: Request):
    """
    Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        event_data = await request.json()
        
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_data.get('event', 'UNKNOWN')} –¥–ª—è –∑–≤–æ–Ω–∫–∞ {event_data.get('call_id', 'unknown')}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        
        return {
            "success": True,
            "message": "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
            "event_id": event_data.get('call_id'),
            "timestamp": event_data.get('timestamp')
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")

@app.post("/api/test-call")
async def test_call_api(
    call_type: int = Form(...),
    external_phone: str = Form(...),
    internal_phone: str = Form(...),
    line_id: str = Form(...),
    call_status: int = Form(None),  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    duration_minutes: int = Form(None),  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    enterprise: str = Form("0367")
):
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
    
    try:
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ –∑–≤–æ–Ω–∫–æ–≤
        call_type_defaults = {
            1: {"duration": 3, "status": 2},  # 1-1: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            2: {"duration": 3, "status": 2},  # 1-2: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            3: {"duration": 3, "status": 2},  # 1-3: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            4: {"duration": 3, "status": 2},  # 1-4: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            5: {"duration": 3, "status": 2},  # 1-5: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            6: {"duration": 3, "status": 2},  # 1-6: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            7: {"duration": 3, "status": 2},  # 1-7: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            8: {"duration": 3, "status": 3},  # 1-8: 3 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (3)
            9: {"duration": 3, "status": 2},  # 1-9: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            10: {"duration": 3, "status": 4}, # 1-10: 3 –º–∏–Ω, –û–¢–ú–ï–ù–ï–ù (4)
            11: {"duration": 3, "status": 5}, # 1-11: 3 –º–∏–Ω, –ó–ê–ü–†–ï–©–ï–ù (5)
            12: {"duration": 3, "status": 2}, # 2-1: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            13: {"duration": 3, "status": 3}, # 2-2: 3 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (3)
            14: {"duration": 3, "status": 2}, # 2-3: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            15: {"duration": 3, "status": 3}, # 2-4: 3 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (3)
            16: {"duration": 3, "status": 2}, # 2-5: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º (2)
            17: {"duration": 3, "status": 2}, # 2-6: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º (2)
            18: {"duration": 3, "status": 3}, # 2-7: 3 –º–∏–Ω, —Ä–∞–∑–≥–æ–≤–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω (3)
            19: {"duration": 3, "status": 2}, # 2-8: 3 –º–∏–Ω, —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Å—Ç–æ—è–ª—Å—è (2)
            20: {"duration": 2, "status": 3}, # 2-9: 2 –º–∏–Ω, –Ω–µ –ø—Ä–∏–Ω—è—Ç (3)
            21: {"duration": 3, "status": 2}, # 2-10: 3 –º–∏–Ω, –ø—Ä–∏–Ω—è—Ç (2)
            22: {"duration": 2, "status": 3}, # 2-11: 2 –º–∏–Ω, –Ω–µ –ø—Ä–∏–Ω—è—Ç (3)
            23: {"duration": 3, "status": 2}, # 2-12: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (2)
            24: {"duration": 3, "status": 2}, # 2-13: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º (2)
            25: {"duration": 3, "status": 2}, # 2-14: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º (2)
            26: {"duration": 2, "status": 3}, # 2-15: 2 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∏–≥–¥–µ (3)
            27: {"duration": 3, "status": 2}, # 2-16: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º (2)
            28: {"duration": 3, "status": 2}, # 2-17: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º (2)
            29: {"duration": 4, "status": 2}, # 2-18: 4 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è) (2)
            30: {"duration": 3, "status": 2}, # 2-19: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç, –∞–ø–ø–∞—Ä–∞—Ç —É–º–µ–µ—Ç) (2)
            31: {"duration": 3, "status": 2}, # 2-20: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç, –∞–ø–ø–∞—Ä–∞—Ç —É–º–µ–µ—Ç) (2)
            32: {"duration": 2, "status": 3}, # 2-21: 2 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (–∞–ø–ø–∞—Ä–∞—Ç –Ω–µ —É–º–µ–µ—Ç –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤) (3)
            33: {"duration": 2, "status": 3}, # 2-22: 2 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (–∞–ø–ø–∞—Ä–∞—Ç –Ω–µ —É–º–µ–µ—Ç –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤) (3)
            34: {"duration": 4, "status": 2}, # 2-23: 4 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (Follow Me —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å) (2)
            35: {"duration": 3, "status": 3}, # 2-24: 3 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (Follow Me –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å) (3)
            36: {"duration": 4, "status": 2}, # 2-25: 4 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–ø–æ–¥–Ω—è–ª–∏ –Ω–∞ 150 –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å) (2)
            37: {"duration": 3, "status": 3}, # 2-26: 3 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (–ø–æ–¥–Ω—è–ª–∏ –Ω–∞ 150 –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å) (3)
            38: {"duration": 3, "status": 2}, # 2-27: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ 150) (2)
            39: {"duration": 3, "status": 2}, # 2-28: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º) (2)
            40: {"duration": 2, "status": 3}, # 2-29: 2 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∏–≥–¥–µ) (3)
            41: {"duration": 2, "status": 3}, # 2-30: 2 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∏–≥–¥–µ) (3)
            42: {"duration": 2, "status": 2}, # 3-1: 2 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫) (2)
            43: {"duration": 1, "status": 3}, # 3-2: 1 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫) (3)
            44: {"duration": 3, "status": 2}, # 3-3: 3 –º–∏–Ω, –æ—Ç–≤–µ—Ç–∏–ª–∏ (–∑–≤–æ–Ω–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª) (2)
            45: {"duration": 2, "status": 3}, # 3-4: 2 –º–∏–Ω, –ù–ï –æ—Ç–≤–µ—Ç–∏–ª–∏ (–∑–≤–æ–Ω–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª) (3)
            # –î–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
        if enterprise not in test_service.enterprises_cache:
            raise HTTPException(status_code=404, detail=f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        enterprise_data = test_service.enterprises_cache[enterprise]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
        defaults = call_type_defaults.get(call_type, {"duration": 3, "status": 2})
        if duration_minutes is None:
            duration_minutes = defaults["duration"]
        if call_status is None:
            call_status = defaults["status"]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not external_phone.strip():
            raise HTTPException(status_code=400, detail="–í–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        if not internal_phone.strip():
            raise HTTPException(status_code=400, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        if not line_id.strip():
            raise HTTPException(status_code=400, detail="–õ–∏–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–æ–Ω–∫–∞
        call_params = {
            'call_type': call_type,
            'external_phone': external_phone.strip(),
            'internal_phone': internal_phone.strip(),
            'line_id': line_id.strip(),
            'call_status': call_status,
            'duration_seconds': duration_minutes * 60,
            'enterprise_number': enterprise,
            'enterprise_token': enterprise_data['token']
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é
        result = await test_service.simulate_call(call_params)
        
        return JSONResponse({
            "success": result['success'],
            "message": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
            "details": {
                "unique_id": result['unique_id'],
                "events_sent": result['events_sent'],
                "events_failed": result['events_failed'],
                "errors": result['errors']
            }
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Test call API error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/managers")
async def get_managers(enterprise: str = "0367"):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    if enterprise not in test_service.enterprises_cache:
        raise HTTPException(status_code=404, detail=f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    if not await test_service.load_enterprise_data(enterprise):
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    
    return JSONResponse(test_service.enterprises_cache[enterprise].get('managers', {}))

@app.get("/api/lines") 
async def get_lines(enterprise: str = "0367"):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏–Ω–∏–π"""
    if enterprise not in test_service.enterprises_cache:
        raise HTTPException(status_code=404, detail=f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    if not await test_service.load_enterprise_data(enterprise):
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π")
    
    return JSONResponse(test_service.enterprises_cache[enterprise].get('lines', {}))

@app.get("/api/enterprises")
async def get_enterprises():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π"""
    enterprises = []
    for number, data in test_service.enterprises_cache.items():
        enterprises.append({
            'number': number,
            'name': data['name'],
            'has_token': bool(data['token'])
        })
    return JSONResponse(enterprises)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    total_managers = sum(len(data['managers']) for data in test_service.enterprises_cache.values())
    total_lines = sum(len(data['lines']) for data in test_service.enterprises_cache.values())
    
    return {
        "status": "healthy",
        "enterprises_loaded": len(test_service.enterprises_cache),
        "total_managers": total_managers,
        "total_lines": total_lines,
        "database_connected": test_service.db_pool is not None
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8025)
