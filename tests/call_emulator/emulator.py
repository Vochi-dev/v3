#!/usr/bin/env python3
"""
–≠–º—É–ª—è—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤.

–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—Å–µ 42 —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–æ–±—ã—Ç–∏–π
–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
"""

import asyncio
import json
import time
import uuid
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import httpx
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class EmulatorEvent:
    """–û–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    event_type: str  # "start", "dial", "bridge", "hangup"
    data: Dict[str, Any]
    delay_ms: int = 0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–º—Å)

@dataclass 
class CallScenario:
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∑–≤–æ–Ω–∫–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–æ–±—ã—Ç–∏–π"""
    test_id: str  # "2-1", "1-9", etc.
    description: str
    call_type: int  # 0=–≤—Ö–æ–¥—è—â–∏–π, 1=–∏—Å—Ö–æ–¥—è—â–∏–π, 2=–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
    complexity: str  # "SIMPLE", "MULTIPLE_TRANSFER", etc.
    events: List[EmulatorEvent]
    expected_telegram_messages: int
    expected_final_content: List[str]  # –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

class CallEmulator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.scenarios: Dict[str, CallScenario] = {}
        self.test_results: Dict[str, Dict[str, Any]] = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è 0367
        self.enterprise_number = "0367"
        self.enterprise_token = "375293332255"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        self._load_scenarios()
    
    def _load_scenarios(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        templates_dir = Path(__file__).parent.parent / "event_templates"
        
        if not templates_dir.exists():
            logger.warning(f"Templates directory not found: {templates_dir}")
            return
            
        for json_file in templates_dir.glob("*.json"):
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    scenario = self._parse_scenario(data)
                    self.scenarios[scenario.test_id] = scenario
                    logger.info(f"Loaded scenario: {scenario.test_id} - {scenario.description}")
            except Exception as e:
                logger.error(f"Error loading scenario from {json_file}: {e}")
    
    def _parse_scenario(self, data: Dict[str, Any]) -> CallScenario:
        """–ü–∞—Ä—Å–∏—Ç JSON –≤ CallScenario"""
        events = []
        for event_data in data.get("events", []):
            event = EmulatorEvent(
                event_type=event_data["type"],
                data=event_data["data"],
                delay_ms=event_data.get("delay_ms", 0)
            )
            events.append(event)
        
        return CallScenario(
            test_id=data["test_id"],
            description=data["description"],
            call_type=data["call_type"],
            complexity=data["complexity"],
            events=events,
            expected_telegram_messages=data.get("expected_telegram_messages", 1),
            expected_final_content=data.get("expected_final_content", [])
        )
    
    def _generate_unique_data(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞"""
        timestamp = int(time.time())
        unique_id = f"{timestamp}.{hash(str(uuid.uuid4())) % 100000}"
        
        return {
            "unique_id": unique_id,
            "timestamp": timestamp,
            "start_time": datetime.now().isoformat(),
            "end_time": (datetime.now() + timedelta(minutes=3)).isoformat()
        }
    
    def _inject_test_data(self, event_data: Dict[str, Any], unique_data: Dict[str, str]) -> Dict[str, Any]:
        """–ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–±—ã—Ç–∏–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = event_data.copy()
        
        # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data["UniqueId"] = unique_data["unique_id"]
        data["Token"] = self.enterprise_token
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamps –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if "StartTime" in data:
            data["StartTime"] = unique_data["start_time"]
        if "EndTime" in data:
            data["EndTime"] = unique_data["end_time"]
            
        return data
    
    async def run_scenario(self, test_id: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if test_id not in self.scenarios:
            return {"error": f"Scenario {test_id} not found"}
        
        scenario = self.scenarios[test_id]
        logger.info(f"üöÄ Running scenario {test_id}: {scenario.description}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        unique_data = self._generate_unique_data()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        result = {
            "test_id": test_id,
            "description": scenario.description,
            "started_at": datetime.now().isoformat(),
            "events_sent": 0,
            "events_failed": 0,
            "telegram_messages": 0,
            "errors": [],
            "success": False
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            for i, event in enumerate(scenario.events):
                # –ñ–¥–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                if event.delay_ms > 0:
                    await asyncio.sleep(event.delay_ms / 1000.0)
                
                # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                event_data = self._inject_test_data(event.data, unique_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                success = await self._send_event(event.event_type, event_data)
                
                if success:
                    result["events_sent"] += 1
                    logger.info(f"‚úÖ Event {i+1}/{len(scenario.events)}: {event.event_type}")
                else:
                    result["events_failed"] += 1
                    result["errors"].append(f"Failed to send {event.event_type} event")
                    logger.error(f"‚ùå Event {i+1}/{len(scenario.events)}: {event.event_type}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            await asyncio.sleep(1.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            result["success"] = result["events_failed"] == 0
            result["completed_at"] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.test_results[test_id] = result
            
            logger.info(f"‚úÖ Scenario {test_id} completed: {result['events_sent']} events sent")
            return result
            
        except Exception as e:
            result["errors"].append(str(e))
            result["success"] = False
            result["completed_at"] = datetime.now().isoformat()
            logger.error(f"‚ùå Scenario {test_id} failed: {e}")
            return result
    
    async def _send_event(self, event_type: str, data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Ä–≤–∏—Å 8000"""
        try:
            endpoint_map = {
                "start": "/start",
                "dial": "/dial", 
                "bridge": "/bridge",
                "hangup": "/hangup"
            }
            
            endpoint = endpoint_map.get(event_type)
            if not endpoint:
                logger.error(f"Unknown event type: {event_type}")
                return False
            
            url = f"{self.base_url}{endpoint}"
            
            async with httpx.AsyncClient(timeout=5.0) as client:
                response = await client.post(url, json=data)
                
                if response.status_code == 200:
                    return True
                else:
                    logger.error(f"HTTP {response.status_code} for {event_type}: {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error sending {event_type} event: {e}")
            return False
    
    async def run_all_scenarios(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        logger.info(f"üöÄ Running all {len(self.scenarios)} scenarios")
        
        results = {}
        total_success = 0
        
        for test_id in sorted(self.scenarios.keys()):
            result = await self.run_scenario(test_id)
            results[test_id] = result
            
            if result.get("success"):
                total_success += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            await asyncio.sleep(2.0)
        
        summary = {
            "total_scenarios": len(self.scenarios),
            "successful": total_success,
            "failed": len(self.scenarios) - total_success,
            "results": results,
            "completed_at": datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ All scenarios completed: {total_success}/{len(self.scenarios)} successful")
        return summary
    
    def get_test_result(self, test_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        return self.test_results.get(test_id)
    
    def list_scenarios(self) -> List[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        return [
            {
                "test_id": scenario.test_id,
                "description": scenario.description,
                "call_type": scenario.call_type,
                "complexity": scenario.complexity
            }
            for scenario in self.scenarios.values()
        ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–º—É–ª—è—Ç–æ—Ä–∞
emulator = CallEmulator()

if __name__ == "__main__":
    async def main():
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        scenarios = emulator.list_scenarios()
        print(f"Available scenarios: {len(scenarios)}")
        for s in scenarios:
            print(f"  {s['test_id']}: {s['description']}")
    
    asyncio.run(main())
