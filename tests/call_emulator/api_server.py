#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π –∑–≤–æ–Ω–∫–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel
import uvicorn

from .emulator import emulator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Call Event Emulator API", version="1.0.0")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TestRequest(BaseModel):
    test_id: str
    enterprise_number: Optional[str] = "0367"

class BatchTestRequest(BaseModel):
    test_ids: list[str] = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –≤—Å–µ —Ç–µ—Å—Ç—ã
    enterprise_number: Optional[str] = "0367"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
running_tests: Dict[str, str] = {}  # test_id -> status

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    scenarios_count = len(emulator.list_scenarios())
    return {
        "status": "healthy",
        "scenarios_loaded": scenarios_count,
        "running_tests": len(running_tests)
    }

@app.get("/scenarios")
async def list_scenarios():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    return {
        "scenarios": emulator.list_scenarios(),
        "total": len(emulator.scenarios)
    }

@app.get("/scenarios/{test_id}")
async def get_scenario(test_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    if test_id not in emulator.scenarios:
        raise HTTPException(status_code=404, detail=f"Scenario {test_id} not found")
    
    scenario = emulator.scenarios[test_id]
    return {
        "test_id": scenario.test_id,
        "description": scenario.description,
        "call_type": scenario.call_type,
        "complexity": scenario.complexity,
        "events_count": len(scenario.events),
        "expected_messages": scenario.expected_telegram_messages,
        "events": [
            {
                "type": event.event_type,
                "delay_ms": event.delay_ms
            }
            for event in scenario.events
        ]
    }

@app.post("/test/run/{test_id}")
async def run_single_test(test_id: str, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
    if test_id not in emulator.scenarios:
        raise HTTPException(status_code=404, detail=f"Scenario {test_id} not found")
    
    if test_id in running_tests:
        raise HTTPException(status_code=409, detail=f"Test {test_id} is already running")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ —Ñ–æ–Ω–µ
    running_tests[test_id] = "running"
    background_tasks.add_task(run_test_background, test_id)
    
    return {
        "message": f"Test {test_id} started",
        "test_id": test_id,
        "status": "running"
    }

@app.post("/test/run-all")
async def run_all_tests(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    if "all" in running_tests:
        raise HTTPException(status_code=409, detail="Batch test is already running")
    
    running_tests["all"] = "running"
    background_tasks.add_task(run_all_tests_background)
    
    return {
        "message": "All tests started",
        "scenarios_count": len(emulator.scenarios),
        "status": "running"
    }

@app.get("/test/status/{test_id}")
async def get_test_status(test_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞"""
    if test_id in running_tests:
        return {
            "test_id": test_id,
            "status": running_tests[test_id],
            "running": True
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = emulator.get_test_result(test_id)
    if result:
        return {
            "test_id": test_id,
            "status": "completed",
            "running": False,
            "success": result.get("success", False)
        }
    
    return {
        "test_id": test_id,
        "status": "not_found",
        "running": False
    }

@app.get("/test/result/{test_id}")
async def get_test_result(test_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    result = emulator.get_test_result(test_id)
    if not result:
        raise HTTPException(status_code=404, detail=f"Test result for {test_id} not found")
    
    return result

@app.get("/test/results")
async def get_all_results():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    return {
        "results": emulator.test_results,
        "total": len(emulator.test_results)
    }

@app.delete("/test/results")
async def clear_results():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    cleared = len(emulator.test_results)
    emulator.test_results.clear()
    return {
        "message": f"Cleared {cleared} test results"
    }

@app.get("/test/running")
async def get_running_tests():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    return {
        "running_tests": running_tests,
        "count": len(running_tests)
    }

# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def run_test_background(test_id: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        logger.info(f"Starting background test: {test_id}")
        result = await emulator.run_scenario(test_id)
        
        if result.get("success"):
            running_tests[test_id] = "completed"
            logger.info(f"‚úÖ Test {test_id} completed successfully")
        else:
            running_tests[test_id] = "failed"
            logger.error(f"‚ùå Test {test_id} failed")
            
    except Exception as e:
        running_tests[test_id] = "error"
        logger.error(f"üí• Test {test_id} crashed: {e}")
    finally:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ running —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(5)
        running_tests.pop(test_id, None)

async def run_all_tests_background():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        logger.info("Starting background batch test")
        result = await emulator.run_all_scenarios()
        
        successful = result.get("successful", 0)
        total = result.get("total_scenarios", 0)
        
        if successful == total:
            running_tests["all"] = "completed"
            logger.info(f"‚úÖ All tests completed successfully: {successful}/{total}")
        else:
            running_tests["all"] = "partial"
            logger.warning(f"‚ö†Ô∏è Tests completed with failures: {successful}/{total}")
            
    except Exception as e:
        running_tests["all"] = "error"
        logger.error(f"üí• Batch test crashed: {e}")
    finally:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ running —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(10)
        running_tests.pop("all", None)

if __name__ == "__main__":
    uvicorn.run(
        "tests.call_emulator.api_server:app",
        host="0.0.0.0",
        port=8030,
        log_level="info",
        reload=False
    )
