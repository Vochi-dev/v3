#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞
"""
import httpx
import asyncio
import json
from typing import Dict, Any

class EmulatorClient:
    def __init__(self, base_url: str = "http://localhost:8030"):
        self.base_url = base_url.rstrip('/')
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/health", timeout=5.0)
                return response.status_code == 200
        except Exception as e:
            print(f"‚ùå Health check failed: {e}")
            return False
    
    async def get_scenarios(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/scenarios", timeout=5.0)
                if response.status_code == 200:
                    return response.json()
                else:
                    print(f"‚ùå Failed to get scenarios: {response.status_code}")
                    return {}
        except Exception as e:
            print(f"‚ùå Error getting scenarios: {e}")
            return {}
    
    async def run_test(self, scenario_name: str) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/test/run/{scenario_name}", 
                    timeout=30.0
                )
                if response.status_code == 200:
                    return response.json()
                else:
                    print(f"‚ùå Failed to run test {scenario_name}: {response.status_code}")
                    print(f"Response: {response.text}")
                    return {}
        except Exception as e:
            print(f"‚ùå Error running test {scenario_name}: {e}")
            return {}
    
    async def get_test_status(self, scenario_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/test/status/{scenario_name}", 
                    timeout=5.0
                )
                if response.status_code == 200:
                    return response.json()
                else:
                    print(f"‚ùå Failed to get status for {scenario_name}: {response.status_code}")
                    return {}
        except Exception as e:
            print(f"‚ùå Error getting status for {scenario_name}: {e}")
            return {}
    
    async def get_test_result(self, scenario_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/test/result/{scenario_name}", 
                    timeout=5.0
                )
                if response.status_code == 200:
                    return response.json()
                else:
                    print(f"‚ùå Failed to get result for {scenario_name}: {response.status_code}")
                    return {}
        except Exception as e:
            print(f"‚ùå Error getting result for {scenario_name}: {e}")
            return {}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    client = EmulatorClient()
    
    print("üîç Checking emulator health...")
    if not await client.health_check():
        print("‚ùå Emulator is not healthy!")
        return
    
    print("‚úÖ Emulator is healthy!")
    
    print("\nüìã Getting available scenarios...")
    scenarios_data = await client.get_scenarios()
    if scenarios_data and 'scenarios' in scenarios_data:
        scenarios_list = scenarios_data['scenarios']
        print(f"‚úÖ Found {len(scenarios_list)} scenarios:")
        for scenario in scenarios_list:
            print(f"  - {scenario['test_id']}: {scenario['description']}")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if scenarios_list:
            first_scenario = scenarios_list[0]['test_id']
        print(f"\nüöÄ Running test: {first_scenario}")
        
        result = await client.run_test(first_scenario)
        if result:
            print("‚úÖ Test started successfully!")
            print(f"Result: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print("‚ùå Test failed to start!")
    else:
        print("‚ùå No scenarios found!")
        return


if __name__ == "__main__":
    asyncio.run(main())