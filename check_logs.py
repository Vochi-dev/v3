import asyncio
from app.services.postgres import get_pool

async def check_logs():
    pool = await get_pool()
    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'asterisk_logs'
            );
        """)
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ asterisk_logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        count = await conn.fetchval("SELECT COUNT(*) FROM asterisk_logs")
        print(f"\n–í—Å–µ–≥–æ –ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ: {count}")
        
        if count > 0:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤
            logs = await conn.fetch("""
                SELECT timestamp, unique_id, token, event_type, raw_data
                FROM asterisk_logs
                ORDER BY timestamp DESC
                LIMIT 5
            """)
            
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
            for log in logs:
                print(f"\nüìû –ó–≤–æ–Ω–æ–∫ {log['unique_id']}")
                print(f"‚è∞ –í—Ä–µ–º—è: {log['timestamp']}")
                print(f"üè¢ Token –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: {log['token']}")
                print(f"üìã –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {log['event_type']}")
                print(f"üìù –î–∞–Ω–Ω—ã–µ: {log['raw_data']}")
        else:
            print("\n‚ùå –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!")

if __name__ == "__main__":
    asyncio.run(check_logs()) 