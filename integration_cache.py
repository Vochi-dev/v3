#!/usr/bin/env python3
"""
Integration Cache Service (–ø–æ—Ä—Ç 8020)

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –º–∞—Ç—Ä–∏—Ü—ã –≤–∫–ª—é—á—ë–Ω–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ 
–∏–∑ call-—Å–µ—Ä–≤–∏—Å–æ–≤ (dial, bridge, hangup, download).

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- In-memory –∫—ç—à: enterprise_number ‚Üí {retailcrm: bool, amocrm: bool, ...}
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π refresh –∫–∞–∂–¥—ã–µ 180-300 —Å–µ–∫
- LISTEN/NOTIFY –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
- API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
- –ú–µ—Ç—Ä–∏–∫–∏ hit/miss, latency
"""

import asyncio
import asyncpg
import json
import logging
import os
import time
import random
from datetime import datetime, timedelta
from typing import Dict, Optional, Set, Any
from fastapi import FastAPI, HTTPException, Request, Body
from fastapi.responses import JSONResponse
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/integration_cache.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REFRESH_INTERVAL_BASE = 240  # 4 –º–∏–Ω—É—Ç—ã
REFRESH_JITTER_MAX = 60      # ¬±60 —Å–µ–∫ –¥–∂–∏—Ç—Ç–µ—Ä
TTL_SECONDS = 90             # TTL –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ
CACHE_CLEANUP_INTERVAL = 30  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Integration Cache Service", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pg_pool: Optional[asyncpg.Pool] = None
integration_cache: Dict[str, Dict[str, Any]] = {}
# –ù–æ–≤—ã–π –∫—ç—à –¥–ª—è –ø–æ–ª–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
full_config_cache: Dict[str, Dict[str, Any]] = {}
cache_stats = {
    "hits": 0,
    "misses": 0,
    "refreshes": 0,
    "cache_size": 0,
    "config_hits": 0,
    "config_misses": 0,
    "config_cache_size": 0,
    "last_full_refresh": None,
    "total_requests": 0
}

# Cache for customer names: key=(enterprise, phone_e164) -> {"name": str|None, "expires": epoch}
customer_name_cache: Dict[str, Dict[str, Any]] = {}
# Cache for customer profiles: key=(enterprise, phone_e164) -> {"last_name":str|None, "first_name":str|None, "middle_name":str|None, "enterprise_name":str|None, "expires": epoch}
customer_profile_cache: Dict[str, Dict[str, Any]] = {}
# Cache for responsible extensions: key=(enterprise, phone_e164) -> {"ext": str|None, "expires": epoch}
responsible_ext_cache: Dict[str, Dict[str, Any]] = {}
# Cache for incoming transforms per enterprise: enterprise -> {"map": {"sip:<line>": "+375{9}", ...}, "expires": epoch}
incoming_transform_cache: Dict[str, Dict[str, Any]] = {}

# –ù–µ–¥–∞–≤–Ω–∏–µ dial-—Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
recent_dials: Dict[str, float] = {}
RECENT_DIAL_TTL = 300  # 5 –º–∏–Ω—É—Ç

# –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è hangup —Å–æ–±—ã—Ç–∏–π –ø–æ unique_id
processed_hangups: Dict[str, float] = {}
processed_dials: Dict[str, float] = {}
HANGUP_DEDUP_TTL = 300  # 5 –º–∏–Ω—É—Ç
DIAL_DEDUP_TTL = 60     # 1 –º–∏–Ω—É—Ç–∞

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====

async def fetch_enterprise_by_token(token: str) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç enterprise_number –ø–æ —Ç–æ–∫–µ–Ω—É (name2 –∏–ª–∏ secret)."""
    logger.info(f"üîç fetch_enterprise_by_token called with token='{token}'")
    if not pg_pool:
        logger.error("‚ùå pg_pool is None")
        return None
    try:
        async with pg_pool.acquire() as conn:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–∞: name2, secret –ò–õ–ò —Å–∞–º –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            row = await conn.fetchrow(
                """
                SELECT number FROM enterprises
                WHERE name2 = $1 OR secret = $1 OR number = $1
                LIMIT 1
                """,
                str(token),
            )
            if row:
                result = row["number"]
                logger.info(f"‚úÖ Found enterprise {result} for token '{token}'")
                return result
            else:
                logger.error(f"‚ùå NO enterprise found for token '{token}'")
                return None
    except Exception as e:
        logger.error(f"‚ùå fetch_enterprise_by_token error: {e}")
        return None

async def fetch_retailcrm_config(enterprise_number: str) -> Optional[dict]:
    """–ß–∏—Ç–∞–µ—Ç integrations_config->retailcrm –¥–ª—è —é–Ω–∏—Ç–∞."""
    if not pg_pool:
        return None
    try:
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT integrations_config -> 'retailcrm' AS cfg
                FROM enterprises WHERE number = $1
                """,
                enterprise_number,
            )
            if not row or not row["cfg"]:
                return None
            cfg = row["cfg"]
            if isinstance(cfg, str):
                cfg = json.loads(cfg)
            return cfg
    except Exception as e:
        logger.error(f"‚ùå fetch_retailcrm_config error: {e}")
        return None

async def write_integration_log(
    enterprise_number: str,
    event_type: str,
    request_data: Dict[str, Any],
    response_data: Optional[Dict[str, Any]],
    status_ok: bool,
    error_message: Optional[str] = None,
    integration_type: str = "uon",
) -> None:
    """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ —Å—Ç–∞—Ä—É—é).

    –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑ retailcrm.py.
    """
    try:
        if not pg_pool:
            await init_database()
        if not pg_pool:
            return
        status_str = "success" if status_ok else "error"
        try:
            sql_new = (
                "INSERT INTO integration_logs(enterprise_number, integration_type, event_type, request_data, response_data, status, error_message) "
                "VALUES($1, $2, $3, $4::jsonb, $5::jsonb, $6, $7)"
            )
            async with pg_pool.acquire() as conn:
                await conn.execute(
                    sql_new,
                    enterprise_number,
                    integration_type,
                    event_type,
                    json.dumps(request_data),
                    json.dumps(response_data or {}),
                    status_str,
                    error_message,
                )
        except Exception as e_new:
            try:
                sql_old = (
                    "INSERT INTO integration_logs(enterprise_number, integration_type, action, payload, response, success, error) "
                    "VALUES($1, $2, $3, $4::jsonb, $5::jsonb, $6::boolean, $7)"
                )
                async with pg_pool.acquire() as conn:
                    await conn.execute(
                        sql_old,
                        enterprise_number,
                        integration_type,
                        event_type,
                        json.dumps(request_data),
                        json.dumps(response_data or {}),
                        status_ok,
                        error_message,
                    )
            except Exception as e_old:
                logger.warning(f"write_integration_log failed (new='{e_new}', old='{e_old}')")
    except Exception as e:
        logger.warning(f"write_integration_log outer failed: {e}")

def map_call_type(call_type: int) -> Optional[str]:
    if call_type == 0:
        return "in"
    if call_type == 1:
        return "out"
    return None

def normalize_phone_e164(raw: str) -> str:
    raw = str(raw or "").strip()
    if not raw:
        return ""
    if raw.startswith("+"):
        return raw
    # —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    if raw.isdigit():
        return "+" + raw
    return raw

def phone_without_plus(e164: str) -> str:
    return e164[1:] if e164.startswith("+") else e164

def determine_internal_code(raw_event: dict) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ–±–∞–≤–æ—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CallerIDNum ‚Üí Extensions ‚Üí ConnectedLineNum.
    –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤, –≥–¥–µ CallerIDNum ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω—è—â–µ–≥–æ, –∞ Extensions –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä."""
    caller = str(raw_event.get("CallerIDNum", ""))
    if caller and caller.isdigit() and 2 <= len(caller) <= 5:
        return str(caller)
    exts = raw_event.get("Extensions", []) or []
    for ext in exts:
        if ext and str(ext).isdigit() and 2 <= len(str(ext)) <= 5:
            return str(ext)
    connected = str(raw_event.get("ConnectedLineNum", ""))
    if connected and connected.isdigit() and 2 <= len(connected) <= 5:
        return str(connected)
    return None

def map_result(call_status: int) -> str:
    return "answered" if call_status == 2 else "missed"

async def post_retailcrm_call_event(base_url: str, api_key: str, client_id: str, event: dict) -> dict:
    import aiohttp
    url = f"{base_url}/api/v5/telephony/call/event?apiKey={api_key}"
    data = {
        "clientId": client_id,
        "event": json.dumps(event)
    }
    timeout = aiohttp.ClientTimeout(total=3)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        async with session.post(url, data=data) as resp:
            try:
                return await resp.json()
            except Exception:
                return {"success": False, "status": resp.status}

async def post_retailcrm_calls_upload(base_url: str, api_key: str, client_id: str, calls: list[dict]) -> dict:
    import aiohttp
    url = f"{base_url}/api/v5/telephony/calls/upload?apiKey={api_key}"
    data = {
        "clientId": client_id,
        "calls": json.dumps(calls)
    }
    timeout = aiohttp.ClientTimeout(total=3)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        async with session.post(url, data=data) as resp:
            try:
                return await resp.json()
            except Exception:
                return {"success": False, "status": resp.status}

def _is_internal(num: str) -> bool:
    try:
        return bool(num) and str(num).isdigit() and 2 <= len(str(num)) <= 5
    except Exception:
        return False

def _collect_internal_exts(raw: dict) -> list[str]:
    exts = []
    for ext in (raw.get("Extensions") or []):
        if _is_internal(ext):
            exts.append(str(ext))
    return exts

def guess_direction_and_phone(raw: dict, fallback: Optional[str]) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (event_kind, external_phone_e164).
    –ü—Ä–∞–≤–∏–ª–∞:
    - –ï—Å–ª–∏ CallType –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
    - –ò—Å—Ö–æ–¥—è—â–∏–π: CallerIDNum ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π, —Å—Ä–µ–¥–∏ Extensions –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π –∏–ª–∏ Phone –≤–Ω–µ—à–Ω–∏–π.
    - –í—Ö–æ–¥—è—â–∏–π: CallerIDNum ‚Äî –≤–Ω–µ—à–Ω–∏–π, —Å—Ä–µ–¥–∏ Extensions –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π.
    - –ü—Ä–æ—á–∏–µ —Å–ª—É—á–∞–∏: —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö/–≤–Ω–µ—à–Ω–∏—Ö.
    """
    ct = raw.get("CallType")
    if isinstance(ct, (int, str)) and str(ct).isdigit():
        kind = map_call_type(int(ct))
        if kind in {"in", "out"}:
            phone = raw.get("Phone") or raw.get("CallerIDNum") or raw.get("ConnectedLineNum") or fallback or ""
            return kind, normalize_phone_e164(phone)

    caller = str(raw.get("CallerIDNum") or "")
    phone_field = str(raw.get("Phone") or "")
    connected = str(raw.get("ConnectedLineNum") or "")
    exts = list(raw.get("Extensions") or [])

    caller_internal = _is_internal(caller)
    any_internal_ext = any(_is_internal(e) for e in exts)
    any_external_ext = any((not _is_internal(e)) and e for e in exts)
    phone_is_external = bool(phone_field and not _is_internal(phone_field))

    # –Ø–≤–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω—è—â–∏–π + –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ä–µ–¥–∏ Extensions –∏–ª–∏ –≤ Phone
    if caller_internal and (any_external_ext or phone_is_external):
        external = next((e for e in exts if e and not _is_internal(e)), None) or phone_field or connected
        return "out", normalize_phone_e164(external)

    # –Ø–≤–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π: –≤–Ω–µ—à–Ω–∏–π CallerIDNum –∏ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ Extensions
    if (not caller_internal) and any_internal_ext:
        external = caller or phone_field or connected
        return "in", normalize_phone_e164(external)

    # –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è ‚Äî –º—è–≥–∫–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    if caller_internal and not any_internal_ext:
        external = phone_field or connected
        return "out", normalize_phone_e164(external)
    if (not caller_internal) and any_internal_ext:
        external = caller or phone_field or connected
        return "in", normalize_phone_e164(external)

    # fallback: —Å—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–º
    return ("in", normalize_phone_e164(fallback or phone_field or caller or connected))

def pick_internal_code_for_hangup(raw: dict) -> Optional[str]:
    """–ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è hangup (recovery).
    –ü–æ—Ä—è–¥–æ–∫: CallerIDNum ‚Üí –ª—é–±–æ–π –∏–∑ Extensions ‚Üí ConnectedLineNum ‚Üí InternalCode.
    """
    cand = str(raw.get("CallerIDNum") or "")
    if _is_internal(cand):
        return cand
    for e in (raw.get("Extensions") or []):
        if _is_internal(str(e)):
            return str(e)
    connected = str(raw.get("ConnectedLineNum") or "")
    if _is_internal(connected):
        return connected
    ic = str(raw.get("InternalCode") or "")
    if _is_internal(ic):
        return ic
    return None

class CacheEntry:
    def __init__(self, data: Dict[str, bool]):
        self.data = data
        self.created_at = time.time()
        self.expires_at = time.time() + TTL_SECONDS
    
    def is_expired(self) -> bool:
        return time.time() > self.expires_at
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "integrations": self.data,
            "created_at": self.created_at,
            "expires_at": self.expires_at,
            "age_seconds": time.time() - self.created_at
        }

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    global pg_pool
    try:
        password = os.environ.get('DB_PASSWORD', 'r/Yskqh/ZbZuvjb2b3ahfg==')
        pg_pool = await asyncpg.create_pool(
            host='localhost',
            port=5432,
            user='postgres',
            password=password,
            database='postgres',
            min_size=2,
            max_size=10,
            timeout=5
        )
        logger.info("‚úÖ Database connection pool created")
    except Exception as e:
        logger.error(f"‚ùå Failed to connect to database: {e}")
        raise

async def load_integration_matrix() -> Dict[str, Dict[str, bool]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤–∫–ª—é—á—ë–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ –ë–î (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    full_configs = await load_full_integration_configs()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –º–∞—Ç—Ä–∏—Ü—É enabled
    matrix = {}
    for enterprise_number, configs in full_configs.items():
        enabled_integrations = {}
        for integration_type, config in configs.items():
            if isinstance(config, dict):
                enabled_integrations[integration_type] = config.get('enabled', False)
        matrix[enterprise_number] = enabled_integrations
    
    return matrix

async def load_full_integration_configs() -> Dict[str, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ü–û–õ–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ –ë–î"""
    if not pg_pool:
        return {}
    
    try:
        async with pg_pool.acquire() as conn:
            query = """
            SELECT number, integrations_config 
            FROM enterprises 
            WHERE active = true AND integrations_config IS NOT NULL
            """
            rows = await conn.fetch(query)
            
            configs = {}
            for row in rows:
                enterprise_number = row['number']
                integrations_config = row['integrations_config']
                
                logger.info(f"üìã Processing enterprise {enterprise_number}, config type: {type(integrations_config)}")
                
                # –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                full_configs = {}
                if integrations_config:
                    try:
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON
                        if isinstance(integrations_config, str):
                            integrations_config = json.loads(integrations_config)
                        
                        # integrations_config –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict
                        if isinstance(integrations_config, dict):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                            for integration_type, config in integrations_config.items():
                                if isinstance(config, dict):
                                    full_configs[integration_type] = config
                                    logger.info(f"   üìç {integration_type}: enabled={config.get('enabled', False)}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Unexpected config type for {enterprise_number}: {type(integrations_config)}")
                    except Exception as e:
                        logger.error(f"‚ùå Error parsing config for {enterprise_number}: {e}")
                
                configs[enterprise_number] = full_configs
            
        logger.info(f"üìä Loaded full integration configs for {len(configs)} enterprises")
        return configs
        
    except Exception as e:
        logger.error(f"‚ùå Error loading integration matrix: {e}")
        return {}

async def load_enterprise_full_config(enterprise_number: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ü–û–õ–ù–£–Æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à"""
    global full_config_cache
    
    if not pg_pool:
        return None
    
    try:
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1 AND active = true", 
                enterprise_number
            )
            
            if not row:
                logger.warning(f"‚ö†Ô∏è Enterprise {enterprise_number} not found or inactive")
                return None
            
            integrations_config = row['integrations_config']
            
            # –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            full_configs = {}
            if integrations_config:
                try:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON
                    if isinstance(integrations_config, str):
                        integrations_config = json.loads(integrations_config)
                    
                    # integrations_config –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict
                    if isinstance(integrations_config, dict):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        for integration_type, config in integrations_config.items():
                            if isinstance(config, dict):
                                full_configs[integration_type] = config
                                logger.info(f"   üìç {integration_type}: enabled={config.get('enabled', False)}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Unexpected config type for {enterprise_number}: {type(integrations_config)}")
                except Exception as e:
                    logger.error(f"‚ùå Error parsing config for {enterprise_number}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            full_config_cache[enterprise_number] = CacheEntry({"integrations": full_configs})
            
            logger.info(f"üîÑ Refreshed full config cache for enterprise {enterprise_number}")
            return full_configs
            
    except Exception as e:
        logger.error(f"‚ùå Error loading config for enterprise {enterprise_number}: {e}")
        return None

async def refresh_cache():
    """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    global integration_cache, full_config_cache, cache_stats
    
    start_time = time.time()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    full_configs = await load_full_integration_configs()
    
    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–ª–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    new_full_cache = {}
    for enterprise_number, configs in full_configs.items():
        new_full_cache[enterprise_number] = CacheEntry(configs)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Ç—Ä–∏—Ü—É enabled –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    matrix = {}
    for enterprise_number, configs in full_configs.items():
        enabled_integrations = {}
        for integration_type, config in configs.items():
            if isinstance(config, dict):
                enabled_integrations[integration_type] = config.get('enabled', False)
        matrix[enterprise_number] = enabled_integrations
    
    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    new_cache = {}
    for enterprise_number, integrations in matrix.items():
        new_cache[enterprise_number] = CacheEntry(integrations)
    
    integration_cache = new_cache
    full_config_cache = new_full_cache
    cache_stats["refreshes"] += 1
    cache_stats["cache_size"] = len(integration_cache)
    cache_stats["config_cache_size"] = len(full_config_cache)
    cache_stats["last_full_refresh"] = datetime.now().isoformat()
    
    elapsed = time.time() - start_time
    logger.info(f"üîÑ Cache refreshed: {len(integration_cache)} entries in {elapsed:.2f}s")

async def load_incoming_transform_map(enterprise_number: str) -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É –ø—Ä–∞–≤–∏–ª incoming_transform –¥–ª—è –≤—Å–µ—Ö SIP-–ª–∏–Ω–∏–π —é–Ω–∏—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { "sip:<line_name>": "+375{9}", ... }
    """
    if not pg_pool:
        return {}
    try:
        async with pg_pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT line_name, incoming_transform
                FROM sip_unit
                WHERE enterprise_number = $1
                  AND incoming_transform IS NOT NULL
                  AND trim(incoming_transform) <> ''
                """,
                enterprise_number,
            )
            result: Dict[str, str] = {}
            for r in rows:
                ln = str(r["line_name"]) if r and r["line_name"] is not None else None
                tr = str(r["incoming_transform"]).strip() if r and r["incoming_transform"] is not None else ""
                if ln and tr:
                    result[f"sip:{ln}"] = tr
            return result
    except Exception as e:
        logger.error(f"‚ùå load_incoming_transform_map error: {e}")
        return {}

async def get_enterprise_name2(enterprise_number: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å name2 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ RetailCRM)"""
    try:
        await init_database()
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT name2 FROM enterprises WHERE number = $1", enterprise_number)
            return row["name2"] if row else None
    except Exception as e:
        logger.error(f"get_enterprise_name2 error: {e}")
        return None

async def invalidate_enterprise_cache(enterprise_number: str):
    """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    if enterprise_number in integration_cache:
        del integration_cache[enterprise_number]
        logger.info(f"üóëÔ∏è Cache invalidated for enterprise {enterprise_number}")

async def cleanup_expired_entries():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    global integration_cache, cache_stats
    
    expired_keys = [
        key for key, entry in integration_cache.items() 
        if entry.is_expired()
    ]
    
    for key in expired_keys:
        del integration_cache[key]
    
    if expired_keys:
        cache_stats["cache_size"] = len(integration_cache)
        logger.info(f"üßπ Cleaned up {len(expired_keys)} expired cache entries")

async def listen_for_invalidations():
    """–°–ª—É—à–∞–µ—Ç NOTIFY —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞"""
    if not pg_pool:
        return
    
    try:
        async with pg_pool.acquire() as conn:
            await conn.add_listener('integration_config_changed', 
                                  lambda conn, pid, channel, payload: 
                                  asyncio.create_task(handle_invalidation_notification(payload)))
            
            logger.info("üëÇ Listening for cache invalidation notifications")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º LISTEN
            await conn.execute("LISTEN integration_config_changed")
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
            while True:
                await asyncio.sleep(10)
                
    except Exception as e:
        logger.error(f"‚ùå Error in invalidation listener: {e}")

async def handle_invalidation_notification(payload: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        data = json.loads(payload)
        enterprise_number = data.get('enterprise_number')
        if enterprise_number:
            await invalidate_enterprise_cache(enterprise_number)
    except Exception as e:
        logger.error(f"‚ùå Error handling invalidation notification: {e}")

# API Endpoints

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "cache_size": len(integration_cache),
        "database_connected": pg_pool is not None,
        "uptime_seconds": time.time() - start_time if 'start_time' in globals() else 0
    }

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
    hit_rate = cache_stats["hits"] / max(1, cache_stats["total_requests"]) * 100
    
    config_hit_rate = cache_stats["config_hits"] / max(1, cache_stats["config_hits"] + cache_stats["config_misses"]) * 100
    
    return {
        **cache_stats,
        "hit_rate_percent": round(hit_rate, 2),
        "config_hit_rate_percent": round(config_hit_rate, 2),
        "cache_entries": len(integration_cache),
        "config_cache_entries": len(full_config_cache),
        "incoming_transform_cached": len(incoming_transform_cache)
    }

@app.get("/integrations/{enterprise_number}")
async def get_integrations(enterprise_number: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    global cache_stats
    
    cache_stats["total_requests"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if enterprise_number in integration_cache:
        entry = integration_cache[enterprise_number]
        if not entry.is_expired():
            cache_stats["hits"] += 1
            return entry.to_dict()
        else:
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
            del integration_cache[enterprise_number]
    
    # Cache miss - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    cache_stats["misses"] += 1
    matrix = await load_integration_matrix()
    
    if enterprise_number in matrix:
        entry = CacheEntry(matrix[enterprise_number])
        integration_cache[enterprise_number] = entry
        cache_stats["cache_size"] = len(integration_cache)
        return entry.to_dict()
    
    # –ò–ì–ù–û–†–ò–†–£–ï–ú –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    logger.info(f"‚ö†Ô∏è Enterprise {enterprise_number} has no integrations configured - IGNORING")
    raise HTTPException(status_code=404, detail="Enterprise not found")

@app.get("/config/{enterprise_number}")
async def get_integration_config(enterprise_number: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ü–û–õ–ù–£–Æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    global cache_stats, full_config_cache
    
    cache_stats["total_requests"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–ª–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    if enterprise_number in full_config_cache:
        entry = full_config_cache[enterprise_number]
        if not entry.is_expired():
            cache_stats["config_hits"] += 1
            integrations_data = entry.to_dict()
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if "integrations" in integrations_data:
                integrations_data = integrations_data["integrations"]
            
            return {
                "enterprise_number": enterprise_number,
                "integrations": integrations_data,
                "source": "cache",
                "cached_at": datetime.fromtimestamp(entry.created_at).isoformat() if hasattr(entry, 'created_at') else None
            }
        else:
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
            del full_config_cache[enterprise_number]
    
    # Cache miss - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    cache_stats["config_misses"] += 1
    full_configs = await load_full_integration_configs()
    
    if enterprise_number in full_configs:
        configs = full_configs[enterprise_number]
        entry = CacheEntry(configs)
        full_config_cache[enterprise_number] = entry
        cache_stats["config_cache_size"] = len(full_config_cache)
        
        return {
            "enterprise_number": enterprise_number,
            "integrations": configs,
            "source": "database",
            "cached_at": datetime.fromtimestamp(entry.created_at).isoformat() if hasattr(entry, 'created_at') else None
        }
    
    # –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    raise HTTPException(
        status_code=404, 
        detail=f"No integration configurations found for enterprise {enterprise_number}"
    )

@app.get("/config/{enterprise_number}/{integration_type}")
async def get_specific_integration_config(enterprise_number: str, integration_type: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    full_config = await get_integration_config(enterprise_number)
    
    integrations = full_config.get("integrations", {})
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å integrations.integrations
    if "integrations" in integrations:
        integrations = integrations["integrations"]
    
    if integration_type not in integrations:
        raise HTTPException(
            status_code=404,
            detail=f"Integration '{integration_type}' not configured for enterprise {enterprise_number}"
        )
    
    return {
        "enterprise_number": enterprise_number,
        "integration_type": integration_type,
        "config": integrations[integration_type],
        "source": full_config.get("source", "unknown")
    }

@app.get("/incoming-transform/{enterprise_number}")
async def get_incoming_transform(enterprise_number: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø—Ä–∞–≤–∏–ª incoming_transform –¥–ª—è —é–Ω–∏—Ç–∞ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ TTL_SECONDS)."""
    now = time.time()
    entry = incoming_transform_cache.get(enterprise_number)
    if entry and entry.get("expires", 0) > now:
        return {"map": entry.get("map", {})}

    if not pg_pool:
        await init_database()
    if not pg_pool:
        return {"map": {}}

    m = await load_incoming_transform_map(enterprise_number)
    incoming_transform_cache[enterprise_number] = {"map": m, "expires": now + TTL_SECONDS}
    return {"map": m}

@app.post("/reload-incoming-transform/{enterprise_number}")
async def reload_incoming_transform(enterprise_number: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É incoming_transform –¥–ª—è —é–Ω–∏—Ç–∞."""
    if not pg_pool:
        await init_database()
    m = await load_incoming_transform_map(enterprise_number)
    incoming_transform_cache[enterprise_number] = {"map": m, "expires": time.time() + TTL_SECONDS}
    return {"size": len(m)}

@app.post("/dispatch/call-event")
async def dispatch_call_event(request: Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç dial/hangup –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
    try:
        body = await request.json()
    except Exception:
        body = {}
    token = body.get("token")
    unique_id = body.get("uniqueId")
    event_type = body.get("event_type")  # dial|hangup
    raw = body.get("raw", {}) or {}
    record_url = body.get("record_url")
    origin = body.get("origin")  # 'download' –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

    logger.info(f"üì• dispatch_call_event: token='{token}', event_type={event_type}, unique_id={unique_id}")
    
    if not token or not unique_id or event_type not in {"dial", "hangup"}:
        raise HTTPException(status_code=400, detail="invalid payload")
    
    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è dial –∏ hangup —Å–æ–±—ã—Ç–∏–π
    import time
    now = time.time()
    
    if event_type == "dial":
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ dial –∑–∞–ø–∏—Å–∏
        expired_keys = [k for k, v in processed_dials.items() if now - v > DIAL_DEDUP_TTL]
        for k in expired_keys:
            del processed_dials[k]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç dial
        if unique_id in processed_dials:
            logger.info(f"üö´ Duplicate dial event for unique_id={unique_id} - IGNORING")
            return {"status": "ignored", "reason": "duplicate"}
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º dial
        processed_dials[unique_id] = now
    
    elif event_type == "hangup":
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ hangup –∑–∞–ø–∏—Å–∏
        expired_keys = [k for k, v in processed_hangups.items() if now - v > HANGUP_DEDUP_TTL]
        for k in expired_keys:
            del processed_hangups[k]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç hangup
        if unique_id in processed_hangups:
            logger.info(f"üö´ Duplicate hangup event for unique_id={unique_id} - IGNORING")
            return {"status": "ignored", "reason": "duplicate"}
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º hangup
        processed_hangups[unique_id] = now

    enterprise_number = await fetch_enterprise_by_token(token)
    if not enterprise_number:
        logger.error(f"‚ùå Enterprise not found for token='{token}', event_type={event_type}, unique_id={unique_id}")
        raise HTTPException(status_code=404, detail="enterprise not found by token")

    logger.info(f"üè¢ Using enterprise_number='{enterprise_number}' for token='{token}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    integrations_entry = integration_cache.get(enterprise_number)
    if not integrations_entry or integrations_entry.is_expired():
        # –ø–æ–¥–≥—Ä—É–∑–∏–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
        await get_integrations(enterprise_number)
        integrations_entry = integration_cache.get(enterprise_number)
    active = integrations_entry.data if integrations_entry else {}

    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è SIP-–ª–∏–Ω–∏–π
    try:
        trunk = str(
            raw.get("TrunkId")
            or raw.get("Trunk")
            or raw.get("INCALL")
            or raw.get("Incall")
            or ""
        ).strip()
        if trunk:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∞–≤–∏–ª –¥–ª—è —é–Ω–∏—Ç–∞
            mresp = await get_incoming_transform(enterprise_number)  # reuse local endpoint logic
            tmap = (mresp or {}).get("map") or {}
            rule = tmap.get(f"sip:{trunk}") or tmap.get(f"gsm:{trunk}")
            if isinstance(rule, str) and "{" in rule and "}" in rule:
                pref = rule.split("{")[0]
                try:
                    n = int(rule.split("{")[1].split("}")[0])
                except Exception:
                    n = None
                # –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä –∏–∑ raw (–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∞–ª —Ä–∞–Ω–µ–µ)
                _, external_e164 = guess_direction_and_phone(raw, None)
                digits = ''.join([c for c in external_e164 if c.isdigit()])
                if n and len(digits) >= n:
                    normalized = f"{pref}{digits[-n:]}"
                    # –ü—Ä–∏–º–µ–Ω–∏–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ raw/Phone
                    if raw.get("Phone"):
                        raw = dict(raw)
                        raw["Phone"] = normalized
                    else:
                        raw = dict(raw)
                        raw["CallerIDNum"] = normalized
    except Exception as e:
        logger.warning(f"incoming_transform apply failed: {e}")

    # –õ–æ–≥ –ø—Ä–∏—ë–º–∞ —Å–æ–±—ã—Ç–∏—è
    logger.info(f"‚û°Ô∏è Received event: enterprise={enterprise_number} type={event_type} uniqueId={unique_id}")

    # RetailCRM ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å 8019
    if active.get("retailcrm"):
        # –û—Ç–º–µ—á–∞–µ–º dial, —á—Ç–æ–±—ã –Ω–∞ hangup –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π dial
        if event_type == "dial":
            recent_dials[unique_id] = time.time()
        try:
            import aiohttp
            # –ü–æ–ª—É—á–∞–µ–º name2 –¥–ª—è RetailCRM (—Ç–æ–∫–µ–Ω != enterprise_number)
            retailcrm_token = await get_enterprise_name2(enterprise_number)
            payload_forward = {
                "token": retailcrm_token or token,  # fallback –Ω–∞ enterprise_number –µ—Å–ª–∏ name2 –Ω–µ –Ω–∞–π–¥–µ–Ω
                "uniqueId": unique_id,
                "event_type": event_type,
                "raw": raw,
                "record_url": record_url,
            }
            timeout = aiohttp.ClientTimeout(total=3)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª hangup –∏ –Ω–µ –±—ã–ª–æ dial ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π dial
                # –ù–û: –Ω–µ –¥–µ–ª–∞–µ–º synthetic dial –¥–ª—è —Å–æ–±—ã—Ç–∏–π, –ø—Ä–∏—à–µ–¥—à–∏—Ö –∏–∑ download (recovery)
                if event_type == "hangup" and unique_id not in recent_dials and origin != "download":
                    synth = dict(payload_forward)
                    synth["event_type"] = "dial"
                    async with session.post("http://127.0.0.1:8019/internal/retailcrm/call-event", json=synth) as r1:
                        logger.info(f"‚Üí 8019 synthetic dial: status={r1.status}")
                # –î–ª—è hangup (–≤ —Ç.—á. –∏–∑ download) –ø–æ–¥—á–∏—Å—Ç–∏–º raw –¥–æ–ø. –ø–æ–ª–µ–º InternalCode, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if event_type == "hangup" and "InternalCode" not in raw:
                    ic = pick_internal_code_for_hangup(raw)
                    if ic:
                        payload_forward = dict(payload_forward)
                        payload_forward["raw"] = dict(payload_forward["raw"])  # copy
                        payload_forward["raw"]["InternalCode"] = ic

                async with session.post("http://127.0.0.1:8019/internal/retailcrm/call-event", json=payload_forward) as r2:
                    logger.info(f"‚Üí 8019 forward {event_type}: status={r2.status}")
        except Exception as e:
            logger.error(f"‚ùå Forward to 8019 failed: {e}")

    # U-ON ‚Üí –≤—Å–ø–ª—ã–≤–∞—à–∫–∞ (dial) –∏ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ (hangup)
    if active.get("uon"):
        try:
            import aiohttp
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–Ω–æ–º–µ—Ä/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
            try:
                event_kind, external_phone_e164 = guess_direction_and_phone(raw, None)
            except Exception:
                event_kind, external_phone_e164 = ("in", normalize_phone_e164(str(raw.get("Phone") or "")))
            internal_code = determine_internal_code(raw) if event_type == "dial" else pick_internal_code_for_hangup(raw)

            timeout = aiohttp.ClientTimeout(total=3)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                if event_type == "dial":
                    # –î–ª—è dial –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –∏–∑ Extensions, –∞ –Ω–µ CallerIDNum
                    preferred_ext = None
                    try:
                        for e in (raw.get("Extensions") or []):
                            if e and str(e).isdigit() and 2 <= len(str(e)) <= 5:
                                preferred_ext = str(e)
                                break
                    except Exception:
                        preferred_ext = None
                    final_ext = preferred_ext or internal_code or ""
                    # –∞–Ω—Ç–∏–¥—É–±–ª—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ 8020: –ø–æ–º–µ—Ç–∏–º —ç—Ç–æ—Ç dial, —á—Ç–æ–±—ã hangup –Ω–µ —Å–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    recent_dials[unique_id] = time.time()
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –∏–∑ raw.Extensions (—Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–¥—ã)
                    ext_candidates: list[str] = []
                    try:
                        for e in (raw.get("Extensions") or []):
                            es = str(e)
                            if es.isdigit() and 2 <= len(es) <= 5 and es not in ext_candidates:
                                ext_candidates.append(es)
                    except Exception:
                        pass
                    if final_ext and final_ext not in ext_candidates:
                        ext_candidates.insert(0, final_ext)
                    payload = {
                        "enterprise_number": enterprise_number,
                        "phone": external_phone_e164,
                        "extension": final_ext,
                        "extensions_all": ext_candidates,
                        "direction": event_kind,  # –î–æ–±–∞–≤–ª—è–µ–º direction!
                    }
                    try:
                        async with session.post("http://127.0.0.1:8022/internal/uon/notify-incoming", json=payload) as r:
                            ok = (r.status == 200)
                            try:
                                data = await r.json()
                            except Exception:
                                data = {"status": r.status}
                            await write_integration_log(
                                enterprise_number=enterprise_number,
                                event_type=f"call_event:{event_type}",
                                request_data={"uniqueId": unique_id, "payload": payload},
                                response_data=data,
                                status_ok=ok,
                                error_message=None if ok else f"http={r.status}",
                                integration_type="uon",
                            )
                    except Exception as er:
                        await write_integration_log(
                            enterprise_number=enterprise_number,
                            event_type=f"call_event:{event_type}",
                            request_data={"uniqueId": unique_id, "payload": payload},
                            response_data=None,
                            status_ok=False,
                            error_message=str(er),
                            integration_type="uon",
                        )
                elif event_type == "hangup":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ RetailCRM –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    from datetime import datetime
                    start_time = raw.get("StartTime") or datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    end_time = raw.get("EndTime") or start_time
                    duration = 0
                    try:
                        dt_s = datetime.fromisoformat(start_time.replace("Z", ""))
                        dt_e = datetime.fromisoformat(end_time.replace("Z", ""))
                        duration = max(0, int((dt_e - dt_s).total_seconds()))
                    except Exception:
                        duration = 0
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ CallStatus
                    call_status = int(raw.get("CallStatus", 0))
                    status_text = "–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π" if call_status == 2 else "–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π"
                    start_ts = str(
                        raw.get("StartTime")
                        or raw.get("start")
                        or datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    )
                    direction = "in" if event_kind == "in" else "out"
                    payload = {
                        "enterprise_number": enterprise_number,
                        "phone": external_phone_e164,
                        "extension": internal_code or "",
                        "start": start_ts,
                        "duration": duration,
                        "direction": direction,
                        "call_status": status_text
                    }
                    if record_url:
                        payload["record_url"] = record_url
                    logger.info(f"üîó Sending to UON log-call: {payload}")
                    try:
                        async with session.post("http://127.0.0.1:8022/internal/uon/log-call", json=payload) as r:
                            ok = (r.status == 200)
                            try:
                                data = await r.json()
                            except Exception:
                                data = {"status": r.status}
                            await write_integration_log(
                                enterprise_number=enterprise_number,
                                event_type="call_history",
                                request_data={"uniqueId": unique_id, "payload": payload},
                                response_data=data,
                                status_ok=ok,
                                error_message=None if ok else f"http={r.status}",
                                integration_type="uon",
                            )
                    except Exception as er:
                        await write_integration_log(
                            enterprise_number=enterprise_number,
                            event_type="call_history",
                            request_data={"uniqueId": unique_id, "payload": payload},
                            response_data=None,
                            status_ok=False,
                            error_message=str(er),
                            integration_type="uon",
                        )
        except Exception as e:
            logger.error(f"‚ùå U-ON forward failed: {e}")

    # –ú–æ–π–°–∫–ª–∞–¥ ‚Üí –ø–æ–ø–∞–ø –ø—Ä–∏ dial (—Ç–æ–ª—å–∫–æ live —Å–æ–±—ã—Ç–∏—è, –Ω–µ recovery)
    if active.get("ms") and event_type == "dial" and origin != "download":
        try:
            import aiohttp
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–Ω–æ–º–µ—Ä/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
            try:
                event_kind, external_phone_e164 = guess_direction_and_phone(raw, None)
            except Exception:
                event_kind, external_phone_e164 = ("in", normalize_phone_e164(str(raw.get("Phone") or "")))
            internal_code = determine_internal_code(raw)

            timeout = aiohttp.ClientTimeout(total=3)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ú–æ–π–°–∫–ª–∞–¥ webhook
                payload = {
                    "enterprise_number": enterprise_number,
                    "phone": external_phone_e164,
                    "extension": internal_code or "",
                    "direction": event_kind,
                    "event_type": "dial",
                    "unique_id": unique_id,
                    "raw": raw
                }
                logger.info(f"üîó Sending dial event to –ú–æ–π–°–∫–ª–∞–¥: {payload}")
                try:
                    async with session.post("http://127.0.0.1:8023/internal/ms/incoming-call", json=payload) as r:
                        ok = (r.status == 200)
                        try:
                            data = await r.json()
                        except Exception:
                            data = {"status": r.status}
                        await write_integration_log(
                            enterprise_number=enterprise_number,
                            event_type="incoming_call",
                            request_data={"uniqueId": unique_id, "payload": payload},
                            response_data=data,
                            status_ok=ok,
                            error_message=None if ok else f"http={r.status}",
                            integration_type="ms",
                        )
                        if ok:
                            logger.info(f"‚úÖ –ú–æ–π–°–∫–ª–∞–¥ dial notification sent successfully")
                        else:
                            logger.error(f"‚ùå –ú–æ–π–°–∫–ª–∞–¥ dial notification failed with status {r.status}")
                except Exception as er:
                    await write_integration_log(
                        enterprise_number=enterprise_number,
                        event_type="incoming_call",
                        request_data={"uniqueId": unique_id, "payload": payload},
                        response_data=None,
                        status_ok=False,
                        error_message=str(er),
                        integration_type="ms",
                    )
                    logger.error(f"‚ùå –ú–æ–π–°–∫–ª–∞–¥ dial notification exception: {er}")
        except Exception as e:
            logger.error(f"‚ùå –ú–æ–π–°–∫–ª–∞–¥ forward failed: {e}")
    
    # –ú–æ–π–°–∫–ª–∞–¥ ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞ hangup —Å–æ–±—ã—Ç–∏–π
    if active.get("ms") and event_type == "hangup":
        try:
            import aiohttp
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–Ω–æ–º–µ—Ä/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
            try:
                event_kind, external_phone_e164 = guess_direction_and_phone(raw, None)
            except Exception:
                event_kind, external_phone_e164 = ("in", normalize_phone_e164(str(raw.get("Phone") or "")))
            internal_code = determine_internal_code(raw)

            timeout = aiohttp.ClientTimeout(total=3)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # –í—ã–±–∏—Ä–∞–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                if origin == "download":
                    # Recovery —Å–æ–±—ã—Ç–∏–µ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –±–µ–∑ –ø–æ–ø–∞–ø–æ–≤
                    endpoint = "http://127.0.0.1:8023/internal/ms/recovery-call"
                    logger.info(f"üîÑ Sending recovery hangup event to –ú–æ–π–°–∫–ª–∞–¥")
                else:
                    # Live —Å–æ–±—ã—Ç–∏–µ - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–ø–∞–ø–∞–º–∏
                    endpoint = "http://127.0.0.1:8023/internal/ms/hangup-call"
                    logger.info(f"üîó Sending live hangup event to –ú–æ–π–°–∫–ª–∞–¥")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ hangup –≤ –ú–æ–π–°–∫–ª–∞–¥
                payload = {
                    "enterprise_number": enterprise_number,
                    "phone": external_phone_e164,
                    "extension": internal_code or "",
                    "direction": event_kind,
                    "event_type": "hangup",
                    "unique_id": unique_id,
                    "record_url": record_url,
                    "raw": raw,
                    "origin": origin  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ recovery/download
                }
                
                try:
                    async with session.post(endpoint, json=payload) as r:
                        ok = (r.status == 200)
                        try:
                            data = await r.json()
                        except Exception:
                            data = {}
                        logger.info(f"üîó –ú–æ–π–°–∫–ª–∞–¥ hangup response: {r.status} - {data}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        event_type_log = "recovery_call" if origin == "download" else "hangup_call"
                        await write_integration_log(
                            enterprise_number=enterprise_number,
                            event_type=event_type_log,
                            request_data={"uniqueId": unique_id, "payload": payload},
                            response_data=data,
                            status_ok=ok,
                            error_message=None if ok else f"http={r.status}",
                            integration_type="ms",
                        )
                except Exception as inner_e:
                    logger.error(f"‚ùå –ú–æ–π–°–∫–ª–∞–¥ hangup HTTP error: {inner_e}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    event_type_log = "recovery_call" if origin == "download" else "hangup_call"
                    await write_integration_log(
                        enterprise_number=enterprise_number,
                        event_type=event_type_log,
                        request_data={"uniqueId": unique_id, "payload": payload},
                        response_data=None,
                        status_ok=False,
                        error_message=str(inner_e),
                        integration_type="ms",
                    )
        except Exception as e:
            logger.error(f"‚ùå –ú–æ–π–°–∫–ª–∞–¥ hangup forward failed: {e}")

    return {"success": True}

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤—ã–∑–æ–≤–∞–º–∏ —Å–æ —Å–ª—ç—à–µ–º –Ω–∞ –∫–æ–Ω—Ü–µ
@app.post("/dispatch/call-event/")
async def dispatch_call_event_slash(request: Request):
    return await dispatch_call_event(request)

@app.post("/cache/invalidate/{enterprise_number}")
async def invalidate_cache(enterprise_number: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    await invalidate_enterprise_cache(enterprise_number)
    return {"message": f"Cache invalidated for enterprise {enterprise_number}"}

@app.put("/config/{enterprise_number}/{integration_type}")
async def update_integration_config(enterprise_number: str, integration_type: str, config_data: dict = Body(...)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –∫—ç—à–µ"""
    global full_config_cache
    
    try:
        logger.info(f"üìù Updating {integration_type} config for enterprise {enterprise_number}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        await invalidate_enterprise_cache(enterprise_number)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
        if not pg_pool:
            raise HTTPException(status_code=500, detail="Database not available")
            
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if not row:
                raise HTTPException(status_code=404, detail="Enterprise not found")
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            current_config = row['integrations_config'] or {}
            if isinstance(current_config, str):
                current_config = json.loads(current_config)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            current_config[integration_type] = config_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î
            await conn.execute(
                "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
                json.dumps(current_config), enterprise_number
            )
            
            logger.info(f"‚úÖ {integration_type} config saved to DB for enterprise {enterprise_number}")
        
        # –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        await load_enterprise_full_config(enterprise_number)
        
        logger.info(f"üîÑ Cache refreshed for enterprise {enterprise_number}")
        
        return {
            "status": "success", 
            "message": f"{integration_type} configuration updated",
            "enterprise_number": enterprise_number
        }
        
    except Exception as e:
        logger.error(f"üí• Error updating {integration_type} config for {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"Configuration update failed: {str(e)}")

@app.post("/cache/refresh")
async def force_refresh():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—ç—à–∞"""
    await refresh_cache()
    return {"message": "Cache refreshed successfully"}

@app.get("/cache/entries")
async def get_cache_entries():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    return {
        enterprise: entry.to_dict() 
        for enterprise, entry in integration_cache.items()
    }


@app.post("/notify/incoming")
async def notify_incoming(payload: dict = Body(...)):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ö–æ–¥: { enterprise_number, phone, extension } ‚Üí –≤—ã–∑–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—à–∫—É –≤ primary-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—Å–µ–π—á–∞—Å U‚ÄëON)."""
    try:
        enterprise_number = str(payload.get("enterprise_number") or "").strip()
        phone = str(payload.get("phone") or "").strip()
        extension = str(payload.get("extension") or "").strip()

        if not enterprise_number:
            raise HTTPException(status_code=400, detail="enterprise_number required")

        if not pg_pool:
            await init_database()
        async with pg_pool.acquire() as conn:
            primary = await _get_enterprise_smart_primary(conn, enterprise_number)

        if primary == "uon":
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ 8022
            try:
                async with httpx.AsyncClient(timeout=3.0) as client:
                    forward_payload = {
                        "enterprise_number": enterprise_number,
                        "phone": phone,
                        "extension": extension,
                    }
                    try:
                        if isinstance(payload.get("extensions_all"), list):
                            forward_payload["extensions_all"] = [str(x) for x in payload["extensions_all"]]
                    except Exception:
                        pass
                    r = await client.post("http://127.0.0.1:8022/internal/uon/notify-incoming", json=forward_payload)
                    ok = (r.status_code == 200 and (r.json() or {}).get("success"))
                    return {"success": ok, "provider": "uon", "status": r.status_code}
            except Exception as e:
                logger.error(f"forward to uon failed: {e}")
                return {"success": False, "provider": "uon", "error": str(e)}

        return {"success": False, "provider": primary, "error": "provider_not_implemented"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"notify_incoming error: {e}")
        return {"success": False, "error": str(e)}


async def _get_enterprise_smart_primary(conn: asyncpg.Connection, enterprise_number: str) -> str:
    """Returns primary integration code for Smart (default: 'retailcrm')."""
    try:
        row = await conn.fetchrow("SELECT integrations_config FROM enterprises WHERE number = $1", enterprise_number)
        cfg = dict(row).get("integrations_config") if row else None
        if isinstance(cfg, str):
            try:
                cfg = json.loads(cfg)
            except Exception:
                cfg = None
        if isinstance(cfg, dict):
            smart = cfg.get("smart") or {}
            primary = smart.get("primary") or "retailcrm"
            return str(primary)
    except Exception as e:
        logger.error(f"_get_enterprise_smart_primary error: {e}")
    return "retailcrm"


@app.get("/customer-name/{enterprise_number}/{phone}")
async def get_customer_name(enterprise_number: str, phone: str):
    """Return customer display name via primary integration (always fresh)."""
    global pg_pool
    # Normalize phone to E164
    phone_e164 = normalize_phone_e164(phone)

    if not pg_pool:
        await init_database()
    if not pg_pool:
        return {"name": None}

    try:
        async with pg_pool.acquire() as conn:
            primary = await _get_enterprise_smart_primary(conn, enterprise_number)
            name: Optional[str] = None

            extra_source: dict = {}
            if primary == "retailcrm":
                # Query local retailcrm service for fresh profile data (not cached)
                url = "http://127.0.0.1:8019/internal/retailcrm/customer-profile"
                try:
                    async with httpx.AsyncClient(timeout=2.5) as client:
                        resp = await client.get(url, params={"phone": phone_e164})
                        if resp.status_code == 200:
                            data = resp.json() or {}
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                            fn = (data.get("first_name") or "").strip()
                            ln = (data.get("last_name") or "").strip()
                            mn = (data.get("middle_name") or "").strip()
                            en = (data.get("enterprise_name") or "").strip()
                            
                            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: enterprise_name (–¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö), –∑–∞—Ç–µ–º –§–ò–û
                            if en:
                                name = en
                            elif fn or ln:
                                name_parts = [ln, fn, mn]
                                name = " ".join([p for p in name_parts if p])
                except Exception as e:
                    logger.warning(f"retailcrm name lookup failed: {e}")
            elif primary == "ms":
                # Query local moysklad service for customer name
                url = "http://127.0.0.1:8023/internal/ms/customer-name"
                try:
                    async with httpx.AsyncClient(timeout=2.5) as client:
                        resp = await client.get(url, params={"phone": phone_e164, "enterprise_number": enterprise_number})
                        if resp.status_code == 200:
                            data = resp.json() or {}
                            n = data.get("name")
                            if isinstance(n, str) and n.strip():
                                name = n.strip()
                except Exception as e:
                    logger.warning(f"moysklad name lookup failed: {e}")
            elif primary == "uon":
                # Query local uon service for customer profile
                url = "http://127.0.0.1:8022/internal/uon/customer-by-phone"
                try:
                    async with httpx.AsyncClient(timeout=2.5) as client:
                        resp = await client.get(url, params={"phone": phone_e164, "enterprise_number": enterprise_number})
                        if resp.status_code == 200:
                            data = resp.json() or {}
                            profile = data.get("profile") or {}
                            n = profile.get("display_name")
                            if isinstance(n, str) and n.strip():
                                name = n.strip()
                except Exception as e:
                    logger.warning(f"uon name lookup failed: {e}")
            else:
                # Other integrations can be added here
                name = None

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ–∂–µ–µ –∏–º—è –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            return {"name": name}
    except Exception as e:
        logger.error(f"get_customer_name error: {e}")
        return {"name": None}


@app.get("/customer-profile/{enterprise_number}/{phone}")
async def get_customer_profile(enterprise_number: str, phone: str):
    """Return customer profile via primary integration (cached).
    Profile fields: last_name, first_name, middle_name, enterprise_name.
    """
    global pg_pool
    phone_e164 = normalize_phone_e164(phone)
    cache_key = f"{enterprise_number}|{phone_e164}"
    now = time.time()
    entry = customer_profile_cache.get(cache_key)
    if entry and entry.get("expires", 0) > now:
        return {
            "last_name": entry.get("last_name"),
            "first_name": entry.get("first_name"),
            "middle_name": entry.get("middle_name"),
            "enterprise_name": entry.get("enterprise_name"),
        }

    if not pg_pool:
        await init_database()
    if not pg_pool:
        return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}

    try:
        async with pg_pool.acquire() as conn:
            primary = await _get_enterprise_smart_primary(conn, enterprise_number)
            prof = {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}
            extra_source = None
            if primary == "retailcrm":
                url = "http://127.0.0.1:8019/internal/retailcrm/customer-profile"
                try:
                    async with httpx.AsyncClient(timeout=2.5) as client:
                        resp = await client.get(url, params={"phone": phone_e164})
                        if resp.status_code == 200:
                            data = resp.json() or {}
                            for k in ("last_name", "first_name", "middle_name", "enterprise_name"):
                                v = data.get(k)
                                if isinstance(v, str):
                                    prof[k] = v.strip() or None
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ RetailCRM –¥–ª—è merge_customer_identity
                            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ –æ–±—ã—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                            url_customer = "http://127.0.0.1:8019/test/search-customer"
                            try:
                                customer_resp = await client.get(url_customer, params={"phone": phone_e164})
                                if customer_resp.status_code == 200:
                                    customer_data = customer_resp.json() or {}
                                    if customer_data.get("success") and customer_data.get("data"):
                                        data_obj = customer_data.get("data", {})
                                        if data_obj.get("customers"):
                                            customers = data_obj.get("customers", [])
                                            if customers:
                                                extra_source = {"raw": customers[0], "type": "retailcrm"}
                            except Exception:
                                pass
                            
                            # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç): –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ–≥–¥–∞ –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ï–ù–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                            url_company = "http://127.0.0.1:8019/internal/retailcrm/company-by-phone/" + phone_e164
                            try:
                                company_resp = await client.get(url_company)
                                if company_resp.status_code == 200:
                                    payload = company_resp.json() or {}
                                    logger.info(f"[get_customer_profile] Company response: {payload}")
                                    if payload.get("success"):
                                        results = (payload.get("data") or {}).get("results") or []
                                        logger.info(f"[get_customer_profile] Results: {results}")
                                        if results:
                                            result = results[0]
                                            company = result.get("company", {})
                                            contacts_list = result.get("contacts") or []
                                            company_id = company.get("id")
                                            company_name = company.get("name")
                                        # –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, —á–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å–∫–æ–º—ã–º
                                        chosen_contact = None
                                        for c in contacts_list:
                                            for ph in (c.get("phones") or []):
                                                if ph == phone_e164:
                                                    chosen_contact = c
                                                    break
                                            if chosen_contact:
                                                break
                                        if not chosen_contact and contacts_list:
                                            # fallback: –æ—Å–Ω–æ–≤–Ω–æ–π, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—ã–π
                                            chosen_contact = next((c for c in contacts_list if c.get("isMain")), contacts_list[0])

                                        # –°–æ–±–∏—Ä–∞–µ–º corp_profile —Å –ø–æ–ª–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                                        corp_profile = {
                                            "company_info": {"id": company_id, "name": company_name},
                                            "contacts": contacts_list,
                                        }
                                        if chosen_contact:
                                            corp_profile.update({
                                                "firstName": chosen_contact.get("firstName"),
                                                "lastName": chosen_contact.get("lastName"),
                                                "patronymic": chosen_contact.get("patronymic"),
                                                "phones": [{"number": p} for p in (chosen_contact.get("phones") or [])],
                                            })

                                        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º extra_source –Ω–∞ corporate
                                        extra_source = {"raw": corp_profile, "type": "retailcrm_corporate"}
                                        logger.info(f"[get_customer_profile] Corporate found - company: {company_name}, chosen_contact: {chosen_contact}")
                                        prof["first_name"] = (chosen_contact or {}).get("firstName") or prof.get("first_name")
                                        prof["last_name"] = (chosen_contact or {}).get("lastName") or prof.get("last_name")
                                        prof["middle_name"] = (chosen_contact or {}).get("patronymic") or prof.get("middle_name")
                                        prof["enterprise_name"] = company_name or prof.get("enterprise_name")
                            except Exception as e:
                                logger.warning(f"Company search failed: {e}")
                except Exception as e:
                    logger.warning(f"customer-profile retailcrm lookup failed: {e}")
            elif primary == "uon":
                url = "http://127.0.0.1:8022/internal/uon/customer-by-phone"
                try:
                    async with httpx.AsyncClient(timeout=2.5) as client:
                        resp = await client.get(url, params={"phone": phone_e164, "enterprise_number": enterprise_number})
                        if resp.status_code == 200:
                            data = resp.json() or {}
                            profile = data.get("profile") or {}
                            raw_data = data.get("source", {}).get("raw") if "source" in data else None
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ U-ON —Ñ–æ—Ä–º–∞—Ç–∞
                            display_name = profile.get("display_name", "")
                            if display_name:
                                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å display_name –Ω–∞ —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ —ç—Ç–æ "–§–∞–º–∏–ª–∏—è –ò–º—è")
                                parts = display_name.split()
                                if len(parts) >= 1:
                                    prof["last_name"] = parts[0]   # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —Ñ–∞–º–∏–ª–∏—è
                                if len(parts) >= 2:
                                    prof["first_name"] = parts[1]  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - –∏–º—è
                            
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç U-ON, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            if isinstance(raw_data, dict):
                                for uon_key, our_key in [
                                    ("last_name", "last_name"), ("lastName", "last_name"), ("lname", "last_name"), ("u_surname", "last_name"),
                                    ("first_name", "first_name"), ("firstName", "first_name"), ("fname", "first_name"), ("u_name", "first_name"),
                                    ("middle_name", "middle_name"), ("patronymic", "middle_name"), ("mname", "middle_name"), ("u_sname", "middle_name"),
                                    ("company", "enterprise_name"), ("enterprise_name", "enterprise_name"), ("organization", "enterprise_name")
                                ]:
                                    v = raw_data.get(uon_key)
                                    if isinstance(v, str) and v.strip():
                                        prof[our_key] = v.strip()
                                extra_source = {"raw": raw_data}
                except Exception as e:
                    logger.warning(f"customer-profile uon lookup failed: {e}")
            elif primary == "ms":
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ú–æ–π–°–∫–ª–∞–¥
                logger.info(f"[get_customer_profile] –ú–æ–π–°–∫–ª–∞–¥ lookup for {phone_e164}")
                url = "http://127.0.0.1:8023/internal/ms/customer-debug"
                try:
                    async with httpx.AsyncClient(timeout=2.5) as client:
                        resp = await client.get(url, params={"phone": phone_e164, "enterprise_number": enterprise_number})
                        if resp.status_code == 200:
                            data = resp.json() or {}
                            
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
                            counterparty = data.get("counterparty", {})
                            if counterparty:
                                counterparty_name = counterparty.get("name", "").strip()
                                
                                # –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ ms.py)
                                if counterparty_name:
                                    # –î–ª—è –ú–æ–π–°–∫–ª–∞–¥ —É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –§–ò–û, —Ç–æ–ª—å–∫–æ name
                                    prof["last_name"] = counterparty_name
                                    prof["enterprise_name"] = counterparty_name
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è merge_customer_identity
                                ms_raw = {
                                    "id": counterparty.get("id"),
                                    "name": counterparty_name,
                                    "phone": phone_e164,
                                    "contact_persons": []
                                }
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞
                                contact_persons = data.get("contact_persons", [])
                                for contact in contact_persons:
                                    contact_name = contact.get("name", "").strip()
                                    contact_phone = contact.get("phone", "").strip()
                                    if contact_name and contact_phone:
                                        ms_raw["contact_persons"].append({
                                            "id": contact.get("id"),
                                            "name": contact_name,
                                            "phone": contact_phone
                                        })
                                
                                extra_source = {"raw": ms_raw, "type": "moysklad"}
                                logger.info(f"[get_customer_profile] –ú–æ–π–°–∫–ª–∞–¥ profile enriched: last_name={prof.get('last_name')}, enterprise_name={prof.get('enterprise_name')}, source_created={bool(extra_source)}")
                                
                except Exception as e:
                    logger.warning(f"customer-profile moysklad lookup failed: {e}")
            else:
                pass

            # –ù–ï –∫—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å source, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not extra_source:
                customer_profile_cache[cache_key] = {**prof, "expires": now + TTL_SECONDS}
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –¥–æ–±–∞–≤–ª—è—è source (–±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è source)
            logger.info(f"[get_customer_profile] Returning profile: prof={prof.keys()}, extra_source={bool(extra_source)}")
            if extra_source:
                logger.info(f"[get_customer_profile] Returning with extra_source: type={extra_source.get('type')}")
                return {**prof, "source": extra_source}
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ source –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π source —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º raw
            if any(prof.get(k) for k in ("last_name", "first_name", "enterprise_name")):
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π raw –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å enrich_customer
                minimal_raw = {
                    "id": "unknown",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è external_id
                    "lastName": prof.get("last_name"),
                    "firstName": prof.get("first_name"),
                    "patronymic": prof.get("middle_name"),
                    "phones": [{"number": phone_e164}]
                }
                if prof.get("enterprise_name"):
                    minimal_raw["company"] = {"name": prof.get("enterprise_name")}
                    # –ï—Å–ª–∏ –µ—Å—Ç—å enterprise_name, —ç—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                    source_type = f"{primary}_corporate" if primary else "unknown_corporate"
                else:
                    source_type = primary if primary else "unknown"
                default_source = {"raw": minimal_raw, "type": source_type}
                return {**prof, "source": default_source}
            return prof
    except Exception as e:
        logger.error(f"get_customer_profile error: {e}")
        return {"last_name": None, "first_name": None, "middle_name": None, "enterprise_name": None}

@app.get("/responsible-extension/{enterprise_number}/{phone}")
async def get_responsible_extension(enterprise_number: str, phone: str, nocache: Optional[bool] = False):
    """Return responsible manager extension via primary integration (cached)."""
    global pg_pool
    phone_e164 = normalize_phone_e164(phone)
    cache_key = f"{enterprise_number}|{phone_e164}"

    now = time.time()
    if not nocache:
        entry = responsible_ext_cache.get(cache_key)
        if entry and entry.get("expires", 0) > now:
            return {"extension": entry.get("ext")}

    if not pg_pool:
        await init_database()
    if not pg_pool:
        return {"extension": None}

    try:
        async with pg_pool.acquire() as conn:
            primary = await _get_enterprise_smart_primary(conn, enterprise_number)
            ext: Optional[str] = None
            mapped_ext: Optional[str] = None
            manager_id_from_api: Optional[int] = None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—á–Ω—É—é –∫–∞—Ä—Ç—É user_extensions –∏–∑ enterprises.integrations_config
            try:
                row_cfg = await conn.fetchrow("SELECT integrations_config FROM enterprises WHERE number = $1", enterprise_number)
                cfg = dict(row_cfg).get("integrations_config") if row_cfg else None
                if isinstance(cfg, str):
                    try:
                        cfg = json.loads(cfg)
                    except Exception:
                        cfg = None
                if isinstance(cfg, dict):
                    if primary == "retailcrm":
                        retail = cfg.get("retailcrm") or {}
                        user_ext_map = retail.get("user_extensions") or {}
                    elif primary == "ms":
                        ms = cfg.get("ms") or {}
                        raw_mapping = ms.get("employee_mapping") or {}
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ú–æ–π–°–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç –≤ –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        user_ext_map = {}
                        for ext, emp_data in raw_mapping.items():
                            if isinstance(emp_data, dict):
                                emp_id = emp_data.get("employee_id")
                                if emp_id:
                                    user_ext_map[emp_id] = ext
                            elif isinstance(emp_data, str):
                                user_ext_map[emp_data] = ext
                    elif primary == "uon":
                        uon = cfg.get("uon") or {}
                        user_ext_map = uon.get("user_extensions") or {}
                    else:
                        user_ext_map = {}
                else:
                    user_ext_map = {}
            except Exception as e:
                logger.warning(f"read user_extensions failed: {e}")
                user_ext_map = {}

            if primary == "retailcrm":
                # Ask local retailcrm service for responsible manager (stable internal endpoint)
                url = f"http://127.0.0.1:8019/internal/retailcrm/responsible-extension"
                try:
                    async with httpx.AsyncClient(timeout=2.0) as client:
                        for attempt in range(2):
                            try:
                                resp = await client.get(url, params={"phone": phone_e164, "enterprise_number": enterprise_number})
                                if resp.status_code == 200:
                                    data = resp.json() or {}
                                    code = data.get("extension") if isinstance(data, dict) else None
                                    mid = data.get("manager_id") if isinstance(data, dict) else None
                                    if isinstance(code, str) and code.isdigit():
                                        ext = code
                                    # –ú–æ–π–°–∫–ª–∞–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç employee_id, –∏—â–µ–º –µ–≥–æ –≤ user_ext_map
                                    if isinstance(mid, str) and mid.strip():
                                        # user_ext_map —Ç–µ–ø–µ—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ employee_id -> extension
                                        mapped_extension = user_ext_map.get(mid)
                                        if mapped_extension and mapped_extension.isdigit():
                                            mapped_ext = mapped_extension
                                    logger.info(f"responsible-extension moysklad ok ext={ext} mapped={mapped_ext} employee_id={mid} phone={phone_e164}")
                                    break
                                else:
                                    logger.warning(f"responsible-extension moysklad http={resp.status_code} attempt={attempt+1}")
                            except Exception as er:
                                logger.warning(f"responsible-extension moysklad error attempt={attempt+1}: {er}")
                                await asyncio.sleep(0.05)
                except Exception as e:
                    logger.warning(f"responsible-extension retailcrm client setup failed: {e}")
            elif primary == "ms":
                # Ask local moysklad service for responsible manager
                url = f"http://127.0.0.1:8023/internal/ms/responsible-extension"
                try:
                    async with httpx.AsyncClient(timeout=2.0) as client:
                        for attempt in range(2):
                            try:
                                resp = await client.get(url, params={"phone": phone_e164, "enterprise_number": enterprise_number})
                                if resp.status_code == 200:
                                    data = resp.json() or {}
                                    code = data.get("extension") if isinstance(data, dict) else None
                                    mid = data.get("manager_id") if isinstance(data, dict) else None
                                    if isinstance(code, str) and code.isdigit():
                                        ext = code
                                    # –ú–æ–π–°–∫–ª–∞–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç employee_id, –∏—â–µ–º –µ–≥–æ –≤ user_ext_map
                                    if isinstance(mid, str) and mid.strip():
                                        # user_ext_map —Ç–µ–ø–µ—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ employee_id -> extension
                                        mapped_extension = user_ext_map.get(mid)
                                        if mapped_extension and mapped_extension.isdigit():
                                            mapped_ext = mapped_extension
                                    logger.info(f"responsible-extension moysklad ok ext={ext} mapped={mapped_ext} employee_id={mid} phone={phone_e164}")
                                    break
                                else:
                                    logger.warning(f"responsible-extension moysklad http={resp.status_code} attempt={attempt+1}")
                            except Exception as er:
                                logger.warning(f"responsible-extension moysklad error attempt={attempt+1}: {er}")
                                await asyncio.sleep(0.05)
                except Exception as e:
                    logger.warning(f"responsible-extension moysklad client setup failed: {e}")
            elif primary == "uon":
                url = f"http://127.0.0.1:8022/internal/uon/responsible-extension"
                try:
                    async with httpx.AsyncClient(timeout=2.0) as client:
                        for attempt in range(2):
                            try:
                                resp = await client.get(url, params={"phone": phone_e164})
                                if resp.status_code == 200:
                                    data = resp.json() or {}
                                    code = data.get("extension") if isinstance(data, dict) else None
                                    mid = data.get("manager_id") if isinstance(data, dict) else None
                                    if isinstance(code, str) and code.isdigit():
                                        ext = code
                                    try:
                                        manager_id_from_api = int(mid) if str(mid).isdigit() else None
                                    except Exception:
                                        manager_id_from_api = None
                                    if manager_id_from_api is not None:
                                        mapped = user_ext_map.get(str(manager_id_from_api))
                                        if isinstance(mapped, str) and mapped.isdigit():
                                            mapped_ext = mapped
                                    logger.info(f"responsible-extension uon ok ext={ext} mapped={mapped_ext} manager_id={manager_id_from_api} phone={phone_e164}")
                                    break
                                else:
                                    logger.warning(f"responsible-extension uon http={resp.status_code} attempt={attempt+1}")
                            except Exception as er:
                                logger.warning(f"responsible-extension uon error attempt={attempt+1}: {er}")
                                await asyncio.sleep(0.05)
                except Exception as e:
                    logger.warning(f"responsible-extension uon client setup failed: {e}")
            else:
                ext = None

            # –í—ã–±–æ—Ä –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç mapped_ext, –∑–∞—Ç–µ–º ext –∏–∑ API
            final_ext = mapped_ext or ext
            responsible_ext_cache[cache_key] = {"ext": final_ext, "expires": now + TTL_SECONDS}
            return {"extension": final_ext}
    except Exception as e:
        logger.error(f"get_responsible_extension error: {e}")
        return {"extension": None}

@app.post("/enrich-customer/{enterprise_number}/{phone_e164}")
async def enrich_customer(enterprise_number: str, phone_e164: str):
    """
    üîÑ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô ENDPOINT –î–õ–Ø –û–ë–û–ì–ê–©–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø –ö–õ–ò–ï–ù–¢–ê
    
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CRM, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ customers —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ person_uid.
    
    Returns:
    {
        "success": true,
        "full_name": "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ", 
        "source": "retailcrm",
        "external_id": "12345",
        "person_uid": "retailcrm:12345",
        "linked_phones": ["+375296254070", "+375297003134"],
        "updated_count": 2
    }
    """
    try:
        logger.info(f"[enrich-customer] Starting enrichment for {enterprise_number}/{phone_e164}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        global pg_pool
        if not pg_pool:
            return {"success": False, "error": "Database connection failed"}
            
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1",
                enterprise_number
            )
            if not row or not row["integrations_config"]:
                return {"success": False, "error": "No integrations configured"}
                
            integrations_config = row["integrations_config"]
            if isinstance(integrations_config, str):
                import json
                try:
                    integrations_config = json.loads(integrations_config)
                except Exception:
                    integrations_config = {}
            
            primary_integration = integrations_config.get("smart", {}).get("primary") if isinstance(integrations_config, dict) else None
            # Fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏—Å–ø–æ–ª—å–∑—É–µ–º retailcrm –∫–∞–∫ primary, –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω–æ
            if not primary_integration:
                primary_integration = "retailcrm"
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM
        prof = await get_customer_profile(enterprise_number, phone_e164)
        logger.info(f"[enrich-customer] Profile from CRM: {prof}")
        if not prof:
            return {"success": False, "error": "No customer profile found"}
            
        source_info = prof.get("source", {})
        source_raw = source_info.get("raw")
        source_type = source_info.get("type", "").lower()
        
        if not source_raw or not source_type:
            return {"success": False, "error": "Invalid profile data"}
        
        # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        fn = (prof.get("first_name") or "").strip()
        ln = (prof.get("last_name") or "").strip() 
        mn = (prof.get("middle_name") or "").strip()
        en = (prof.get("enterprise_name") or "").strip()
        
        if not (fn or ln or en):
            return {"success": False, "error": "No name data in profile"}
        
        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º external_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç CRM
        external_id = None
        if source_type == "uon":
            for key in ("client_id", "id", "customer_id", "clientId"):
                ext_id = source_raw.get(key)
                if isinstance(ext_id, (str, int)) and str(ext_id).strip():
                    external_id = str(ext_id).strip()
                    break
        elif source_type == "retailcrm":
            ext_id = source_raw.get("id")
            if isinstance(ext_id, (str, int)) and str(ext_id).strip():
                external_id = str(ext_id).strip()
        elif source_type == "retailcrm_corporate":
            # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏
            company_info = source_raw.get("company_info", {})
            company_id = company_info.get("id")
            if isinstance(company_id, (str, int)) and str(company_id).strip():
                external_id = str(company_id).strip()
        elif source_type == "moysklad":
            # –î–ª—è –ú–æ–π–°–∫–ª–∞–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            ext_id = source_raw.get("id")
            if isinstance(ext_id, (str, int)) and str(ext_id).strip():
                external_id = str(ext_id).strip()
        
        if not external_id:
            return {"success": False, "error": f"No external_id found for {source_type}"}
        
        # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM
        all_client_phones = []
        if source_type == "retailcrm":
            # –£ RetailCRM –≤ source_raw.phones –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤
            phones_data = source_raw.get("phones", [])
            if isinstance(phones_data, list):
                for phone_entry in phones_data:
                    if isinstance(phone_entry, dict):
                        phone_num = phone_entry.get("number", "").strip()
                        if phone_num and phone_num.startswith("+"):
                            all_client_phones.append(phone_num)
        elif source_type == "retailcrm_corporate":
            # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –í–°–ï–• –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü –∫–æ–º–ø–∞–Ω–∏–∏
            # source_raw —Å–æ–¥–µ—Ä–∂–∏—Ç: company_info, contacts, phones (–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
            contacts_data = source_raw.get("contacts") or []
            if isinstance(contacts_data, list):
                for contact in contacts_data:
                    contact_phones = contact.get("phones") or []
                    # phones - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    for phone_str in contact_phones:
                        if isinstance(phone_str, str) and phone_str.strip().startswith("+"):
                            all_client_phones.append(phone_str.strip())
        elif source_type == "moysklad":
            # –î–ª—è –ú–æ–π–°–∫–ª–∞–¥ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
            # –û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            if hasattr(source_raw, 'get'):
                counterparty_phone = source_raw.get("phone", "").strip()
                if counterparty_phone and counterparty_phone.startswith("+"):
                    all_client_phones.append(counterparty_phone)
            
            # –ù–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
            contact_persons = source_raw.get("contact_persons", []) if hasattr(source_raw, 'get') else []
            if isinstance(contact_persons, list):
                for contact in contact_persons:
                    if isinstance(contact, dict):
                        contact_phone = contact.get("phone", "").strip()
                        if contact_phone and contact_phone.startswith("+"):
                            all_client_phones.append(contact_phone)
            
            # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if not all_client_phones:
                all_client_phones.append(phone_e164)
        elif source_type == "uon":
            # –î–ª—è U-ON –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
            # –ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä
            all_client_phones.append(phone_e164)
        else:
            all_client_phones.append(phone_e164)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        all_client_phones = list(set(all_client_phones))
        logger.info(f"[enrich-customer] Found {len(all_client_phones)} phone(s) for client: {all_client_phones}")
        
        # 5. üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –ø–æ–¥ –æ–¥–Ω–∏–º person_uid
        updated_count = 0
        person_uid = None
        linked_phones = []
        
        # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–∞—Ä—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí contact_id –∏ –ø–æ–¥—Ç—è–Ω–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        phone_to_contact_id: Dict[str, Any] = {}
        if source_type == "retailcrm_corporate":
            try:
                company_info = (source_raw or {}).get("company_info") or {}
                en = company_info.get("name") or en  # –æ–±–Ω–æ–≤–∏–º enterprise_name, –µ—Å–ª–∏ –µ—Å—Ç—å
                for contact in (source_raw or {}).get("contacts") or []:
                    contact_id = contact.get("id")
                    contact_phones = contact.get("phones") or []
                    # phones - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    for phone_str in contact_phones:
                        if isinstance(phone_str, str) and phone_str.strip():
                            phone_to_contact_id[phone_str.strip()] = contact_id
            except Exception:
                phone_to_contact_id = {}
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å primary,
        # –ª–∏–±–æ –µ—Å–ª–∏ primary == retailcrm –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ retailcrm_corporate
        is_primary_src = (
            source_type == primary_integration or
            (primary_integration == "retailcrm" and source_type in ("retailcrm", "retailcrm_corporate"))
        )

        if is_primary_src:
            from app.services.customers import merge_customer_identity, update_fio_for_person
            
            # üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM
            existing_person_uids = set()
            primary_person_uid = None
            
            async with pg_pool.acquire() as conn:
                # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
                for phone in all_client_phones:
                    existing_row = await conn.fetchrow(
                        "SELECT meta FROM customers WHERE enterprise_number = $1 AND phone_e164 = $2",
                        enterprise_number, phone
                    )
                    if existing_row and existing_row["meta"]:
                        try:
                            meta = existing_row["meta"]
                            if isinstance(meta, str):
                                import json
                                meta = json.loads(meta)
                            existing_uid = meta.get("person_uid")
                            if existing_uid:
                                existing_person_uids.add(existing_uid)
                        except Exception:
                            pass
                
                # üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π person_uid (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ç–µ–∫—É—â–∏–π source_type)
                if source_type == "retailcrm_corporate":
                    # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å company_id
                    target_person_uid = f"retailcrm_corp:{external_id}"
                else:
                    target_person_uid = f"{source_type}:{external_id}"
                if target_person_uid in existing_person_uids:
                    primary_person_uid = target_person_uid
                elif existing_person_uids:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ person_uid, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π (–±—É–¥–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É)
                    primary_person_uid = list(existing_person_uids)[0]
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    primary_person_uid = target_person_uid
                
                logger.info(f"[enrich-customer] Using person_uid: {primary_person_uid}, merging from: {existing_person_uids}")
            
            # üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
            for phone in all_client_phones:
                # –î–ª—è corporate —Ñ–æ—Ä–º–∏—Ä—É–µ–º per-phone source_raw —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º contact_id –∏ –§–ò–û
                per_phone_source_raw = source_raw
                phone_fio = {
                    "first_name": fn if fn else None,
                    "last_name": ln if ln else None,
                    "middle_name": mn if mn else None,
                    "enterprise_name": en if en else None
                }
                
                if source_type == "retailcrm_corporate":
                    try:
                        import copy
                        per_phone_source_raw = copy.deepcopy(source_raw) if source_raw else {}
                        per_phone_source_raw.setdefault("company_info", {})
                        per_phone_source_raw["company_info"]["contact_id"] = phone_to_contact_id.get(phone)
                        
                        # –ù–∞–π–¥–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –§–ò–û –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ contacts
                        contacts_data = source_raw.get("contacts") or []
                        for contact in contacts_data:
                            contact_phones = contact.get("phones") or []
                            if phone in contact_phones:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –§–ò–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                                phone_fio = {
                                    "first_name": (contact.get("firstName") or "").strip() or None,
                                    "last_name": (contact.get("lastName") or "").strip() or None,
                                    "middle_name": (contact.get("patronymic") or "").strip() or None,
                                    "enterprise_name": en if en else None
                                }
                                break
                    except Exception:
                        per_phone_source_raw = source_raw
                        
                await merge_customer_identity(
                    enterprise_number=enterprise_number,
                    phone_e164=phone,
                    source=source_type,
                    external_id=external_id,
                    fio=phone_fio,
                    set_primary=True,
                    person_uid=primary_person_uid,
                    source_raw=per_phone_source_raw
                )
            
            # üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥ –æ–¥–Ω–∏–º person_uid
            async with pg_pool.acquire() as conn:
                # –û–±–Ω–æ–≤–ª—è–µ–º person_uid –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
                for phone in all_client_phones:
                    await conn.execute("""
                        UPDATE customers 
                        SET meta = jsonb_set(
                            COALESCE(meta, '{}'::jsonb), 
                            '{person_uid}', 
                            $3::jsonb
                        )
                        WHERE enterprise_number = $1 AND phone_e164 = $2
                    """, enterprise_number, phone, f'"{primary_person_uid}"')
                
                # –§–ò–û —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤—ã—à–µ
                # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –¥–µ–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û
                
                # üßπ –û–ß–ò–°–¢–ö–ê –£–°–¢–ê–†–ï–í–®–ò–• –°–í–Ø–ó–ï–ô
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ –≤ –ë–î —Å —ç—Ç–∏–º person_uid, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ CRM
                all_linked_rows = await conn.fetch(
                    "SELECT phone_e164 FROM customers WHERE enterprise_number = $1 AND meta->>'person_uid' = $2",
                    enterprise_number, primary_person_uid
                )
                all_linked_phones = [row["phone_e164"] for row in all_linked_rows]
                
                # –ù–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–µ—Å—Ç—å –≤ –ë–î, –Ω–æ –ù–ï–¢ –≤ CRM)
                phones_to_remove = [phone for phone in all_linked_phones if phone not in all_client_phones]
                
                if phones_to_remove:
                    logger.info(f"[enrich-customer] üóëÔ∏è Removing outdated phone links: {phones_to_remove}")
                    for phone_to_remove in phones_to_remove:
                        # –£–¥–∞–ª—è–µ–º person_uid –∏ external_id –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
                        await conn.execute("""
                            UPDATE customers 
                            SET meta = jsonb_set(
                                jsonb_set(
                                    COALESCE(meta, '{}'::jsonb), 
                                    '{person_uid}', 
                                    'null'::jsonb
                                ),
                                '{ids}',
                                '{}'::jsonb
                            )
                            WHERE enterprise_number = $1 AND phone_e164 = $2
                        """, enterprise_number, phone_to_remove)
                        
                        logger.info(f"[enrich-customer] ‚úÖ Cleaned outdated link for {phone_to_remove}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö)
                linked_rows = await conn.fetch(
                    "SELECT phone_e164 FROM customers WHERE enterprise_number = $1 AND meta->>'person_uid' = $2",
                    enterprise_number, primary_person_uid
                )
                linked_phones = [row["phone_e164"] for row in linked_rows]
                updated_count = len(linked_phones)
                person_uid = primary_person_uid
                
        else:
            # –î–ª—è –ù–ï –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º external_id –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –§–ò–û
            from app.services.customers import merge_customer_identity
            await merge_customer_identity(
                enterprise_number=enterprise_number,
                phone_e164=phone_e164,
                source=source_type,
                external_id=external_id,
                fio=None,  # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –¥–ª—è –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö
                set_primary=False
            )
            linked_phones = [phone_e164]
            updated_count = 1
        
        # 6. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        full_name_parts = []
        if ln: full_name_parts.append(ln)
        if fn: full_name_parts.append(fn)
        if mn: full_name_parts.append(mn)
        full_name = " ".join(full_name_parts)
        
        logger.info(f"[enrich-customer] SUCCESS: {phone_e164} -> {full_name} (source: {source_type}, primary: {is_primary_src})")
        
        return {
            "success": True,
            "full_name": full_name,
            "source": source_type,
            "external_id": external_id,
            "person_uid": person_uid,
            "linked_phones": linked_phones,
            "updated_count": updated_count,
            "is_primary_source": is_primary_src
        }
        
    except Exception as e:
        logger.error(f"[enrich-customer] ERROR for {enterprise_number}/{phone_e164}: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

# Background tasks

async def background_refresh_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞"""
    while True:
        try:
            # –î–∂–∏—Ç—Ç–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è stampede
            jitter = random.randint(-REFRESH_JITTER_MAX, REFRESH_JITTER_MAX)
            sleep_time = REFRESH_INTERVAL_BASE + jitter
            
            await asyncio.sleep(sleep_time)
            await refresh_cache()
            
        except Exception as e:
            logger.error(f"‚ùå Error in background refresh: {e}")
            await asyncio.sleep(60)  # Retry —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É

async def background_cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    while True:
        try:
            await asyncio.sleep(CACHE_CLEANUP_INTERVAL)
            await cleanup_expired_entries()
        except Exception as e:
            logger.error(f"‚ùå Error in background cleanup: {e}")

# Startup event
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global start_time
    start_time = time.time()
    
    logger.info("üöÄ Starting Integration Cache Service")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_database()
    
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
    await refresh_cache()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(background_refresh_task())
    asyncio.create_task(background_cleanup_task())
    asyncio.create_task(listen_for_invalidations())
    
    logger.info("‚úÖ Integration Cache Service started successfully")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    if pg_pool:
        await pg_pool.close()
    logger.info("üëã Integration Cache Service stopped")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8020)
