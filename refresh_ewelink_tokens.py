#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ eWeLink
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
"""

import sys
import os
import json
import logging
from datetime import datetime, timezone, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('/root/asterisk-webhook')

from ewelink_devices import EWeLinkDevices

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/asterisk-webhook/token_refresh.log'),
        logging.StreamHandler()
    ]
)

def check_token_expiry():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        with open('/root/asterisk-webhook/ewelink_token.json', 'r') as f:
            tokens = json.load(f)
            
        expires_at_str = tokens.get('expires_at')
        if not expires_at_str:
            logging.warning("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞")
            return True  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            
        expires_at = datetime.fromisoformat(expires_at_str.replace('Z', '+00:00'))
        if expires_at.tzinfo is None:
            expires_at = expires_at.replace(tzinfo=timezone.utc)
            
        now = datetime.now(timezone.utc)
        time_left = expires_at - now
        
        logging.info(f"–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}")
        logging.info(f"–í—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {time_left}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 2 –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
        return time_left.total_seconds() < (2 * 24 * 3600)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return True

def refresh_tokens():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ refresh_token"""
    try:
        device_client = EWeLinkDevices()
        
        if device_client.refresh_access_token():
            logging.info("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ refresh_token!")
            return True
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ refresh_token")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ eWeLink...")
    
    if check_token_expiry():
        logging.info("üïê –¢–æ–∫–µ–Ω—ã —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        if refresh_tokens():
            logging.info("üéâ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            sys.exit(0)
        else:
            logging.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            logging.error("üìû –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è OAuth!")
            sys.exit(1)
    else:
        logging.info("‚úÖ –¢–æ–∫–µ–Ω—ã –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã")
        sys.exit(0)

if __name__ == "__main__":
    main() 