// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
window.Telegram.WebApp.ready();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è  
const API_BASE_URL = 'https://bot.vochi.by/miniapp';
let currentUser = null;
let currentEnterprise = null;
let callsData = [];
let clientsData = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initTelegramWebApp();
    initUI();
    loadInitialData();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
 */
function initTelegramWebApp() {
    const tg = window.Telegram.WebApp;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const initData = tg.initDataUnsafe;
    
    if (initData.user) {
        currentUser = {
            id: initData.user.id,
            first_name: initData.user.first_name,
            last_name: initData.user.last_name,
            username: initData.user.username
        };
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('user-name').textContent = 
            `${currentUser.first_name} ${currentUser.last_name || ''}`.trim();
    } else {
        console.warn('Telegram WebApp user data not available');
        // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentUser = { id: 374573193, first_name: 'Test', last_name: 'User' };
        document.getElementById('user-name').textContent = 'Test User';
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
    tg.setHeaderColor('secondary_bg_color');
    tg.expand();
    
    console.log('Telegram WebApp initialized:', currentUser);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
 */
function initUI() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–∏–ª—å—Ç—Ä
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('filter-date').value = today;
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    showCalls();
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function loadInitialData() {
    try {
        await Promise.all([
            loadEnterpriseInfo(),
            loadCalls(),
            loadStats()
        ]);
    } catch (error) {
        console.error('Error loading initial data:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏
 */
async function loadEnterpriseInfo() {
    try {
        const response = await fetch(`${API_BASE_URL}/enterprise-info`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tg_id: currentUser.id })
        });
        
        if (response.ok) {
            const data = await response.json();
            currentEnterprise = data.enterprise;
            document.getElementById('enterprise-name').textContent = 
                data.enterprise.name || `–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ ${data.enterprise.number}`;
        } else {
            document.getElementById('enterprise-name').textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ';
        }
    } catch (error) {
        console.error('Error loading enterprise info:', error);
        document.getElementById('enterprise-name').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
 */
async function loadCalls() {
    try {
        showLoading('calls-list', '–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤–æ–Ω–∫–∏...');
        
        const filterType = document.getElementById('filter-type').value;
        const filterDate = document.getElementById('filter-date').value;
        
        const response = await fetch(`${API_BASE_URL}/calls`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                tg_id: currentUser.id,
                filter_type: filterType,
                filter_date: filterDate,
                limit: 50
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            callsData = data.calls;
            renderCalls();
        } else {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–æ–≤');
        }
    } catch (error) {
        console.error('Error loading calls:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–≤–æ–Ω–∫–æ–≤');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
 */
function renderCalls() {
    const container = document.getElementById('calls-list');
    
    if (callsData.length === 0) {
        container.innerHTML = '<div class="info-message">üìû –ó–≤–æ–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        return;
    }
    
    const html = callsData.map(call => `
        <div class="call-item" onclick="showCallDetails('${call.id}')">
            <div class="call-icon">
                ${getCallIcon(call.call_type, call.call_status)}
            </div>
            <div class="call-details">
                <div class="call-phone">${formatPhone(call.phone)}</div>
                <div class="call-meta">
                    <span>üìÖ ${formatDate(call.start_time)}</span>
                    <span>‚è±Ô∏è ${formatDuration(call.duration)}</span>
                    <span>üìç ${call.extension || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                </div>
            </div>
            <div class="call-actions">
                ${call.recording_url ? 
                    `<button class="play-btn" onclick="playRecording(event, '${call.recording_url}', '${call.phone}', '${call.start_time}', '${call.duration}')">üéµ</button>` : 
                    `<button class="play-btn" disabled>üö´</button>`
                }
            </div>
        </div>
    `).join('');
    
    container.innerHTML = html;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function loadStats() {
    try {
        const response = await fetch(`${API_BASE_URL}/stats`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tg_id: currentUser.id })
        });
        
        if (response.ok) {
            const data = await response.json();
            document.getElementById('total-calls').textContent = data.total_calls || 0;
            document.getElementById('successful-calls').textContent = data.successful_calls || 0;
            document.getElementById('avg-duration').textContent = data.avg_duration || '0:00';
        }
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

/**
 * –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
async function searchClients() {
    const query = document.getElementById('client-search').value.trim();
    const container = document.getElementById('clients-list');
    
    if (query.length < 3) {
        container.innerHTML = '<div class="info-message">üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</div>';
        return;
    }
    
    try {
        showLoading('clients-list', '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
        
        const response = await fetch(`${API_BASE_URL}/clients/search`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                tg_id: currentUser.id,
                query: query
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            renderClients(data.clients);
        } else {
            showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤');
        }
    } catch (error) {
        console.error('Error searching clients:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
function renderClients(clients) {
    const container = document.getElementById('clients-list');
    
    if (clients.length === 0) {
        container.innerHTML = '<div class="info-message">üë• –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    const html = clients.map(client => `
        <div class="client-item">
            <div class="client-name">${client.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
            <div class="client-phone">${formatPhone(client.phone)}</div>
            <div class="client-stats">
                <span>üìû ${client.calls_count || 0} –∑–≤–æ–Ω–∫–æ–≤</span>
                <span>üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${client.last_call ? formatDate(client.last_call) : '–ù–∏–∫–æ–≥–¥–∞'}</span>
                <span>‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${client.total_duration || '0:00'}</span>
            </div>
        </div>
    `).join('');
    
    container.innerHTML = html;
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
function playRecording(event, recordingUrl, phone, date, duration) {
    event.stopPropagation();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('audio-phone').textContent = formatPhone(phone);
    document.getElementById('audio-date').textContent = formatDate(date);
    document.getElementById('audio-duration').textContent = formatDuration(duration);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä
    const audioPlayer = document.getElementById('audio-player');
    audioPlayer.src = recordingUrl;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('audio-modal').classList.add('active');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    audioPlayer.play().catch(error => {
        console.error('Error playing audio:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å');
    });
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function closeAudioModal() {
    const modal = document.getElementById('audio-modal');
    const audioPlayer = document.getElementById('audio-player');
    
    audioPlayer.pause();
    audioPlayer.src = '';
    modal.classList.remove('active');
}

/**
 * –ù–∞–≤–∏–≥–∞—Ü–∏—è
 */
function showCalls() {
    setActiveSection('calls-section', 0);
    loadCalls();
}

function showClients() {
    setActiveSection('clients-section', 1);
}

function showStats() {
    setActiveSection('stats-section', 2);
    loadStats();
}

function setActiveSection(sectionId, navIndex) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
    document.getElementById(sectionId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index === navIndex);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
function refreshCalls() {
    loadCalls();
}

function filterCalls() {
    loadCalls();
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function formatPhone(phone) {
    if (!phone) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä';
    const cleaned = phone.replace(/\D/g, '');
    if (cleaned.length === 12 && cleaned.startsWith('375')) {
        return `+375 ${cleaned.slice(3, 5)} ${cleaned.slice(5, 8)}-${cleaned.slice(8, 10)}-${cleaned.slice(10)}`;
    }
    return phone;
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function formatDuration(seconds) {
    if (!seconds || seconds < 0) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
}

function getCallIcon(callType, callStatus) {
    if (callType === 1) { // –ò—Å—Ö–æ–¥—è—â–∏–π
        return callStatus === 2 ? '‚úÖ' : '‚ùå'; // –£—Å–ø–µ—à–Ω—ã–π : –ù–µ—É—Å–ø–µ—à–Ω—ã–π
    } else { // –í—Ö–æ–¥—è—â–∏–π
        return callStatus === 2 ? 'üìû' : 'üìµ'; // –û—Ç–≤–µ—á–µ–Ω–Ω—ã–π : –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π
    }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã UI
 */
function showLoading(containerId, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    document.getElementById(containerId).innerHTML = 
        `<div class="loading">üîÑ ${message}</div>`;
}

function showError(message) {
    console.error(message);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

function showCallDetails(callId) {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
    console.log('Show call details for:', callId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
document.getElementById('audio-modal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeAudioModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" Telegram
window.Telegram.WebApp.onEvent('backButtonClicked', function() {
    const modal = document.getElementById('audio-modal');
    if (modal.classList.contains('active')) {
        closeAudioModal();
    } else {
        window.Telegram.WebApp.close();
    }
});

console.log('Mini App script loaded successfully');