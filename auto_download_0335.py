#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ú–ê–°–°–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–ü–ò–°–ï–ô –ü–†–ï–î–ü–†–ò–Ø–¢–ò–Ø 0335 (MERIDA)
–î–∂–æ–±–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 23 –∏—é–ª—è 2025 –≤ 15:30 GMT+3 (12:30 UTC)

–°–µ—Ä–≤–µ—Ä: 10.88.10.34:5059
–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: 0335 (Merida)
name2: 375291111121
"""

import asyncio
import os
import sys
import time
import tempfile
import shutil
from datetime import datetime
from typing import List, Tuple
import logging
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('app')

from hetzner_s3_integration import HetznerS3Client
from s3_config import S3_CONFIG
from app.services.postgres import init_pool, update_call_recording_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'/tmp/auto_download_0335_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è 0335
ENTERPRISE_NUMBER = "0335"
ENTERPRISE_NAME = "Merida"
ENTERPRISE_NAME2 = "375291111121"
ASTERISK_SERVER = "10.88.10.34"
ASTERISK_PORT = "5059"
ASTERISK_USER = "root"
ASTERISK_PASSWORD = "5atx9Ate@pbx"
TEMP_DIR = "/tmp/asterisk_0335_auto_download"

def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    banner = f"""
{'='*70}
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ñ–û–ë–ê –ó–ê–ì–†–£–ó–ö–ò –ó–ê–ü–ò–°–ï–ô –ü–†–ï–î–ü–†–ò–Ø–¢–ò–Ø 0335
{'='*70}
üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üè¢ –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {ENTERPRISE_NUMBER} ({ENTERPRISE_NAME})
üåê –°–µ—Ä–≤–µ—Ä: {ASTERISK_SERVER}:{ASTERISK_PORT}
üìÅ name2: {ENTERPRISE_NAME2}
üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ S3: CallRecords/{ENTERPRISE_NAME2}/–≥–æ–¥/–º–µ—Å—è—Ü/
{'='*70}
"""
    print(banner)
    logger.info(f"–°–¢–ê–†–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò –ü–†–ï–î–ü–†–ò–Ø–¢–ò–Ø {ENTERPRISE_NUMBER}")

def check_server_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Asterisk"""
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {ASTERISK_SERVER}:{ASTERISK_PORT}...")
        
        cmd = [
            'sshpass', '-p', ASTERISK_PASSWORD,
            'ssh', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=no',
            '-p', ASTERISK_PORT, f'{ASTERISK_USER}@{ASTERISK_SERVER}',
            'echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Asterisk —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def analyze_recordings() -> Tuple[int, str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        
        cmd = [
            'sshpass', '-p', ASTERISK_PASSWORD,
            'ssh', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=no',
            '-p', ASTERISK_PORT, f'{ASTERISK_USER}@{ASTERISK_SERVER}',
            'ls -la /var/spool/asterisk/monitor/*.wav | wc -l && du -sh /var/spool/asterisk/monitor/'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            file_count = int(lines[0])
            size_info = lines[1] if len(lines) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
            logger.info(f"üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_info}")
            
            return file_count, size_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–µ–π: {result.stderr}")
            return 0, "–û—à–∏–±–∫–∞"
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø–∏—Å–µ–π: {e}")
        return 0, "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ"

def download_recordings(file_count: int) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        logger.info(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_count} —Ñ–∞–π–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(TEMP_DIR, exist_ok=True)
        logger.info(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}")
        
        # –ö–æ–º–∞–Ω–¥–∞ rsync –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        cmd = [
            'sshpass', '-p', ASTERISK_PASSWORD,
            'rsync', '-avz', '--progress',
            '-e', f'ssh -p {ASTERISK_PORT} -o StrictHostKeyChecking=no',
            f'{ASTERISK_USER}@{ASTERISK_SERVER}:/var/spool/asterisk/monitor/*.wav',
            f'{TEMP_DIR}/'
        ]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=1800)  # 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        end_time = time.time()
        
        download_time = int(end_time - start_time)
        
        if result.returncode == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            downloaded_files = len([f for f in os.listdir(TEMP_DIR) if f.endswith('.wav')])
            logger.info(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {download_time} —Å–µ–∫")
            logger.info(f"üìÅ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {downloaded_files}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return False

async def process_and_upload_recordings() -> Tuple[int, int]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ S3"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–≥—Ä—É–∑–∫—É –≤ S3...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
        s3_client = HetznerS3Client(
            access_key=S3_CONFIG['ACCESS_KEY'],
            secret_key=S3_CONFIG['SECRET_KEY'],
            region=S3_CONFIG['REGION']
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_pool()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ WAV —Ñ–∞–π–ª–æ–≤
        wav_files = [f for f in os.listdir(TEMP_DIR) if f.endswith('.wav')]
        total_files = len(wav_files)
        
        logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ WAV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_files}")
        
        success_count = 0
        error_count = 0
        
        for i, wav_file in enumerate(wav_files, 1):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º call_unique_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                call_unique_id = wav_file.replace('.wav', '')
                wav_path = os.path.join(TEMP_DIR, wav_file)
                
                logger.info(f"üì§ [{i}/{total_files}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {call_unique_id}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
                upload_result = s3_client.upload_call_recording(
                    enterprise_number=ENTERPRISE_NUMBER,
                    call_unique_id=call_unique_id,
                    local_file_path=wav_path
                )
                
                if upload_result:
                    file_url, object_key, uuid_token, recording_duration = upload_result
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
                    public_call_url = f"/recordings/file/{uuid_token}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    db_success = await update_call_recording_info(
                        call_unique_id=call_unique_id,
                        call_url=public_call_url,
                        s3_object_key=object_key,
                        uuid_token=uuid_token,
                        recording_duration=recording_duration
                    )
                    
                    if db_success:
                        success_count += 1
                        logger.info(f"‚úÖ [{i}/{total_files}] –£—Å–ø–µ—à–Ω–æ: {call_unique_id} (UUID: {uuid_token})")
                    else:
                        error_count += 1
                        logger.error(f"‚ùå [{i}/{total_files}] –û—à–∏–±–∫–∞ –ë–î: {call_unique_id}")
                else:
                    error_count += 1
                    logger.error(f"‚ùå [{i}/{total_files}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {call_unique_id}")
                    
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                if i % 10 == 0:
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_files} ({i/total_files*100:.1f}%)")
                    
            except Exception as e:
                error_count += 1
                logger.error(f"‚ùå [{i}/{total_files}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {wav_file}: {e}")
        
        return success_count, error_count
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return 0, 0

def cleanup_temp_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        if os.path.exists(TEMP_DIR):
            shutil.rmtree(TEMP_DIR)
            logger.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {TEMP_DIR} —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def print_final_report(start_time: float, file_count: int, success_count: int, error_count: int):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    end_time = time.time()
    total_time = int(end_time - start_time)
    
    report = f"""
{'='*70}
üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê
{'='*70}
üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫ ({total_time//60} –º–∏–Ω {total_time%60} —Å–µ–∫)
üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {file_count}
‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}
‚ùå –û—à–∏–±–æ–∫: {error_count}
üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count/max(file_count,1)*100:.1f}%
üè¢ –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {ENTERPRISE_NUMBER} ({ENTERPRISE_NAME})
üóÇÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ S3: CallRecords/{ENTERPRISE_NAME2}/2025/07/
{'='*70}
"""
    print(report)
    logger.info(f"–ó–ê–í–ï–†–®–ï–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: {success_count}/{file_count} —Ñ–∞–π–ª–æ–≤ –∑–∞ {total_time} —Å–µ–∫")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    start_time = time.time()
    
    try:
        print_banner()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        if not check_server_connection():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Asterisk")
            return
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π
        file_count, size_info = analyze_recordings()
        if file_count == 0:
            logger.warning("‚ö†Ô∏è –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        
        # 3. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        if not download_recordings(file_count):
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
            return
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3
        success_count, error_count = await process_and_upload_recordings()
        
        # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print_final_report(start_time, file_count, success_count, error_count)
        
        # 6. –û—á–∏—Å—Ç–∫–∞
        cleanup_temp_files()
        
        logger.info("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ñ–û–ë–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        cleanup_temp_files()

if __name__ == "__main__":
    asyncio.run(main()) 