#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Auth Handler –¥–ª—è aiogram 2.x
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram-–±–æ—Ç–æ–≤ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
"""

import re
import logging
from typing import Optional
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text, Command

logger = logging.getLogger(__name__)

# URL –Ω–∞—à–µ–≥–æ telegram_auth_service
TELEGRAM_AUTH_SERVICE_URL = "http://localhost:8016"

class TelegramAuth(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
    waiting_email = State()
    waiting_code = State()

def register_auth_handlers(dp: Dispatcher, enterprise_number: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ dispatcher"""
    
    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        """
        user_id = message.from_user.id
        username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º enterprise_number –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        current_enterprise = enterprise_number
        logger.info(f"Enterprise number: {current_enterprise}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        web_user_id = ""
        args = message.get_args()
        if args and args.startswith("auth_"):
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.match(r"auth_(\d*)_(\w+)", args)
            if match:
                web_user_id, link_enterprise = match.groups()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º enterprise –∏–∑ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∏–π
                if link_enterprise:
                    current_enterprise = link_enterprise
        
        enterprise_name = await get_enterprise_name(current_enterprise) if current_enterprise else "june"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_authorized = await check_user_authorization(user_id)
        
        if is_authorized:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await message.answer(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_name}!\n\n"
                f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n"
                f"üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @VochiSupport"
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await message.answer(
                f"üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_name}!\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–≤–æ–Ω–∫–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
                f"üëá –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
            await state.update_data(
                web_user_id=web_user_id,
                enterprise_number=current_enterprise
            )
            
            await TelegramAuth.waiting_email.set()

    @dp.message_handler(state=TelegramAuth.waiting_email)
    async def process_email(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ email"""
        email = message.text.strip().lower()
        user_data = await state.get_data()
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{TELEGRAM_AUTH_SERVICE_URL}/start_auth_flow",
                    json={
                        "email": email,
                        "enterprise_number": user_data["enterprise_number"],
                        "telegram_id": message.from_user.id
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result["success"]:
                        await message.answer(
                            f"‚úÖ {result['message']}\n\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:"
                        )
                        await state.update_data(email=email)
                        await TelegramAuth.waiting_code.set()
                    else:
                        await message.answer(f"‚ùå {result['message']}")
                        await state.finish()
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.finish()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.finish()

    @dp.message_handler(state=TelegramAuth.waiting_code)
    async def process_code(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        code = message.text.strip()
        user_data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
        if not code.isdigit() or len(code) != 6:
            await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{TELEGRAM_AUTH_SERVICE_URL}/verify_code",
                    json={
                        "email": user_data["email"],
                        "code": code,
                        "telegram_id": message.from_user.id
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result["success"]:
                        enterprise_name = await get_enterprise_name(user_data["enterprise_number"])
                        user_name = result["data"]["full_name"]
                        
                        await message.answer(
                            f"üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
                            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram-–±–æ—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_name}.\n\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
                            f"üìû –í—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö\n"
                            f"üìã –í–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö —Å–∏—Å—Ç–µ–º—ã\n"
                            f"üìä –û—Ç—á–µ—Ç–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
                            f"üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @VochiSupport"
                        )
                    else:
                        await message.answer(f"‚ùå {result['message']}")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
            await state.finish()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.finish()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

async def get_enterprise_by_bot_token(bot_token: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É –±–æ—Ç–∞"""
    try:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è enterprise_number –ø–æ bot_token
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{TELEGRAM_AUTH_SERVICE_URL}/get_enterprise_by_token",
                json={"bot_token": bot_token},
                timeout=10
            )
            if response.status_code == 200:
                result = response.json()
                return result.get("enterprise_number")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è enterprise_number: {e}")
    return None

async def get_enterprise_name(enterprise_number: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ë–î"""
    try:
        import asyncpg
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        DB_CONFIG = {
            'host': 'localhost',
            'port': 5432,
            'user': 'postgres', 
            'password': 'r/Yskqh/ZbZuvjb2b3ahfg==',
            'database': 'postgres'
        }
        
        conn = await asyncpg.connect(**DB_CONFIG)
        try:
            result = await conn.fetchrow(
                "SELECT name FROM enterprises WHERE number = $1",
                enterprise_number
            )
            
            if result and result['name']:
                return result['name']
            else:
                return enterprise_number  # fallback –Ω–∞ –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
                
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: {e}")
        return enterprise_number or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def check_user_authorization(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{TELEGRAM_AUTH_SERVICE_URL}/check_auth_status/{telegram_id}",
                timeout=10
            )
            if response.status_code == 200:
                result = response.json()
                return result.get("authorized", False)
    except:
        pass
    return False