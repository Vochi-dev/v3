#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π EventFilter

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ CallsManual_V2
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/root/asterisk-webhook')

from app.services.calls.event_filter import (
    EventFilter, 
    Event, 
    create_event_from_asterisk_data,
    create_events_from_call_sequence
)

def test_simple_incoming_call():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ (—Ç–∏–ø 2-1)
    start ‚Üí dial ‚Üí bridge ‚Üí hangup
    """
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (2-1)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –∏–∑ CallsManual_V2/2-1
    call_sequence = [
        ('start', {
            'UniqueId': '1757772742.60',
            'CallType': 0,
            'Phone': '375296254070',
            'Token': '375293332255',
            'Trunk': '0001363'
        }),
        ('dial', {
            'UniqueId': '1757772742.60',
            'CallType': 0,
            'Phone': '375296254070',
            'Extensions': ['150', '151', '152'],
            'Token': '375293332255'
        }),
        ('bridge', {
            'UniqueId': '1757772742.60',
            'CallerIDNum': '375296254070',
            'ConnectedLineNum': '151',
            'BridgeUniqueid': '77c13775-bede-4f37-886b-86a7dcf0b06a',
            'Token': '375293332255'
        }),
        ('hangup', {
            'UniqueId': '1757772742.60',
            'CallType': 0,
            'CallStatus': '2',
            'Phone': '375296254070',
            'Extensions': ['151'],
            'Token': '375293332255'
        })
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    events = create_events_from_call_sequence(call_sequence)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º
    event_filter = EventFilter()
    result = event_filter.filter_events_for_integrations(events)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.complexity}")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π UID: {result.primary_uid}")
    print(f"   Bitrix24: {len(result.bitrix24)} —Å–æ–±—ã—Ç–∏–π")
    print(f"   Telegram: {len(result.telegram)} —Å–æ–±—ã—Ç–∏–π")
    print(f"   CRM: {len(result.crm)} —Å–æ–±—ã—Ç–∏–π")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert result.complexity == "SIMPLE", f"–û–∂–∏–¥–∞–ª–∏ SIMPLE, –ø–æ–ª—É—á–∏–ª–∏ {result.complexity}"
    assert result.primary_uid == "1757772742.60", f"–ù–µ–≤–µ—Ä–Ω—ã–π primary_uid: {result.primary_uid}"
    assert len(result.bitrix24) == 3, f"–î–ª—è Bitrix24 –æ–∂–∏–¥–∞–ª–∏ 3 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∏–ª–∏ {len(result.bitrix24)}"
    assert len(result.telegram) == 2, f"–î–ª—è Telegram –æ–∂–∏–¥–∞–ª–∏ 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∏–ª–∏ {len(result.telegram)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è Bitrix24
    b24_types = [e.event for e in result.bitrix24]
    expected_b24 = ['start', 'bridge', 'hangup']
    assert b24_types == expected_b24, f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å B24: {b24_types} vs {expected_b24}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è Telegram
    tg_types = [e.event for e in result.telegram]
    expected_tg = ['start', 'hangup']
    assert tg_types == expected_tg, f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å TG: {tg_types} vs {expected_tg}"
    
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –ü–†–û–ô–î–ï–ù")
    return True

def test_simple_outgoing_call():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ (—Ç–∏–ø 1-1)
    dial ‚Üí bridge ‚Üí hangup
    """
    print("\nüß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (1-1)")
    
    call_sequence = [
        ('dial', {
            'UniqueId': '1757765248.0',
            'Phone': '375296254070',
            'Extensions': ['151'],
            'CallType': 1,
            'Token': '375293332255'
        }),
        ('bridge', {
            'UniqueId': '1757765248.0',
            'CallerIDNum': '151',
            'ConnectedLineNum': '375296254070',
            'BridgeUniqueid': '6d2cd650-65a3-4b24-96bd-ac84c0222a82',
            'Token': '375293332255'
        }),
        ('hangup', {
            'UniqueId': '1757765248.0',
            'CallType': 1,
            'CallStatus': '2',
            'Phone': '375296254070',
            'Extensions': ['151'],
            'Token': '375293332255'
        })
    ]
    
    events = create_events_from_call_sequence(call_sequence)
    
    event_filter = EventFilter()
    result = event_filter.filter_events_for_integrations(events)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.complexity}")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π UID: {result.primary_uid}")
    print(f"   Bitrix24: {len(result.bitrix24)} —Å–æ–±—ã—Ç–∏–π")
    print(f"   Telegram: {len(result.telegram)} —Å–æ–±—ã—Ç–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert result.complexity == "SIMPLE"
    assert result.primary_uid == "1757765248.0"
    assert len(result.bitrix24) == 3  # dial, bridge, hangup
    assert len(result.telegram) == 2  # dial, hangup
    
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –ü–†–û–ô–î–ï–ù")
    return True

def test_complex_call_detection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–≤–æ–Ω–∫–æ–≤
    """
    print("\nüß™ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–æ–≤")
    
    event_filter = EventFilter()
    
    # –¢–µ—Å—Ç 1: FollowMe (–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π)
    followme_events = []
    for i in range(40):  # 40 —Å–æ–±—ã—Ç–∏–π
        event = Event('bridge', f'uid_{i}', datetime.now(), {})
        followme_events.append(event)
    
    complexity = event_filter.get_call_complexity(followme_events)
    assert complexity == "FOLLOWME", f"–û–∂–∏–¥–∞–ª–∏ FOLLOWME, –ø–æ–ª—É—á–∏–ª–∏ {complexity}"
    print("‚úÖ FOLLOWME –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–º–Ω–æ–≥–æ –º–æ—Å—Ç–æ–≤)
    transfer_events = []
    for i in range(6):  # 6 bridge —Å–æ–±—ã—Ç–∏–π
        event = Event('bridge', f'uid_{i}', datetime.now(), {})
        transfer_events.append(event)
    
    complexity = event_filter.get_call_complexity(transfer_events)
    assert complexity == "MULTIPLE_TRANSFER", f"–û–∂–∏–¥–∞–ª–∏ MULTIPLE_TRANSFER, –ø–æ–ª—É—á–∏–ª–∏ {complexity}"
    print("‚úÖ MULTIPLE_TRANSFER –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    # –¢–µ—Å—Ç 3: –ó–∞–Ω—è—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ start)
    busy_events = [
        Event('start', 'uid_1', datetime.now(), {}),
        Event('start', 'uid_2', datetime.now(), {}),
        Event('bridge', 'uid_1', datetime.now(), {})
    ]
    
    complexity = event_filter.get_call_complexity(busy_events)
    assert complexity == "BUSY_MANAGER", f"–û–∂–∏–¥–∞–ª–∏ BUSY_MANAGER, –ø–æ–ª—É—á–∏–ª–∏ {complexity}"
    print("‚úÖ BUSY_MANAGER –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    print("‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ü–†–û–ô–î–ï–ù")
    return True

def test_multiple_transfer_call():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ A‚ÜíB‚ÜíC (—Ç–∏–ø 2-18)
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CallsManual_V2/2-18
    """
    print("\nüß™ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ A‚ÜíB‚ÜíC (2-18)")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ 2-18
    call_sequence = [
        ('start', {
            'UniqueId': '1757840723.6',  # –û–°–ù–û–í–ù–û–ô UID
            'CallType': 0,
            'Phone': '375447034448',
            'Token': '375293332255'
        }),
        ('dial', {
            'UniqueId': '1757840723.6',
            'Extensions': ['150', '151', '152'],
            'Token': '375293332255'
        }),
        # –ü–µ—Ä–≤—ã–π bridge - –≤–Ω–µ—à–Ω–∏–π + 151
        ('bridge', {
            'UniqueId': '1757840723.6',
            'CallerIDNum': '375447034448',
            'ConnectedLineNum': '151',
            'BridgeUniqueid': 'c50ef955-2780-4484-a218-dfb1db61b5bc',
            'Token': '375293332255'
        }),
        # Bridge –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ 151‚Üí152 (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏)
        ('bridge', {
            'UniqueId': '1757840735.11',
            'CallerIDNum': '151',
            'ConnectedLineNum': '152',
            'BridgeUniqueid': 'a54508e3-cc4d-4202-9a2f-024033d0cf87',
            'Token': '375293332255'
        }),
        # Bridge –≤–Ω–µ—à–Ω–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ 152
        ('bridge', {
            'UniqueId': '1757840723.6',  # –û–°–ù–û–í–ù–û–ô UID —Å–Ω–æ–≤–∞
            'CallerIDNum': '375447034448',
            'ConnectedLineNum': '152',
            'BridgeUniqueid': 'a54508e3-cc4d-4202-9a2f-024033d0cf87',
            'Token': '375293332255'
        }),
        # Bridge –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ 152‚Üí150 (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏)
        ('bridge', {
            'UniqueId': '1757840756.17',
            'CallerIDNum': '152',
            'ConnectedLineNum': '150',
            'BridgeUniqueid': '6f5224d4-0bb9-42f4-9150-5c6d72e6a4d8',
            'Token': '375293332255'
        }),
        # –§–∏–Ω–∞–ª—å–Ω—ã–π bridge - –≤–Ω–µ—à–Ω–∏–π + 150
        ('bridge', {
            'UniqueId': '1757840757.18',
            'CallerIDNum': '150',
            'ConnectedLineNum': '375447034448',
            'BridgeUniqueid': 'a54508e3-cc4d-4202-9a2f-024033d0cf87',
            'Token': '375293332255'
        }),
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π hangup (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)
        ('hangup', {
            'UniqueId': '1757840735.11',
            'CallStatus': '2',
            'CallType': 2,
            'Extensions': ['152'],
            'Token': '375293332255'
        }),
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π hangup (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)
        ('hangup', {
            'UniqueId': '1757840756.17',
            'CallStatus': '2',
            'CallType': 2,
            'Extensions': ['150'],
            'Token': '375293332255'
        }),
        # –§–∏–Ω–∞–ª—å–Ω—ã–π hangup –û–°–ù–û–í–ù–û–ì–û –∑–≤–æ–Ω–∫–∞
        ('hangup', {
            'UniqueId': '1757840723.6',  # –û–°–ù–û–í–ù–û–ô UID
            'CallStatus': '2',
            'CallType': 0,
            'Phone': '375447034448',
            'Extensions': ['151'],  # –ù–∞—á–∏–Ω–∞–ª —Å 151
            'Token': '375293332255'
        })
    ]
    
    events = create_events_from_call_sequence(call_sequence)
    
    event_filter = EventFilter()
    result = event_filter.filter_events_for_integrations(events)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.complexity}")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π UID: {result.primary_uid}")
    print(f"   Bitrix24: {len(result.bitrix24)} —Å–æ–±—ã—Ç–∏–π")
    print(f"   Telegram: {len(result.telegram)} —Å–æ–±—ã—Ç–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    assert result.complexity == "MULTIPLE_TRANSFER", f"–û–∂–∏–¥–∞–ª–∏ MULTIPLE_TRANSFER, –ø–æ–ª—É—á–∏–ª–∏ {result.complexity}"
    assert result.primary_uid == "1757840723.6", f"–ù–µ–≤–µ—Ä–Ω—ã–π primary_uid: {result.primary_uid}"
    
    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–∂–∏–¥–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π –≤ Bitrix24
    assert len(result.bitrix24) >= 3, f"–î–ª—è MULTIPLE_TRANSFER B24 –æ–∂–∏–¥–∞–ª–∏ >= 3 —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–∏–ª–∏ {len(result.bitrix24)}"
    assert len(result.telegram) == 2, f"–î–ª—è Telegram –æ–∂–∏–¥–∞–ª–∏ 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∏–ª–∏ {len(result.telegram)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å start –∏ hangup –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UID
    b24_events = result.bitrix24
    has_start = any(e.event == 'start' and e.uniqueid == '1757840723.6' for e in b24_events)
    has_hangup = any(e.event == 'hangup' and e.uniqueid == '1757840723.6' for e in b24_events)
    has_bridge = any(e.event == 'bridge' for e in b24_events)
    
    assert has_start, "–ù–µ—Ç start —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UID –≤ Bitrix24"
    assert has_hangup, "–ù–µ—Ç hangup —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UID –≤ Bitrix24"
    assert has_bridge, "–ù–µ—Ç bridge —Å–æ–±—ã—Ç–∏–π –≤ Bitrix24"
    
    print("‚úÖ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ A‚ÜíB‚ÜíC –ü–†–û–ô–î–ï–ù")
    return True

def test_busy_manager_call():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–≤–æ–Ω–∫–∏ –∫ –∑–∞–Ω—è—Ç—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (—Ç–∏–ø 2-19)
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CallsManual_V2/2-19
    """
    print("\nüß™ –¢–µ—Å—Ç –∑–≤–æ–Ω–∫–æ–≤ –∫ –∑–∞–Ω—è—Ç—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (2-19)")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ 2-19
    call_sequence = [
        # –í–ù–£–¢–†–ï–ù–ù–ò–ô –†–ê–ó–ì–û–í–û–† –£–ñ–ï –ò–î–ï–¢ (150‚Üî152)
        ('bridge', {
            'UniqueId': '1757841094.32',  # 150-–π –∫–∞–Ω–∞–ª
            'CallerIDNum': '150',
            'ConnectedLineNum': '152',
            'BridgeUniqueid': '45ec1f12-8845-48f6-bb56-7090be11cf3a',
            'Token': '375293332255'
        }),
        ('bridge', {
            'UniqueId': '1757841093.31',  # 152-–π –∫–∞–Ω–∞–ª  
            'CallerIDNum': '152',
            'ConnectedLineNum': '150',
            'BridgeUniqueid': '45ec1f12-8845-48f6-bb56-7090be11cf3a',
            'Token': '375293332255'
        }),
        
        # –ù–û–í–´–ô –í–ù–ï–®–ù–ò–ô –ó–í–û–ù–û–ö (–∫–æ–≥–¥–∞ 150 –∏ 152 —É–∂–µ –∑–∞–Ω—è—Ç—ã)
        ('start', {
            'UniqueId': '1757841115.33',  # –ù–û–í–´–ô –í–ù–ï–®–ù–ò–ô –ó–í–û–ù–û–ö
            'CallType': 0,
            'Phone': '375447034448',
            'Trunk': '0001363',  # –ï—Å—Ç—å Trunk = –≤–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            'Token': '375293332255'
        }),
        ('dial', {
            'UniqueId': '1757841115.33',
            'Extensions': ['150', '151', '152'],
            'Token': '375293332255'
        }),
        # Bridge –Ω–æ–≤–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        ('bridge', {
            'UniqueId': '1757841115.33',  # –û–°–ù–û–í–ù–û–ô UID –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            'CallerIDNum': '375447034448',
            'ConnectedLineNum': '151',
            'BridgeUniqueid': '012b81e0-d65b-4f4f-8e1a-7eeaf70327d4',
            'Token': '375293332255'
        }),
        # Hangup –Ω–æ–≤–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        ('hangup', {
            'UniqueId': '1757841115.33',  # –û–°–ù–û–í–ù–û–ô UID
            'CallStatus': '0',
            'CallType': 2,
            'Phone': '375447034448',
            'Extensions': ['152'],
            'Token': '375293332255'
        }),
        
        # –í–ù–£–¢–†–ï–ù–ù–ò–ï hangup (—Å—Ç–∞—Ä—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è)
        ('hangup', {
            'UniqueId': '1757841093.31',  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ 152
            'CallStatus': '2',
            'CallType': 2,
            'Phone': '152',
            'Extensions': ['150'],
            'Token': '375293332255'
        })
    ]
    
    events = create_events_from_call_sequence(call_sequence)
    
    event_filter = EventFilter()
    result = event_filter.filter_events_for_integrations(events)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.complexity}")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π UID: {result.primary_uid}")
    print(f"   Bitrix24: {len(result.bitrix24)} —Å–æ–±—ã—Ç–∏–π")
    print(f"   Telegram: {len(result.telegram)} —Å–æ–±—ã—Ç–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    assert result.complexity == "BUSY_MANAGER", f"–û–∂–∏–¥–∞–ª–∏ BUSY_MANAGER, –ø–æ–ª—É—á–∏–ª–∏ {result.complexity}"
    
    # –î–ª—è –∑–∞–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –∑–≤–æ–Ω–æ–∫
    # –û—Å–Ω–æ–≤–Ω–æ–π UID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    assert result.primary_uid == "1757841115.33", f"–ù–µ–≤–µ—Ä–Ω—ã–π primary_uid: {result.primary_uid}"
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –¥—É–±–ª–∏)
    assert len(result.bitrix24) >= 2, f"–î–ª—è BUSY_MANAGER B24 –æ–∂–∏–¥–∞–ª–∏ >= 2 —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–∏–ª–∏ {len(result.bitrix24)}"
    assert len(result.telegram) >= 2, f"–î–ª—è Telegram –æ–∂–∏–¥–∞–ª–∏ >= 2 —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–∏–ª–∏ {len(result.telegram)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    b24_events = result.bitrix24
    has_external_start = any(e.event == 'start' and e.uniqueid == '1757841115.33' for e in b24_events)
    has_external_hangup = any(e.event == 'hangup' and e.uniqueid == '1757841115.33' for e in b24_events)
    
    assert has_external_start, "–ù–µ—Ç start —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ Bitrix24"
    assert has_external_hangup, "–ù–µ—Ç hangup —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ Bitrix24"
    
    # –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–±—ã—Ç–∏–π –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ 152‚Üî150
    has_internal_events = any(e.uniqueid in ['1757841093.31', '1757841094.32'] for e in b24_events)
    assert not has_internal_events, "–ù–∞–π–¥–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã"
    
    print("‚úÖ –¢–µ—Å—Ç –∑–≤–æ–Ω–∫–æ–≤ –∫ –∑–∞–Ω—è—Ç—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ü–†–û–ô–î–ï–ù")
    return True

def test_followme_call():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç FollowMe –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é (—Ç–∏–ø 2-23)
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CallsManual_V2/2-23
    """
    print("\nüß™ –¢–µ—Å—Ç FollowMe –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ (2-23)")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ 2-23
    call_sequence = [
        # –û–°–ù–û–í–ù–û–ô –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö
        ('start', {
            'UniqueId': '1757843259.138',  # –û–°–ù–û–í–ù–û–ô UID
            'CallType': 0,  # –í—Ö–æ–¥—è—â–∏–π
            'Phone': '375447034448',
            'Trunk': '0001363',  # –ï—Å—Ç—å Trunk = –≤–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            'Token': '375293332255'
        }),
        ('dial', {
            'UniqueId': '1757843259.138',
            'Extensions': ['150', '151', '152'],
            'Token': '375293332255'
        }),
        # Bridge –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å 151
        ('bridge', {
            'UniqueId': '1757843259.138',  # –û–°–ù–û–í–ù–û–ô UID
            'CallerIDNum': '375447034448',
            'ConnectedLineNum': '151',
            'BridgeUniqueid': 'c3c5da23-07a5-4add-9583-d5e507a3ad16',
            'Token': '375293332255'
        }),
        
        # –ü–ï–†–ï–ê–î–†–ï–°–ê–¶–ò–Ø FollowMe #1 (–Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π)
        ('start', {
            'UniqueId': '1757843283.147',  # –ü–ï–†–ï–ê–î–†–ï–°–ê–¶–ò–Ø 1
            'CallType': 1,  # –ò—Å—Ö–æ–¥—è—â–∏–π = –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
            'Phone': '375296254070',  # –ú–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            'Trunk': '0001366',
            'Token': '375293332255'
        }),
        ('dial', {
            'UniqueId': '1757843283.147',
            'Extensions': ['151'],
            'CallType': 1,
            'Token': '375293332255'
        }),
        # Bridge –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏
        ('bridge', {
            'UniqueId': '1757843283.147',
            'CallerIDNum': '151',
            'ConnectedLineNum': '300',
            'BridgeUniqueid': 'bb6e263b-9e67-4a71-bcff-60398d45f0db',
            'Token': '375293332255'
        }),
        
        # HANGUP –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ (–Ω–µ—É—Å–ø–µ—à–Ω–∞—è)
        ('hangup', {
            'UniqueId': '1757843283.147',  # –ü–ï–†–ï–ê–î–†–ï–°–ê–¶–ò–Ø 1
            'CallStatus': '2',
            'CallType': 1,
            'Phone': '375296254070',
            'Extensions': ['375447034448'],
            'Token': '375293332255'
        }),
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô HANGUP –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        ('hangup', {
            'UniqueId': '1757843259.138',  # –û–°–ù–û–í–ù–û–ô UID
            'CallStatus': '2',
            'CallType': 0,
            'Phone': '375447034448',
            'Extensions': ['151'],
            'Token': '375293332255'
        })
    ]
    
    events = create_events_from_call_sequence(call_sequence)
    
    event_filter = EventFilter()
    result = event_filter.filter_events_for_integrations(events)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.complexity}")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π UID: {result.primary_uid}")
    print(f"   Bitrix24: {len(result.bitrix24)} —Å–æ–±—ã—Ç–∏–π")
    print(f"   Telegram: {len(result.telegram)} —Å–æ–±—ã—Ç–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è FollowMe
    assert result.complexity == "FOLLOWME", f"–û–∂–∏–¥–∞–ª–∏ FOLLOWME, –ø–æ–ª—É—á–∏–ª–∏ {result.complexity}"
    assert result.primary_uid == "1757843259.138", f"–ù–µ–≤–µ—Ä–Ω—ã–π primary_uid: {result.primary_uid}"
    
    # –î–ª—è FollowMe –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏
    assert len(result.bitrix24) >= 3, f"–î–ª—è FOLLOWME B24 –æ–∂–∏–¥–∞–ª–∏ >= 3 —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–∏–ª–∏ {len(result.bitrix24)}"
    assert len(result.telegram) == 2, f"–î–ª—è Telegram –æ–∂–∏–¥–∞–ª–∏ 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∏–ª–∏ {len(result.telegram)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    b24_events = result.bitrix24
    has_main_start = any(e.event == 'start' and e.uniqueid == '1757843259.138' for e in b24_events)
    has_main_hangup = any(e.event == 'hangup' and e.uniqueid == '1757843259.138' for e in b24_events)
    
    assert has_main_start, "–ù–µ—Ç start —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ Bitrix24"
    assert has_main_hangup, "–ù–µ—Ç hangup —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ Bitrix24"
    
    # –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–π FollowMe
    has_redirect_events = any(e.uniqueid == '1757843283.147' for e in b24_events)
    assert not has_redirect_events, "–ù–∞–π–¥–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ FollowMe - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã"
    
    # –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ö–æ–¥—è—â–∏—Ö dial —Å–æ–±—ã—Ç–∏–π (–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏)
    has_outgoing_dial = any(e.event == 'dial' and e.data.get('CallType') == 1 for e in b24_events)
    assert not has_outgoing_dial, "–ù–∞–π–¥–µ–Ω—ã –∏—Å—Ö–æ–¥—è—â–∏–µ dial —Å–æ–±—ã—Ç–∏—è - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã"
    
    print("‚úÖ –¢–µ—Å—Ç FollowMe –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –ü–†–û–ô–î–ï–ù")
    return True

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 60)
    
    try:
        test_simple_incoming_call()
        test_simple_outgoing_call() 
        test_complex_call_detection()
        test_multiple_transfer_call()
        test_busy_manager_call()
        test_followme_call()  # –ù–û–í–´–ô –¢–ï–°–¢
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –ó–∞–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ FollowMe –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production deployment!")
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
