#!/usr/bin/env python3

print("üîç –ù–∞—á–∏–Ω–∞—é –æ—Ç–ª–∞–¥–∫—É call_tester.py...")

try:
    print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –º–æ–¥—É–ª–∏...")
    import asyncio
    print("‚úÖ asyncio")
    
    import asyncpg
    print("‚úÖ asyncpg")
    
    from fastapi import FastAPI, Form, Request, HTTPException
    print("‚úÖ FastAPI")
    
    from fastapi.templating import Jinja2Templates
    print("‚úÖ Jinja2Templates")
    
    from fastapi.staticfiles import StaticFiles
    print("‚úÖ StaticFiles")
    
    from datetime import datetime
    print("‚úÖ datetime")
    
    import uvicorn
    print("‚úÖ uvicorn")
    
    print("üîó –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    
    async def test_db():
        try:
            conn = await asyncpg.connect(
                host="localhost",
                port=5432,
                user="postgres",
                password="r/Yskqh/ZbZuvjb2b3ahfg==",
                database="postgres"
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            
            result = await conn.fetchval("SELECT 1")
            print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å: {result}")
            
            await conn.close()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            return False
        return True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î
    result = asyncio.run(test_db())
    
    if result:
        print("üéâ –í–°–ï –ú–û–î–£–õ–ò –ò –ë–î –†–ê–ë–û–¢–ê–Æ–¢!")
    else:
        print("üí• –ü–†–û–ë–õ–ï–ú–ê –° –ë–î!")
        
except Exception as e:
    print(f"üí• –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    import traceback
    traceback.print_exc()
