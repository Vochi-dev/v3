#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (call_download.py)
–ü–æ—Ä—Ç: 8012

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Hetzner Object Storage (S3)
- API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
"""

import asyncio
import os
import time
import subprocess
import uuid
import logging
import psycopg2
import shutil
from datetime import datetime, timedelta
from typing import Optional, Dict, List
from fastapi import FastAPI, HTTPException, Query, BackgroundTasks, Request
from fastapi.responses import JSONResponse, RedirectResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ S3 –∫–ª–∏–µ–Ω—Ç–∞
try:
    from hetzner_s3_integration import HetznerS3Client
    from s3_config import S3_CONFIG, validate_s3_config
    S3_AVAILABLE = True
except ImportError as e:
    logging.warning(f"S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    S3_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
try:
    import sys
    sys.path.append('app')
    from app.services.postgres import (
        update_call_recording_info, 
        get_call_recording_info,
        get_call_recording_by_token, 
        search_calls_with_recordings,
        init_pool
    )
    DB_AVAILABLE = True
except ImportError as e:
    logging.warning(f"PostgreSQL –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    DB_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/call_service.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Call Download Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
    version="1.0.0"
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞"""
    if DB_AVAILABLE:
        try:
            await init_pool()
            logger.info("PostgreSQL –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    else:
        logger.warning("PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class RecordingSearchRequest(BaseModel):
    enterprise_number: str
    date_from: datetime
    date_to: datetime

class RecordingInfo(BaseModel):
    key: str
    enterprise_number: str
    call_unique_id: str
    size: int
    last_modified: datetime
    download_url: Optional[str] = None

class UploadRequest(BaseModel):
    enterprise_number: str
    call_unique_id: str
    local_file_path: str
    call_date: Optional[datetime] = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π S3 –∫–ª–∏–µ–Ω—Ç
s3_client = None

def get_enterprise_name2(enterprise_number: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç name2 –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        enterprise_number: –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        
    Returns:
        str: name2 –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ enterprise_number –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        with conn.cursor() as cursor:
            cursor.execute("SELECT name2 FROM enterprises WHERE number = %s", (enterprise_number,))
            result = cursor.fetchone()
            
            if result and result[0]:
                return result[0]
            else:
                logger.warning(f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –∏–ª–∏ name2 –ø—É—Å—Ç–æ–π")
                return enterprise_number
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è name2 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}: {e}")
        return enterprise_number
    finally:
        if 'conn' in locals():
            conn.close()

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global s3_client
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3...")
    
    if not S3_AVAILABLE:
        logger.warning("‚ö†Ô∏è  S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3
    config_check = validate_s3_config()
    if not config_check['valid']:
        logger.error("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3:")
        for issue in config_check['issues']:
            logger.error(f"   - {issue}")
        logger.warning("‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ S3 –∫–ª–∏–µ–Ω—Ç–∞
    try:
        s3_client = HetznerS3Client(
            access_key=S3_CONFIG['ACCESS_KEY'],
            secret_key=S3_CONFIG['SECRET_KEY'],
            region=S3_CONFIG['REGION']
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        usage = s3_client.get_storage_usage()
        logger.info(f"‚úÖ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {usage['total_files']} —Ñ–∞–π–ª–æ–≤, {usage['total_size_mb']} MB")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ S3 –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        s3_client = None

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "Call Download Service",
        "version": "1.0.0",
        "status": "running",
        "port": 8012,
        "s3_available": s3_client is not None,
        "endpoints": [
            "/recordings/search",
            "/recordings/upload", 
            "/recordings/download/{enterprise_number}/{call_id}",
            "/recordings/force-download/{enterprise_number}",
            "/recordings/stats",
            "/health"
        ]
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    health_status = {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "s3_connection": False,
        "disk_space": None
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if s3_client:
        try:
            usage = s3_client.get_storage_usage()
            health_status["s3_connection"] = True
            health_status["s3_stats"] = usage
        except Exception as e:
            health_status["s3_connection"] = False
            health_status["s3_error"] = str(e)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    try:
        import shutil
        disk_usage = shutil.disk_usage("/")
        health_status["disk_space"] = {
            "total_gb": round(disk_usage.total / (1024**3), 2),
            "used_gb": round((disk_usage.total - disk_usage.free) / (1024**3), 2),
            "free_gb": round(disk_usage.free / (1024**3), 2),
            "usage_percent": round((disk_usage.total - disk_usage.free) / disk_usage.total * 100, 2)
        }
    except Exception as e:
        health_status["disk_space_error"] = str(e)
    
    return health_status

@app.get("/recordings/stats")
async def get_storage_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        usage = s3_client.get_storage_usage()
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        base_cost = 4.99  # EUR/–º–µ—Å—è—Ü –±–∞–∑–æ–≤–∞—è –ø–ª–∞—Ç–∞
        additional_cost = max(0, usage['total_size_gb'] - 1) * 4.99  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ TB
        total_cost = base_cost + additional_cost
        
        return {
            "storage_usage": usage,
            "cost_estimate": {
                "base_cost_eur": base_cost,
                "additional_cost_eur": round(additional_cost, 2),
                "total_monthly_cost_eur": round(total_cost, 2),
                "included_storage_gb": 1024,
                "included_traffic_gb": 1024
            },
            "bucket_info": {
                "name": S3_CONFIG['BUCKET_NAME'],
                "region": S3_CONFIG['REGION'],
                "endpoint": S3_CONFIG['ENDPOINT_URL']
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.post("/recordings/search")
async def search_recordings(request: RecordingSearchRequest):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    if not s3_client:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ S3
        return {
            "recordings": [],
            "total_count": 0,
            "message": "S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        }
    
    try:
        recordings = s3_client.find_recordings(
            enterprise_number=request.enterprise_number,
            date_from=request.date_from,
            date_to=request.date_to
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        result_recordings = []
        for recording in recordings:
            result_recordings.append({
                "key": recording['key'],
                "enterprise_number": request.enterprise_number,
                "call_unique_id": recording['key'].split('/')[-1].replace('.wav', ''),
                "size": recording['size'],
                "last_modified": recording['last_modified'],
                "download_url": recording['download_url']
            })
        
        return {
            "recordings": result_recordings,
            "total_count": len(result_recordings),
            "search_criteria": request.dict(),
            "message": f"–ù–∞–π–¥–µ–Ω–æ {len(result_recordings)} –∑–∞–ø–∏—Å–µ–π"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {str(e)}")

@app.get("/recordings/download/{enterprise_number}/{call_id}")
async def get_download_link(
    enterprise_number: str, 
    call_id: str,
    expires_in: int = Query(3600, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î (–±—ã—Å—Ç—Ä—ã–π –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø)
        if DB_AVAILABLE:
            call_info = await get_call_recording_info(call_id)
            
            if not call_info or not call_info.get('s3_object_key'):
                raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            
            object_key = call_info['s3_object_key']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if call_info['enterprise_id'] != enterprise_number:
                raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–µ—â–µ–Ω")
                
        else:
            # Fallback: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ S3 (–µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
            logger.warning("–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≤ S3")
            enterprise_name2 = get_enterprise_name2(enterprise_number)
            prefix = f"CallRecords/{enterprise_name2}/"
            
            response = s3_client.s3_client.list_objects_v2(
                Bucket=s3_client.bucket_name,
                Prefix=prefix
            )
            
            object_key = None
            if 'Contents' in response:
                for obj in response['Contents']:
                    if call_id in obj['Key'] and obj['Key'].endswith('.mp3'):
                        object_key = obj['Key']
                        break
                    elif call_id in obj['Key'] and obj['Key'].endswith('.wav'):
                        object_key = obj['Key']
            
            if not object_key:
                raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ S3")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        download_link = s3_client.generate_download_link(object_key, expires_in)
        
        if download_link:
            result = {
                "download_url": download_link,
                "expires_in_seconds": expires_in,
                "expires_at": (datetime.now() + timedelta(seconds=expires_in)).isoformat(),
                "enterprise_number": enterprise_number,
                "call_id": call_id,
                "object_key": object_key
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            if DB_AVAILABLE and 'call_info' in locals():
                result.update({
                    "recording_duration": call_info.get('recording_duration'),
                    "call_duration": call_info.get('duration'),
                    "call_start_time": call_info.get('start_time').isoformat() if call_info.get('start_time') else None
                })
            
            return result
        else:
            raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")

@app.get("/recordings/file/{uuid_token}")
async def get_recording_by_uuid(uuid_token: str, request: Request):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ UUID —Ç–æ–∫–µ–Ω—É.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞ S3 - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞.
    """
    logger.info(f"üéØ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏: {uuid_token}")
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ (Telegram, Twitter –∏ –¥—Ä—É–≥–∏–µ) –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    user_agent = request.headers.get('user-agent', '').lower()
    bot_indicators = ['bot', 'crawler', 'spider', 'telegram', 'twitter', 'facebook', 'whatsapp']
    
    if any(indicator in user_agent for indicator in bot_indicators):
        logger.info(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –±–æ—Ç–∞: {user_agent}")
        raise HTTPException(status_code=403, detail="Forbidden for bots")
    
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if not DB_AVAILABLE:
        raise HTTPException(status_code=503, detail="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ UUID —Ç–æ–∫–µ–Ω—É
        call_info = await get_call_recording_by_token(uuid_token)
        
        if not call_info:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –Ω–∞ S3
        if call_info.get('s3_object_key'):
            # ‚úÖ –§–∞–π–ª —É–∂–µ –Ω–∞ S3 - –æ—Ç–¥–∞–µ–º –µ–≥–æ
            object_key = call_info['s3_object_key']
            download_link = s3_client.generate_download_link(object_key, 3600)
            
            if download_link:
                logger.info(f"üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {uuid_token}")
                return RedirectResponse(url=download_link, status_code=302)
            else:
                raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É")
        
        else:
            # ‚ùå –§–∞–π–ª–∞ –Ω–µ—Ç –Ω–∞ S3 - –∑–∞–ø—É—Å–∫–∞–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è {uuid_token}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
            from recording_downloader import RecordingDownloader
            
            downloader = RecordingDownloader()
            unique_id = call_info['unique_id']
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–µ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            download_result = await downloader.download_single_recording(unique_id)
            
            if download_result['success']:
                # –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞ - –æ—Ç–¥–∞–µ–º —Ñ–∞–π–ª
                object_key = download_result['s3_object_key']
                download_link = s3_client.generate_download_link(object_key, 3600)
                
                if download_link:
                    logger.info(f"‚úÖ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {uuid_token}")
                    return RedirectResponse(url=download_link, status_code=302)
                else:
                    raise HTTPException(status_code=500, detail="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                error_msg = download_result.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"‚ùå –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {uuid_token}: {error_msg}")
                raise HTTPException(status_code=404, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {error_msg}")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ø–æ —Ç–æ–∫–µ–Ω—É: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {str(e)}")

@app.get("/recordings/download/{uuid_token}")
async def get_download_link_by_token(
    uuid_token: str,
    expires_in: int = Query(3600, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ UUID —Ç–æ–∫–µ–Ω—É (API –º–µ—Ç–æ–¥)"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if not DB_AVAILABLE:
        raise HTTPException(status_code=503, detail="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ UUID —Ç–æ–∫–µ–Ω—É
        call_info = await get_call_recording_by_token(uuid_token)
        
        if not call_info or not call_info.get('s3_object_key'):
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        object_key = call_info['s3_object_key']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        download_link = s3_client.generate_download_link(object_key, expires_in)
        
        if download_link:
            return {
                "download_url": download_link,
                "expires_in_seconds": expires_in,
                "expires_at": (datetime.now() + timedelta(seconds=expires_in)).isoformat(),
                "uuid_token": uuid_token,
                "call_id": call_info.get('unique_id'),
                "enterprise_id": call_info.get('enterprise_id'),
                "recording_duration": call_info.get('recording_duration'),
                "call_duration": call_info.get('duration'),
                "call_start_time": call_info.get('start_time').isoformat() if call_info.get('start_time') else None,
                "phone_number": call_info.get('phone_number'),
                "object_key": object_key
            }
        else:
            raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ —Ç–æ–∫–µ–Ω—É: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")

@app.post("/recordings/upload")
async def upload_recording(request: UploadRequest, background_tasks: BackgroundTasks):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(request.local_file_path):
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {request.local_file_path}")
    
    try:
        # üîÑ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º UUID –∏–∑ –ë–î –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
        existing_call_info = await get_call_recording_info(request.call_unique_id)
        
        if not existing_call_info or not existing_call_info.get('uuid_token'):
            raise HTTPException(status_code=404, detail=f"UUID —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ {request.call_unique_id}. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ hangup —Å–æ–±—ã—Ç–∏–µ.")
        
        existing_uuid = existing_call_info['uuid_token']
        existing_call_url = existing_call_info['call_url']
        
        logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UUID: {existing_uuid} –¥–ª—è {request.call_unique_id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3 —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UUID
        from recording_downloader import RecordingDownloader
        downloader = RecordingDownloader()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UUID
        enterprise_number = request.enterprise_number
        name2 = s3_client._get_enterprise_name2(enterprise_number)
        
        if not name2:
            raise HTTPException(status_code=400, detail=f"–ù–µ –Ω–∞–π–¥–µ–Ω name2 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        file_extension = os.path.splitext(request.local_file_path)[1].lower()
        file_to_upload = request.local_file_path
        temp_files_to_cleanup = []
        
        if file_extension == '.wav':
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV —Ñ–∞–π–ª –≤ MP3: {request.local_file_path}")
            mp3_file_path = s3_client._convert_wav_to_mp3(request.local_file_path)
            
            if mp3_file_path != request.local_file_path:
                file_to_upload = mp3_file_path
                file_extension = '.mp3'
                temp_files_to_cleanup.append(mp3_file_path)
                logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {mp3_file_path}")
            else:
                logger.warning(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        recording_duration = s3_client.get_audio_duration(file_to_upload)
        if recording_duration is None:
            recording_duration = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å S3 —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UUID
        call_date = request.call_date or datetime.now()
        object_key = f"CallRecords/{name2}/{call_date.year}/{call_date.month:02d}/{existing_uuid}.mp3"
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
            s3_client.s3_client.upload_file(
                file_to_upload,
                s3_client.bucket_name,
                object_key,
                ExtraArgs={
                    'Metadata': {
                        'enterprise-number': enterprise_number,
                        'call-unique-id': request.call_unique_id,
                        'upload-timestamp': datetime.utcnow().isoformat(),
                        'uuid-token': existing_uuid
                    },
                    'ContentType': 'audio/mpeg'
                }
            )
            
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {object_key}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
            if DB_AVAILABLE:
                db_success = await update_call_recording_info(
                    call_unique_id=request.call_unique_id,
                    call_url=existing_call_url,
                    s3_object_key=object_key,
                    uuid_token=existing_uuid,
                    recording_duration=recording_duration
                )
                
                if not db_success:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –∑–≤–æ–Ω–∫–∞ {request.call_unique_id}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for temp_file in temp_files_to_cleanup:
                background_tasks.add_task(cleanup_local_file, temp_file)
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–µ
            background_tasks.add_task(cleanup_local_file, request.local_file_path)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            file_url = s3_client.generate_download_link(object_key, 3600)
            
            return {
                "success": True,
                "public_url": existing_call_url,  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UUID —Ç–æ–∫–µ–Ω–æ–º
                "s3_file_url": file_url,          # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ S3 (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                "s3_object_key": object_key,
                "uuid_token": existing_uuid,
                "recording_duration": recording_duration,
                "enterprise_number": request.enterprise_number,
                "call_unique_id": request.call_unique_id,
                "upload_time": datetime.now().isoformat(),
                "db_saved": DB_AVAILABLE
            }
            
        except Exception as upload_error:
                         # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
             for temp_file in temp_files_to_cleanup:
                 if os.path.exists(temp_file):
                     os.remove(temp_file)
             raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {str(upload_error)}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

@app.delete("/recordings/cleanup")
async def cleanup_old_recordings(days_to_keep: int = Query(90, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è")):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        deleted_count = s3_client.delete_old_recordings(days_to_keep)
        
        return {
            "success": True,
            "deleted_count": deleted_count,
            "days_to_keep": days_to_keep,
            "cleanup_time": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

@app.post("/recordings/force-download/{enterprise_number}")
async def force_download_all_recordings(
    enterprise_number: str,
    background_tasks: BackgroundTasks
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –í–°–ï–• –∑–∞–ø–∏—Å–µ–π —Å —Ö–æ—Å—Ç–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
    try:
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        with conn.cursor() as cursor:
            cursor.execute("SELECT number, name, name2, ip FROM enterprises WHERE number = %s AND active = true", (enterprise_number,))
            result = cursor.fetchone()
            
            if not result:
                raise HTTPException(status_code=404, detail=f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")
                
            enterprise_data = {
                "number": result[0],
                "name": result[1],
                "name2": result[2] or result[0],  # fallback to number if name2 is empty
                "ip": result[3]
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
    finally:
        if 'conn' in locals():
            conn.close()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    background_tasks.add_task(
        download_all_recordings_task,
        enterprise_data
    )
    
    return {
        "success": True,
        "message": f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_data['name']} ({enterprise_number})",
        "enterprise_number": enterprise_number,
        "enterprise_name": enterprise_data['name'],
        "enterprise_ip": enterprise_data['ip'],
        "started_at": datetime.now().isoformat(),
        "note": "–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–∏—Å–∞."
    }

async def download_all_recordings_task(enterprise_data: dict):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å —Ö–æ—Å—Ç–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    enterprise_number = enterprise_data['number']
    enterprise_name = enterprise_data['name']
    enterprise_ip = enterprise_data['ip']
    name2 = enterprise_data['name2']
    
    logger.info(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {enterprise_name} ({enterprise_number}) —Å —Ö–æ—Å—Ç–∞ {enterprise_ip}")
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk —Å–µ—Ä–≤–µ—Ä–∞–º
    ASTERISK_PORT = "5059"
    ASTERISK_USER = "root"
    ASTERISK_PASSWORD = "5atx9Ate@pbx"
    
    temp_dir = f"/tmp/force_download_{enterprise_number}_{int(time.time())}"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(temp_dir, exist_ok=True)
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .wav —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ê–°–ò–ù–•–†–û–ù–ù–û)
        cmd_list = [
            'sshpass', '-p', ASTERISK_PASSWORD,
            'ssh', '-p', ASTERISK_PORT, '-o', 'StrictHostKeyChecking=no',
            f'{ASTERISK_USER}@{enterprise_ip}',
            'find /var/spool/asterisk/monitor -name "*.wav" -type f'
        ]
        
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ {enterprise_ip}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π subprocess
        process = await asyncio.create_subprocess_exec(
            *cmd_list,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        try:
            stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=60)
        except asyncio.TimeoutError:
            process.kill()
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å {enterprise_ip}")
            return
        
        if process.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {stderr.decode()}")
            return
            
        files = [f.strip() for f in stdout.decode().strip().split('\n') if f.strip().endswith('.wav')]
        
        if not files:
            logger.info(f"‚ö†Ô∏è –§–∞–π–ª—ã .wav –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {enterprise_ip}")
            return
            
        total_files = len(files)
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        
        # 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
        downloaded_count = 0
        uploaded_count = 0
        
        for i, remote_file in enumerate(files, 1):
            filename = os.path.basename(remote_file)
            local_file = os.path.join(temp_dir, filename)
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ scp (–ê–°–ò–ù–•–†–û–ù–ù–û)
                scp_cmd = [
                    'sshpass', '-p', ASTERISK_PASSWORD,
                    'scp', '-P', ASTERISK_PORT, '-o', 'StrictHostKeyChecking=no',
                    f'{ASTERISK_USER}@{enterprise_ip}:{remote_file}',
                    local_file
                ]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π subprocess –¥–ª—è scp
                process = await asyncio.create_subprocess_exec(
                    *scp_cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                
                try:
                    stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=30)
                except asyncio.TimeoutError:
                    process.kill()
                    logger.warning(f"‚ö†Ô∏è [{i}/{total_files}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {filename}")
                    continue
                
                if process.returncode == 0 and os.path.exists(local_file):
                    downloaded_count += 1
                    logger.info(f"üì• [{i}/{total_files}] –°–∫–∞—á–∞–Ω: {filename}")
                    
                    # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 (—É–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                    if s3_client and await upload_file_to_s3(local_file, filename, name2):
                        uploaded_count += 1
                        logger.info(f"‚òÅÔ∏è [{i}/{total_files}] –ó–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {filename}")
                    
                    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(local_file)
                    
                else:
                    logger.warning(f"‚ö†Ô∏è [{i}/{total_files}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {filename}")
                    if stderr:
                        logger.error(f"–û—à–∏–±–∫–∞ scp: {stderr.decode()}")
                    
            except Exception as e:
                logger.error(f"‚ùå [{i}/{total_files}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")
                continue
        
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è {enterprise_name}: —Å–∫–∞—á–∞–Ω–æ {downloaded_count}/{total_files}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3 {uploaded_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è {enterprise_name}: {e}")
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")

async def upload_file_to_s3(local_file_path: str, filename: str, name2: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    if not s3_client:
        return False
        
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º unique_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        unique_id = filename.replace('.wav', '')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ MP3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        file_to_upload = local_file_path
        temp_files_to_cleanup = []
        
        if local_file_path.endswith('.wav'):
            mp3_file_path = s3_client._convert_wav_to_mp3(local_file_path)
            if mp3_file_path != local_file_path:
                file_to_upload = mp3_file_path
                temp_files_to_cleanup.append(mp3_file_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è —Å—Å—ã–ª–∫–∏
        uuid_token = str(uuid.uuid4())
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ UUID
        base_filename = filename.replace('.wav', '.mp3')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å S3 —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        now = datetime.now()
        object_key = f"CallRecords/{name2}/{now.year}/{now.month:02d}/{base_filename}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
        s3_client.s3_client.upload_file(
            file_to_upload,
            s3_client.bucket_name,
            object_key,
            ExtraArgs={
                'Metadata': {
                    'unique-id': unique_id,
                    'upload-timestamp': datetime.utcnow().isoformat(),
                    'uuid-token': uuid_token,
                    'source': 'force-download',
                    'original-filename': filename
                },
                'ContentType': 'audio/mpeg'
            }
        )
        
        logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3 —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º: {object_key}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file in temp_files_to_cleanup:
            if os.path.exists(temp_file):
                os.remove(temp_file)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename} –≤ S3: {e}")
        return False

async def cleanup_local_file(file_path: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3"""
    try:
        await asyncio.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8012) 