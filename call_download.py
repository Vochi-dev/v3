#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (call_download.py)
–ü–æ—Ä—Ç: 8012

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Hetzner Object Storage (S3)
- API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
"""

from fastapi import FastAPI, HTTPException, Query, BackgroundTasks
from fastapi.responses import JSONResponse, RedirectResponse
from pydantic import BaseModel
from typing import Optional, List, Dict
from datetime import datetime, timedelta
import logging
import os
import asyncio
import psycopg2

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ S3 –∫–ª–∏–µ–Ω—Ç–∞
try:
    from hetzner_s3_integration import HetznerS3Client
    from s3_config import S3_CONFIG, validate_s3_config
    S3_AVAILABLE = True
except ImportError as e:
    logging.warning(f"S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    S3_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/call_service.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Call Download Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
    version="1.0.0"
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class RecordingSearchRequest(BaseModel):
    enterprise_number: str
    date_from: datetime
    date_to: datetime

class RecordingInfo(BaseModel):
    key: str
    enterprise_number: str
    call_unique_id: str
    size: int
    last_modified: datetime
    download_url: Optional[str] = None

class UploadRequest(BaseModel):
    enterprise_number: str
    call_unique_id: str
    local_file_path: str
    call_date: Optional[datetime] = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π S3 –∫–ª–∏–µ–Ω—Ç
s3_client = None

def get_enterprise_name2(enterprise_number: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç name2 –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        enterprise_number: –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        
    Returns:
        str: name2 –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ enterprise_number –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",
            user="postgres",
            password="r/Yskqh/ZbZuvjb2b3ahfg=="
        )
        
        with conn.cursor() as cursor:
            cursor.execute("SELECT name2 FROM enterprises WHERE number = %s", (enterprise_number,))
            result = cursor.fetchone()
            
            if result and result[0]:
                return result[0]
            else:
                logger.warning(f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –∏–ª–∏ name2 –ø—É—Å—Ç–æ–π")
                return enterprise_number
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è name2 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}: {e}")
        return enterprise_number
    finally:
        if 'conn' in locals():
            conn.close()

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global s3_client
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3...")
    
    if not S3_AVAILABLE:
        logger.warning("‚ö†Ô∏è  S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3
    config_check = validate_s3_config()
    if not config_check['valid']:
        logger.error("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ S3:")
        for issue in config_check['issues']:
            logger.error(f"   - {issue}")
        logger.warning("‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ S3 –∫–ª–∏–µ–Ω—Ç–∞
    try:
        s3_client = HetznerS3Client(
            access_key=S3_CONFIG['ACCESS_KEY'],
            secret_key=S3_CONFIG['SECRET_KEY'],
            region=S3_CONFIG['REGION']
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        usage = s3_client.get_storage_usage()
        logger.info(f"‚úÖ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {usage['total_files']} —Ñ–∞–π–ª–æ–≤, {usage['total_size_mb']} MB")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ S3 –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        s3_client = None

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "Call Download Service",
        "version": "1.0.0",
        "status": "running",
        "port": 8012,
        "s3_available": s3_client is not None,
        "endpoints": [
            "/recordings/search",
            "/recordings/upload", 
            "/recordings/download/{enterprise_number}/{call_id}",
            "/recordings/stats",
            "/health"
        ]
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    health_status = {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "s3_connection": False,
        "disk_space": None
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if s3_client:
        try:
            usage = s3_client.get_storage_usage()
            health_status["s3_connection"] = True
            health_status["s3_stats"] = usage
        except Exception as e:
            health_status["s3_connection"] = False
            health_status["s3_error"] = str(e)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    try:
        import shutil
        disk_usage = shutil.disk_usage("/")
        health_status["disk_space"] = {
            "total_gb": round(disk_usage.total / (1024**3), 2),
            "used_gb": round((disk_usage.total - disk_usage.free) / (1024**3), 2),
            "free_gb": round(disk_usage.free / (1024**3), 2),
            "usage_percent": round((disk_usage.total - disk_usage.free) / disk_usage.total * 100, 2)
        }
    except Exception as e:
        health_status["disk_space_error"] = str(e)
    
    return health_status

@app.get("/recordings/stats")
async def get_storage_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        usage = s3_client.get_storage_usage()
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        base_cost = 4.99  # EUR/–º–µ—Å—è—Ü –±–∞–∑–æ–≤–∞—è –ø–ª–∞—Ç–∞
        additional_cost = max(0, usage['total_size_gb'] - 1) * 4.99  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ TB
        total_cost = base_cost + additional_cost
        
        return {
            "storage_usage": usage,
            "cost_estimate": {
                "base_cost_eur": base_cost,
                "additional_cost_eur": round(additional_cost, 2),
                "total_monthly_cost_eur": round(total_cost, 2),
                "included_storage_gb": 1024,
                "included_traffic_gb": 1024
            },
            "bucket_info": {
                "name": S3_CONFIG['BUCKET_NAME'],
                "region": S3_CONFIG['REGION'],
                "endpoint": S3_CONFIG['ENDPOINT_URL']
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.post("/recordings/search")
async def search_recordings(request: RecordingSearchRequest):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    if not s3_client:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ S3
        return {
            "recordings": [],
            "total_count": 0,
            "message": "S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        }
    
    try:
        recordings = s3_client.find_recordings(
            enterprise_number=request.enterprise_number,
            date_from=request.date_from,
            date_to=request.date_to
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        result_recordings = []
        for recording in recordings:
            result_recordings.append({
                "key": recording['key'],
                "enterprise_number": request.enterprise_number,
                "call_unique_id": recording['key'].split('/')[-1].replace('.wav', ''),
                "size": recording['size'],
                "last_modified": recording['last_modified'],
                "download_url": recording['download_url']
            })
        
        return {
            "recordings": result_recordings,
            "total_count": len(result_recordings),
            "search_criteria": request.dict(),
            "message": f"–ù–∞–π–¥–µ–Ω–æ {len(result_recordings)} –∑–∞–ø–∏—Å–µ–π"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {str(e)}")

@app.get("/recordings/download/{enterprise_number}/{call_id}")
async def get_download_link(
    enterprise_number: str, 
    call_id: str,
    expires_in: int = Query(3600, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º name2 –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        enterprise_name2 = get_enterprise_name2(enterprise_number)
        
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ S3 –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É (–ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –º–µ—Å—è—Ü–∞—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è)
        prefix = f"CallRecords/{enterprise_name2}/"
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ call_id
        response = s3_client.s3_client.list_objects_v2(
            Bucket=s3_client.bucket_name,
            Prefix=prefix
        )
        
        object_key = None
        if 'Contents' in response:
            for obj in response['Contents']:
                # –ò—â–µ–º —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç call_id –≤ –∏–º–µ–Ω–∏
                if call_id in obj['Key']:
                    object_key = obj['Key']
                    break
        
        if not object_key:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        download_link = s3_client.generate_download_link(object_key, expires_in)
        
        if download_link:
            return {
                "download_url": download_link,
                "expires_in_seconds": expires_in,
                "expires_at": (datetime.now() + timedelta(seconds=expires_in)).isoformat(),
                "enterprise_number": enterprise_number,
                "call_id": call_id
            }
        else:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")

@app.post("/recordings/upload")
async def upload_recording(request: UploadRequest, background_tasks: BackgroundTasks):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(request.local_file_path):
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {request.local_file_path}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
        file_url = s3_client.upload_call_recording(
            enterprise_number=request.enterprise_number,
            call_unique_id=request.call_unique_id,
            local_file_path=request.local_file_path,
            call_date=request.call_date
        )
        
        if file_url:
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–µ
            background_tasks.add_task(cleanup_local_file, request.local_file_path)
            
            return {
                "success": True,
                "file_url": file_url,
                "enterprise_number": request.enterprise_number,
                "call_unique_id": request.call_unique_id,
                "upload_time": datetime.now().isoformat()
            }
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

@app.delete("/recordings/cleanup")
async def cleanup_old_recordings(days_to_keep: int = Query(90, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è")):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    if not s3_client:
        raise HTTPException(status_code=503, detail="S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    try:
        deleted_count = s3_client.delete_old_recordings(days_to_keep)
        
        return {
            "success": True,
            "deleted_count": deleted_count,
            "days_to_keep": days_to_keep,
            "cleanup_time": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

async def cleanup_local_file(file_path: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3"""
    try:
        await asyncio.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8012) 