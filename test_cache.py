#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.integrations.cache import integrations_cache
from app.services.integrations.cache_manager import cache_manager


async def test_cache_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
    print("=" * 50)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞:")
        stats = integrations_cache.get_cache_stats()
        print(f"   –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –≤ –∫—ç—à–µ: {stats['cached_enterprises']}")
        print(f"   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {stats['is_initialized']}")
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
        await integrations_cache.load_all_configs()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:")
        stats = integrations_cache.get_cache_stats()
        print(f"   –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –≤ –∫—ç—à–µ: {stats['cached_enterprises']}")
        print(f"   –í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {stats['total_integrations']}")
        print(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_size_kb']} KB")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}")
        
        # 4. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º
        if stats['enterprises']:
            print("\n4Ô∏è‚É£ –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏:")
            for ent_num, integrations in stats['enterprises'].items():
                print(f"   üìã {ent_num}: {integrations}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 0367:")
        config = await integrations_cache.get_config("0367")
        if config:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {list(config.keys())}")
            for integration_type, integration_config in config.items():
                print(f"      üîß {integration_type}: enabled={integration_config.get('enabled')}")
        else:
            print("   ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –º–µ—Ç–æ–¥—ã
        print("\n6Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        has_integrations = await integrations_cache.has_active_integrations("0367")
        integration_types = await integrations_cache.get_integration_types("0367")
        print(f"   –ï—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è 0367: {has_integrations}")
        print(f"   –¢–∏–ø—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {integration_types}")
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:")
        config_missing = await integrations_cache.get_config("9999")
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è 9999: {config_missing}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


async def test_cache_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞"""
    print("\nüéõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞")
    print("=" * 50)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("1Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        stats = cache_manager.get_manager_stats()
        print(f"   –ó–∞–ø—É—â–µ–Ω: {stats['is_running']}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {stats['update_interval']}s")
        print(f"   –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {stats['task_status']}")
        
        # 2. –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞...")
        await cache_manager.warm_up_cache()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("\n3Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è 0367...")
        await cache_manager.force_reload_enterprise("0367")
        
        # 4. Health check
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
        health = await cache_manager.health_check()
        print(f"   –°—Ç–∞—Ç—É—Å: {health['status']}")
        print(f"   –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω: {health['manager_running']}")
        print(f"   –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {health['cache_initialized']}")
        print(f"   –ö—ç—à —Å–≤–µ–∂–∏–π: {health['cache_fresh']}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
    print("=" * 70)
    
    await test_cache_functionality()
    await test_cache_manager()
    
    print("\nüèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())