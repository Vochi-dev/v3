#!/usr/bin/env python3
"""
Desk –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å - —Å–µ—Ä–≤–∏—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
–ü–æ—Ä—Ç: 8011
"""

import os
import json
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional, Any
from fastapi import FastAPI, HTTPException, Request, Query
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Desk Service",
    description="–°–µ—Ä–≤–∏—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
    version="1.0.0"
)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ–∞–≤–∏–∫–æ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã)
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class StatusResponse(BaseModel):
    status: str
    message: str
    timestamp: str
    version: str

class HealthResponse(BaseModel):
    health: str
    uptime: str
    service: str

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
start_time = datetime.now()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'user': 'postgres', 
    'password': 'r/Yskqh/ZbZuvjb2b3ahfg==',
    'database': 'postgres'
}

async def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await asyncpg.connect(**DATABASE_CONFIG)
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

async def get_latest_hangup_calls(enterprise_id: str, limit: int = 200) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ hangup —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    conn = await get_db_connection()
    if not conn:
        return []
    
    try:
        query = """
            SELECT 
                c.id,
                c.unique_id,
                c.phone_number,
                c.duration,
                c.call_status,
                c.call_type,
                c.start_time,
                c.end_time,
                c.timestamp,
                COALESCE(ce.raw_data, c.raw_data) as raw_data,
                ARRAY_AGG(cp.extension ORDER BY cp.ring_order) FILTER (WHERE cp.extension IS NOT NULL) as extensions,
                ARRAY_AGG(cp.participant_status ORDER BY cp.ring_order) FILTER (WHERE cp.participant_status IS NOT NULL) as statuses
            FROM calls c
            LEFT JOIN call_participants cp ON c.id = cp.call_id
            LEFT JOIN call_events ce ON c.unique_id = ce.unique_id AND ce.event_type = 'hangup'
            WHERE c.enterprise_id = $1 
            GROUP BY c.id, c.unique_id, c.phone_number, c.duration, c.call_status, c.call_type, c.start_time, c.end_time, c.timestamp, ce.raw_data, c.raw_data
            ORDER BY c.timestamp DESC
            LIMIT $2
        """
        
        rows = await conn.fetch(query, enterprise_id, limit)
        return [dict(row) for row in rows]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è {enterprise_id}: {e}")
        return []
    finally:
        await conn.close()

async def get_extension_owners(enterprise_id: str) -> Dict[str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    conn = await get_db_connection()
    if not conn:
        return {}
    
    try:
        query = """
            SELECT 
                uip.phone_number,
                TRIM(COALESCE(u.last_name, '') || ' ' || COALESCE(u.first_name, '')) AS full_name
            FROM user_internal_phones uip
            LEFT JOIN users u ON uip.user_id = u.id
            WHERE uip.enterprise_number = $1
        """
        
        rows = await conn.fetch(query, enterprise_id)
        return {row['phone_number']: row['full_name'] for row in rows if row['full_name'].strip()}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {enterprise_id}: {e}")
        return {}
    finally:
        await conn.close()

def format_phone_display(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not phone:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = ''.join(filter(str.isdigit, phone))
    
    if len(digits) == 12 and digits.startswith('375'):
        # –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä: +375 (29) 123-45-67
        return f"+375 ({digits[3:5]}) {digits[5:8]}-{digits[8:10]}-{digits[10:12]}"
    elif len(digits) == 11 and digits.startswith('7'):
        # –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: +7 (999) 123-45-67
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    else:
        return phone

def format_duration(duration: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ MM:SS"""
    if duration <= 0:
        return "00:00"
    minutes = duration // 60
    seconds = duration % 60
    return f"{minutes:02d}:{seconds:02d}"

def format_call_time(call_time) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞ —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π GMT +3"""
    if not call_time:
        return ""
    
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+3
    gmt_plus_3 = timezone(timedelta(hours=3))
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ datetime
    if isinstance(call_time, str):
        try:
            call_time = datetime.fromisoformat(call_time.replace('Z', '+00:00'))
        except:
            return call_time[:16] if len(call_time) >= 16 else call_time
    
    if not isinstance(call_time, datetime):
        return str(call_time)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ timezone info, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
    if call_time.tzinfo is None:
        call_time = call_time.replace(tzinfo=timezone.utc)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GMT+3
    call_time_local = call_time.astimezone(gmt_plus_3)
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ GMT+3
    now_local = datetime.now(gmt_plus_3)
    today = now_local.date()
    yesterday = today - timedelta(days=1)
    call_date = call_time_local.date()
    
    time_str = call_time_local.strftime("%H:%M")
    
    if call_date == today:
        return time_str
    elif call_date == yesterday:
        return f"–í—á–µ—Ä–∞ {time_str}"
    else:
        return f"{call_time_local.strftime('%d.%m.%Y')} {time_str}"

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Desk —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8011")
    logger.info("üìã –°–µ—Ä–≤–∏—Å-–∑–∞–≥–ª—É—à–∫–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Desk —Å–µ—Ä–≤–∏—Å–∞")

@app.get("/", response_class=HTMLResponse)
async def root(
    enterprise: str = Query(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"),
    number: str = Query(None, description="–ù–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")
):
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"""
    enterprise_name = enterprise or "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"
    enterprise_number = number or "0000"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä-–Ω–∞–∑–≤–∞–Ω–∏–µ"
    full_title = f"{enterprise_number}-{enterprise_name}"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–æ–º–µ—Ä–æ–≤
    calls_data = await get_latest_hangup_calls(enterprise_number, 200)
    extension_owners = await get_extension_owners(enterprise_number)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–≤–æ–Ω–∫–æ–≤
    calls_html = ""
    for call in calls_data:
        # –í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞  
        start_time_raw = call.get('start_time')
        if start_time_raw is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ fallback
            start_time_raw = call.get('timestamp')
        call_time = format_call_time(start_time_raw)
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = format_duration(call.get('duration', 0))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–∞
        raw_data = call.get('raw_data')
        if raw_data is None:
            raw_data = {}
        elif isinstance(raw_data, str):
            try:
                raw_data = json.loads(raw_data)
            except:
                raw_data = {}
        elif not isinstance(raw_data, dict):
            raw_data = {}
        
        phone = call.get('phone_number', '')
        call_type = call.get('call_type', '0')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö –∏–∑ call_participants
        db_extensions = call.get('extensions', []) or []
        statuses = call.get('statuses', []) or []
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º raw_data
        raw_extensions = raw_data.get('Extensions', []) or []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ raw_data
        extensions = db_extensions if db_extensions else raw_extensions
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if call_type == '2':  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            caller = raw_data.get('CallerIDNum', '')
            callee = extensions[0] if extensions else ''
            
            caller_display = extension_owners.get(caller, caller) if caller else caller
            callee_display = extension_owners.get(callee, callee) if callee else callee
            
            if caller != caller_display and caller:
                caller_display = f"{caller_display} {caller}"
            if callee != callee_display and callee:
                callee_display = f"{callee_display} {callee}"
                
            participants = f"{caller_display} ‚Üí {callee_display}"
        else:  # –í–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            formatted_phone = format_phone_display(phone)
            if extensions:
                ext = extensions[0]
                ext_display = extension_owners.get(ext, ext)
                if ext != ext_display and ext:
                    ext_display = f"{ext_display} {ext}"
                
                if call_type == '1':  # –ò—Å—Ö–æ–¥—è—â–∏–π
                    participants = f"{ext_display} ‚Üí {formatted_phone}"
                else:  # –í—Ö–æ–¥—è—â–∏–π (call_type == '0')
                    participants = f"{formatted_phone} ‚Üí {ext_display}"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –Ω–æ–º–µ—Ä–µ
                if call_type == '1':  # –ò—Å—Ö–æ–¥—è—â–∏–π
                    participants = f"??? ‚Üí {formatted_phone}"
                elif call_type == '0':  # –í—Ö–æ–¥—è—â–∏–π
                    participants = f"{formatted_phone} ‚Üí ???"
                else:
                    participants = formatted_phone
        
        # –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ (—Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏)
        call_status = call.get('call_status', '0')
        row_class = "success" if call_status == '2' else "warning" if call_status == '0' else "default"
        
        calls_html += f"""
        <tr class="{row_class}">
            <td>{call_time}</td>
            <td><button class="btn btn-sm btn-secondary" disabled>üéµ</button></td>
            <td>{duration}</td>
            <td>{participants}</td>
        </tr>
        """
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{full_title} –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª</title>
    
    <!-- Favicon and App Icons -->
    <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="96x96" href="/static/apple-touch-icon.png">
    <link rel="manifest" href="/static/site.webmanifest">
    <meta name="theme-color" content="#2563eb">
    <meta name="msapplication-TileColor" content="#2563eb">
    
    <style>
        body {{ 
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; 
            background-color: #f8f9fa; 
            margin: 0; 
            padding: 0; 
        }}
        .header {{ 
            display: flex; 
            align-items: center; 
            background-color: #343a40; 
            color: white; 
            padding: 0.5rem 1rem; 
            border-bottom: 1px solid #ddd; 
        }}
        .header img {{ 
            height: 32px; 
            margin-right: 15px; 
        }}
        .header h1 {{ 
            font-size: 1.1rem; 
            margin: 0; 
            font-weight: 400; 
            color: rgba(255, 255, 255, 0.85); 
        }}
        .container {{ 
            padding: 2rem; 
        }}
        .btn {{ 
            background-color: #007bff; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            text-align: center; 
            text-decoration: none; 
            display: inline-block; 
            font-size: 16px; 
            margin-right: 0.5rem; 
            margin-bottom: 1rem; 
            cursor: pointer; 
            border-radius: 5px; 
        }}
        .btn:hover {{ 
            background-color: #0056b3; 
        }}
        .btn-primary {{ 
            background-color: #007bff; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            cursor: pointer; 
        }}
        .btn-secondary {{ 
            background-color: #6c757d; 
            padding: 10px 20px; 
        }}
        .btn-success {{ 
            background-color: #28a745; 
            padding: 10px 20px; 
        }}
        .btn-sm {{ 
            padding: 5px 10px; 
            font-size: 12px; 
            border-radius: 4px; 
            margin-bottom: 0; 
        }}
        .table-container {{
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            margin-top: 1rem;
        }}
        .table-container h3 {{
            margin: 0;
            padding: 1rem 1.5rem;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            color: #495057;
            font-size: 1.1rem;
            font-weight: 600;
        }}
        .calls-table {{
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
        }}
        .calls-table th {{
            background: #343a40;
            color: white;
            padding: 12px 8px;
            text-align: left;
            font-weight: 600;
            border: none;
        }}
        .calls-table td {{
            padding: 10px 8px;
            border-bottom: 1px solid #dee2e6;
            vertical-align: middle;
        }}
        .calls-table tr.success {{
            background-color: #d4edda;
        }}
        .calls-table tr.warning {{
            background-color: #fff3cd;
        }}
        .calls-table tr.default {{
            background-color: #f8f9fa;
        }}
        .calls-table tr:hover {{
            background-color: #e9ecef;
        }}
        .calls-table tr.success:hover {{
            background-color: #c3e6cb;
        }}
        .calls-table tr.warning:hover {{
            background-color: #ffeaa7;
        }}
        
        @media (max-width: 768px) {{
            .header {{
                padding: 1rem;
            }}
            .container {{
                padding: 1rem;
            }}
            .calls-table {{
                font-size: 0.8rem;
            }}
            .calls-table th, .calls-table td {{
                padding: 8px 4px;
            }}
        }}
    </style>
</head>
<body>
    <div class="header">
        <img src="/static/logo.jpg" alt="–õ–æ–≥–æ—Ç–∏–ø">
        <h1>{full_title} –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª</h1>
    </div>
    
    <div class="container">
        <div class="table-container">
            <h3>–ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200)</h3>
            <table class="calls-table">
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–ó–∞–ø–∏—Å—å</th>
                        <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                        <th>–£—á–∞—Å—Ç–Ω–∏–∫–∏</th>
                    </tr>
                </thead>
                <tbody>
                    {calls_html}
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>
    """
    
    return html_content

@app.get("/api")
async def api_root():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "Desk Service",
        "status": "running",
        "message": "–°–µ—Ä–≤–∏—Å-–∑–∞–≥–ª—É—à–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "version": "1.0.0",
        "port": 8011,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    uptime = datetime.now() - start_time
    return HealthResponse(
        health="healthy",
        uptime=str(uptime),
        service="desk-service"
    )

@app.get("/status", response_model=StatusResponse)
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return StatusResponse(
        status="active",
        message="Desk —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        timestamp=datetime.now().isoformat(),
        version="1.0.0"
    )

@app.get("/info")
async def get_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "name": "Desk Service", 
        "description": "–°–µ—Ä–≤–∏—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
        "version": "1.0.0",
        "port": 8011,
        "endpoints": [
            "/",
            "/health",
            "/status", 
            "/info",
            "/ping"
        ],
        "started_at": start_time.isoformat(),
        "uptime_seconds": (datetime.now() - start_time).total_seconds()
    }

@app.get("/ping")
async def ping():
    """–ü—Ä–æ—Å—Ç–æ–π ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    return {"ping": "pong", "timestamp": datetime.now().isoformat()}

@app.post("/test")
async def test_endpoint(request: Request):
    """–¢–µ—Å—Ç–æ–≤—ã–π POST —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        body = await request.json()
    except:
        body = {}
    
    return {
        "message": "–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "received_data": body,
        "timestamp": datetime.now().isoformat()
    }

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "path": request.url.path,
            "available_endpoints": ["/", "/health", "/status", "/info", "/ping", "/test"],
            "service": "desk-service"
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "service": "desk-service",
            "timestamp": datetime.now().isoformat()
        }
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8011) 