#!/bin/bash

# Integration Cache Service Management Script
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8020

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

SERVICE_NAME="integration_cache"
PORT=8020
PYTHON_FILE="integration_cache.py"
PID_FILE="${SERVICE_NAME}.pid"
LOG_FILE="logs/${SERVICE_NAME}.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p logs

function is_running() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            rm -f "$PID_FILE"
            return 1
        fi
    fi
    return 1
}

function get_process_on_port() {
    lsof -ti:$PORT 2>/dev/null
}

function start() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ $SERVICE_NAME..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–∏—Å
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    local port_pid=$(get_process_on_port)
    if [[ -n "$port_pid" ]]; then
        echo "‚ö†Ô∏è –ü–æ—Ä—Ç $PORT —É–∂–µ –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º $port_pid"
        echo "üõë –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å $port_pid..."
        kill -TERM "$port_pid" 2>/dev/null
        sleep 2
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        if ps -p "$port_pid" > /dev/null 2>&1; then
            kill -KILL "$port_pid" 2>/dev/null
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    export PYTHONPATH="${SCRIPT_DIR}:${PYTHONPATH}"
    python3 -u "$PYTHON_FILE" > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    echo "$pid" > "$PID_FILE"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    sleep 2
    if ps -p "$pid" > /dev/null 2>&1; then
        echo "‚úÖ –°–µ—Ä–≤–∏—Å $SERVICE_NAME –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (PID: $pid)"
        echo "üìÅ –õ–æ–≥–∏: $(realpath "$LOG_FILE")"
        echo "üåê URL: http://localhost:$PORT"
        return 0
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
        rm -f "$PID_FILE"
        return 1
    fi
}

function stop() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ $SERVICE_NAME..."
    
    local stopped=false
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ PID —Ñ–∞–π–ª–∞
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        echo "üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ PID-—Ñ–∞–π–ª–∞: $pid"
        
        if ps -p "$pid" > /dev/null 2>&1; then
            echo "   –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PID $pid..."
            kill -TERM "$pid" 2>/dev/null
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for i in {1..10}; do
                if ! ps -p "$pid" > /dev/null 2>&1; then
                    stopped=true
                    break
                fi
                sleep 1
            done
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            if ps -p "$pid" > /dev/null 2>&1; then
                kill -KILL "$pid" 2>/dev/null
                stopped=true
            fi
        fi
        
        rm -f "$PID_FILE"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É
    local port_pids=$(get_process_on_port)
    if [[ -n "$port_pids" ]]; then
        echo "üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É $PORT: $port_pids"
        
        for pid in $port_pids; do
            echo "   –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PID $pid..."
            kill -TERM "$pid" 2>/dev/null
            sleep 1
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            if ps -p "$pid" > /dev/null 2>&1; then
                kill -KILL "$pid" 2>/dev/null
            fi
        done
        stopped=true
    fi
    
    if [[ "$stopped" == "true" ]]; then
        echo "‚úÖ –°–µ—Ä–≤–∏—Å $SERVICE_NAME –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ÑπÔ∏è –°–µ—Ä–≤–∏—Å $SERVICE_NAME –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
    fi
}

function restart() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ $SERVICE_NAME..."
    stop
    sleep 2
    start
}

function status() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo "‚úÖ –°–µ—Ä–≤–∏—Å $SERVICE_NAME –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
        echo "üìÅ –õ–æ–≥–∏: $(realpath "$LOG_FILE")"
        echo "üåê URL: http://localhost:$PORT"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if curl -s "http://localhost:$PORT/health" > /dev/null 2>&1; then
            echo "üü¢ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
        else
            echo "üî¥ HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        echo "üî¥ –°–µ—Ä–≤–∏—Å $SERVICE_NAME –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
        local port_pid=$(get_process_on_port)
        if [[ -n "$port_pid" ]]; then
            echo "‚ö†Ô∏è –ü–æ—Ä—Ç $PORT –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º $port_pid"
        fi
    fi
}

function logs() {
    if [[ -f "$LOG_FILE" ]]; then
        echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:"
        tail -n 20 "$LOG_FILE"
    else
        echo "‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
    fi
}

function health() {
    echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞..."
    
    if ! is_running; then
        echo "üî¥ –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    local response=$(curl -s "http://localhost:$PORT/health" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        echo "‚úÖ –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç:"
        echo "$response" | python3 -m json.tool 2>/dev/null || echo "$response"
    else
        echo "üî¥ –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å—ã"
        return 1
    fi
}

function stats() {
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞..."
    
    local response=$(curl -s "http://localhost:$PORT/stats" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        echo "$response" | python3 -m json.tool 2>/dev/null || echo "$response"
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        return 1
    fi
}

function help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|health|stats|help}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
    echo "  health    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  stats     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
}

# Main
case "${1:-}" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    logs)
        logs
        ;;
    health)
        health
        ;;
    stats)
        stats
        ;;
    help|--help|-h)
        help
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${1:-}"
        echo ""
        help
        exit 1
        ;;
esac

