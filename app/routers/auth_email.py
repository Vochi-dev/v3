# app/routers/auth_email.py
from fastapi import APIRouter, HTTPException, status, Request
from fastapi.responses import HTMLResponse, RedirectResponse
import aiosqlite

from app.services.email_verification import mark_verified
from app.config import settings
from aiogram import Bot as AiogramBot

router = APIRouter()


@router.get(
    "/verify-email/{token}", 
    response_class=HTMLResponse,
    summary="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ e-mail –ø–æ path-–ø–∞—Ä–∞–º–µ—Ç—Ä—É"
)
async def verify_email_path(token: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ e-mail –ø–æ URL-—á–∞—Å—Ç–∏ /verify-email/{token}.
    –û—Ç–º–µ—á–∞–µ—Ç –≤ –±–∞–∑–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç.
    """
    return await _process_verification(token)


@router.get(
    "/verify-email", 
    response_class=HTMLResponse,
    summary="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ e-mail –ø–æ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—É"
)
async def verify_email_query(request: Request):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ e-mail –ø–æ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—É /verify-email?token=...
    –û—Ç–º–µ—á–∞–µ—Ç –≤ –±–∞–∑–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç.
    """
    token = request.query_params.get("token")
    if not token:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–∞—Ä–∞–º–µ—Ç—Ä token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        )
    return await _process_verification(token)


async def _process_verification(token: str) -> HTMLResponse:
    # –æ—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
    ok, tg_id = await mark_verified(token)
    if not ok:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª"
        )

    # –ø–æ–ª—É—á–∞–µ–º bot_token –∏–∑ telegram_users
    bot_token = None
    async with aiosqlite.connect(settings.DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute(
            "SELECT bot_token FROM telegram_users WHERE tg_id = ?", (tg_id,)
        )
        row = await cur.fetchone()
        if row:
            bot_token = row["bot_token"]

    if not bot_token:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot = AiogramBot(token=bot_token)
    try:
        await bot.send_message(
            chat_id=tg_id,
            text="üéâ –ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
        )
    except Exception:
        # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        pass

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
    return HTMLResponse(
        """
        <h1>–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</h1>
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram-–±–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.</p>
        """,
        status_code=200
    )
