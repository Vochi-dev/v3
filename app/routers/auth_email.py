# app/routers/auth_email.py
# -*- coding: utf-8 -*-

import logging
import datetime

import aiosqlite
from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

from app.services.email_verification import verify_token_and_register_user
from app.services.enterprise import send_message_to_bot
from app.config import settings

router = APIRouter(tags=["auth"])
templates = Jinja2Templates(directory="app/templates")
logger = logging.getLogger("auth_email")
logger.setLevel(logging.DEBUG)


@router.get("/verify-email", response_class=HTMLResponse)
async def verify_email(request: Request, token: str | None = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞.
    URL: /verify-email?token=...
    """
    if not token:
        return templates.TemplateResponse(
            "verify_result.html",
            {
                "request": request,
                "success": False,
                "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            },
            status_code=400
        )

    # –ß–∏—Ç–∞–µ–º –∏–∑ email_tokens tg_id, bot_token –∏ created_at
    async with aiosqlite.connect(settings.DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute(
            "SELECT tg_id, bot_token, created_at FROM email_tokens WHERE token = ?",
            (token,)
        )
        row = await cur.fetchone()

    if not row:
        logger.warning(f"–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {token}")
        return templates.TemplateResponse(
            "verify_result.html",
            {
                "request": request,
                "success": False,
                "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω."
            },
            status_code=400
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
    created = datetime.datetime.fromisoformat(row["created_at"])
    if datetime.datetime.utcnow() - created > datetime.timedelta(hours=24):
        logger.warning(f"–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª: {token}")
        return templates.TemplateResponse(
            "verify_result.html",
            {
                "request": request,
                "success": False,
                "message": "–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
            },
            status_code=400
        )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await verify_token_and_register_user(token)
        logger.info(f"Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Ç–æ–∫–µ–Ω={token}")
    except RuntimeError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ–∫–µ–Ω {token}: {e}")
        return templates.TemplateResponse(
            "verify_result.html",
            {
                "request": request,
                "success": False,
                "message": str(e)
            },
            status_code=400
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email."
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    tg_id = row["tg_id"]
    bot_token = row["bot_token"]
    try:
        sent = await send_message_to_bot(
            bot_token,
            tg_id,
            "üéâ –ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
        )
        if sent:
            logger.info(f"–ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {tg_id}: {e}")

    # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return templates.TemplateResponse(
        "verify_result.html",
        {
            "request": request,
            "success": True,
            "message": "–°–ø–∞—Å–∏–±–æ! –í–∞—à e-mail –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
        }
    )
