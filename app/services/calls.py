```python
import asyncio
import logging
from datetime import datetime
from collections import defaultdict
import re

import phonenumbers
import aiosqlite

from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.config import DB_PATH

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ in-memory —Å—Ç—Ä—É–∫—Ç—É—Ä—ã,
# –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π Asterisk –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.

# –ö–µ—à –¥–ª—è —Å–æ–±—ã—Ç–∏—è "dial": —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ "bridge"
dial_cache = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (start) –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ (bridge)
# –ö–ª—é—á: UniqueId –∑–≤–æ–Ω–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ: message_id –≤ Telegram
bridge_store = {}

# –ê–∫—Ç–∏–≤–Ω—ã–µ "–º–æ—Å—Ç—ã" (bridge): –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è,
# –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω –∏ —Ç–æ–∫–µ–Ω, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
active_bridges = {}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã "–∞–±–æ–Ω–µ–Ω—Ç‚Äì–∞–±–æ–Ω–µ–Ω—Ç" (caller‚Äìcallee) —Å message_id –≤ Telegram,
# —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏—è
# –ö–ª—é—á: –ª–∏–±–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤),
# –ª–∏–±–æ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤). –ó–Ω–∞—á–µ–Ω–∏–µ: message_id.
call_pair_message_map = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ hangup-—Å–æ–±—ã—Ç–∏–π: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (caller) —Ö—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
# –ó–∞–ø–∏—Å—å ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å info –æ hangup: message_id, caller, callee, timestamp –∏ —Ç. –¥.
hangup_message_map = defaultdict(list)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def is_internal_number(number: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º: 3 –∏–ª–∏ 4 —Ü–∏—Ñ—Ä—ã –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.
    –ï—Å–ª–∏ number —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —à–∞–±–ª–æ–Ω–æ–º r"\d{3,4}", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True.
    """
    return bool(number and re.fullmatch(r"\d{3,4}", number))


def format_phone_number(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É phonenumbers.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ê–¢–°-—Ü–∏—Ñ—Ä–∞ (3-4 —Ü–∏—Ñ—Ä—ã) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º as is.
    –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω "+", –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –ø–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º.
    –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–Ω—ã–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    """
    if not phone:
        return phone
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if is_internal_number(phone):
        return phone
    # –î–æ–±–∞–≤–ª—è–µ–º "+" –ø–µ—Ä–µ–¥ –Ω–æ–º–µ—Ä–æ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not phone.startswith("+"):
        phone = "+" + phone
    try:
        parsed = phonenumbers.parse(phone, None)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: +CC XXX XXX...
        return phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
    except Exception:
        return phone


def update_call_pair_message(caller: str, callee: str, message_id: int, is_internal: bool = False):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –∑–≤–æ–Ω–∫–∞ (caller‚Äìcallee) –∏ message_id.
    –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –∫–ª—é—á ‚Äî –∫–æ—Ä—Ç–µ–∂ sorted([caller, callee]),
    –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö ‚Äî —Ç–æ–ª—å–∫–æ caller (–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å–∞–Ω –≤ call_pair_message_map.
    """
    if is_internal:
        key = tuple(sorted([caller, callee]))
    else:
        key = (caller,)
    call_pair_message_map[key] = message_id
    return key


def update_hangup_message_map(
    caller: str,
    callee: str,
    message_id: int,
    is_internal: bool = False,
    call_status: int = -1,
    call_type: int = -1,
    extensions: list = None
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Å–æ–±—ã—Ç–∏–∏ hangup –≤ hangup_message_map –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
    –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ hangup-—Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ "reply_to" –Ω–∞ –Ω–µ–≥–æ.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞.
    –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    """
    rec = {
        'message_id': message_id,
        'caller':      caller,
        'callee':      callee,
        'timestamp':   datetime.now().isoformat(),
        'call_status': call_status,
        'call_type':   call_type,
        'extensions':  extensions or []
    }
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω—è—â–µ–≥–æ
    hangup_message_map[caller].append(rec)
    # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π, –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (callee)
    if is_internal:
        hangup_message_map[callee].append(rec)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 hangup-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    hangup_message_map[caller] = hangup_message_map[caller][-5:]
    if is_internal:
        hangup_message_map[callee] = hangup_message_map[callee][-5:]


def get_relevant_hangup_message_id(caller: str, callee: str, is_internal: bool = False) -> int:
    """
    –ò—â–µ—Ç —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π hangup-—Å–æ–æ–±—â–µ–Ω–∏–µ (message_id) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞.
    –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è caller –∏ callee, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp
    –∏ –±–µ—Ä—ë–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ. –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö ‚Äî —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è caller.
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.
    """
    if is_internal:
        hist = hangup_message_map.get(caller, []) + hangup_message_map.get(callee, [])
    else:
        hist = hangup_message_map.get(caller, [])
    if not hist:
        return None
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (—Å—Ç—Ä–æ–∫–∞ ISO —Ñ–æ—Ä–º–∞—Ç), –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –≤–ø–µ—Ä–µ–¥–∏)
    hist_sorted = sorted(hist, key=lambda x: x['timestamp'], reverse=True)
    return hist_sorted[0]['message_id']


def get_last_call_info(ext_num: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º (hangup) –∑–≤–æ–Ω–∫–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ ext_num.
    –§–æ—Ä–º–∞—Ç: –∏–∫–æ–Ω–∫–∞ –∑–≤–æ–Ω–∫–∞, –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM (—Å —É—á—ë—Ç–æ–º +3 –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É),
    –∞ —Ç–∞–∫–∂–µ –∏–∫–æ–Ω–∫–∞ "—É—Å–ø–µ—à–Ω–æ" –∏–ª–∏ "–Ω–µ—É—Å–ø–µ—à–Ω–æ". –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ext_num ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    –ï—Å–ª–∏ call_type == 0 (–≤—Ö–æ–¥—è—â–∏–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É üõéÔ∏è, –∏–Ω–∞—á–µ ‚¨ÜÔ∏è.
    """
    hist = hangup_message_map.get(ext_num, [])
    if not hist:
        return ""
    # –ë–µ—Ä—ë–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π hangup –ø–æ timestamp
    last = sorted(hist, key=lambda x: x['timestamp'], reverse=True)[0]
    # –ü–∞—Ä—Å–∏–º timestamp –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ (UTC ‚Üí –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    ts = datetime.fromisoformat(last['timestamp'])
    ts = ts.replace(hour=(ts.hour + 3) % 24)
    when = ts.strftime("%d.%m.%Y %H:%M")
    status = last['call_status']
    ctype = last['call_type']
    # –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞, –µ—Å–ª–∏ status == 2, –∏–Ω–∞—á–µ ‚ùå
    icon = "‚úÖ" if status == 2 else "‚ùå"
    if ctype == 0:  # –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        return f"üõéÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π: {when}\n{icon}"
    else:  # –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        return f"‚¨ÜÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π: {when}\n{icon}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ASTERISK ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def process_start(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "start" (–Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞):
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ (CallType == 2), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥.
      –ò–Ω–∞—á–µ ‚Äî –≤—Ö–æ–¥—è—â–∏–π –≤–Ω–µ—à–Ω–∏–π: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º LastCallInfo.
    - –°—Ç–∞—Ä–∞—è hangup-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –Ω–∞–π–¥—ë—Ç—Å—è —á–µ—Ä–µ–∑ get_relevant_hangup_message_id,
      –∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç (reply_to). –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–æ–µ.
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º sent.message_id –≤ bridge_store[uid], –æ–±–Ω–æ–≤–ª—è–µ–º call_pair_message_map –∏ hangup_message_map.
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —á–µ—Ä–µ–∑ await save_telegram_message.
    """
    uid = data.get("UniqueId", "")
    # Raw phone –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö: "Phone" –∏–ª–∏ "CallerIDNum"
    raw_phone = data.get("Phone", "") or data.get("CallerIDNum", "") or ""
    phone = format_phone_number(raw_phone)
    exts = data.get("Extensions", [])
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫: CallType == 2
    is_int = data.get("CallType", 0) == 2
    # Callee ‚Äî –≤ –ø–æ–ª–µ Extensions[0], –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ Extensions –Ω–µ–ø—É—Å—Ç–æ–π
    callee = exts[0] if exts else ""

    if is_int:
        # –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        # –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ +000... (–Ω–æ–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        text = f"üõéÔ∏è –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–≤–æ–Ω–∫–µ (–µ—Å–ª–∏ –±—ã–ª–∞ –∏—Å—Ç–æ—Ä–∏—è)
        last = get_last_call_info(raw_phone)
        if last:
            text += f"\n\n{last}"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã "<" –∏ ">" –¥–ª—è HTML-safe
    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_start] => chat={chat_id}, text={safe_text!r}")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π hangup-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reply_to
        reply_id = get_relevant_hangup_message_id(raw_phone, callee, is_int)
        if reply_id:
            sent = await bot.send_message(
                chat_id,
                safe_text,
                reply_to_message_id=reply_id,
                parse_mode="HTML"
            )
        else:
            sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_start] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª—è—Ç—å/–æ—Ç–≤–µ—á–∞—Ç—å
    bridge_store[uid] = sent.message_id
    # –û–±–Ω–æ–≤–ª—è–µ–º call_pair_message_map –∏ hangup_message_map
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ë–î
    await save_telegram_message(
        sent.message_id,
        "start",
        data.get("Token", ""),
        raw_phone,
        callee,
        is_int
    )
    return {"status": "sent"}


async def process_dial(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "dial" (–Ω–∞—á–∞–ª–æ –Ω–∞–±–æ—Ä–∞):
    - –ï—Å–ª–∏ –ø—Ä–∏ —ç—Ç–æ–º —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ bridge_store –ø–æ uid, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç:
      * –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π (call_type == 2): –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ callee.
      * –ò–Ω–∞—á–µ: –µ—Å–ª–∏ call_type == 1 (–∏—Å—Ö–æ–¥—è—â–∏–π –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ Extensions ‚û°Ô∏è formatted phone.
        –ò–Ω–∞—á–µ (–≤—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º formatted phone ‚û°Ô∏è Extensions.
      * –î–æ–±–∞–≤–ª—è–µ–º LastCallInfo (–µ—Å–ª–∏ –µ—Å—Ç—å).
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id –≤ dial_cache[uid].
    - –û–±–Ω–æ–≤–ª—è–µ–º call_pair_message_map, hangup_message_map, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —á–µ—Ä–µ–∑ await save_telegram_message.
    """
    uid = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or ""
    phone = format_phone_number(raw_phone)
    exts = data.get("Extensions", [])
    call_type = int(data.get("CallType", 0))
    is_int = call_type == 2
    callee = exts[0] if exts else ""

    # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ uid —É–∂–µ –±—ã–ª–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    if uid in bridge_store:
        try:
            await bot.delete_message(chat_id, bridge_store.pop(uid))
        except Exception:
            pass

    if is_int:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–∞–º–∏
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if call_type == 1:
            # –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è: Extensions ‚û°Ô∏è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–æ–º–µ—Ä
            text = f"‚¨ÜÔ∏è <b>–ù–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä</b>\n‚òéÔ∏è {', '.join(exts)} ‚û°Ô∏è\nüí∞ {display}"
        else:
            # –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–æ–º–µ—Ä ‚û°Ô∏è Extensions
            lines = "\n".join(f"‚òéÔ∏è {e}" for e in exts)
            text = f"üõéÔ∏è <b>–í—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä</b>\nüí∞ {display} ‚û°Ô∏è\n{lines}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–≤–æ–Ω–∫–µ:
        last = get_last_call_info(raw_phone if call_type != 1 else callee)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_dial] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_dial] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dial_cache –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ, –≤–∫–ª—é—á–∞—è message_id
    dial_cache[uid] = {
        "caller":     raw_phone,
        "extensions": exts,
        "call_type":  call_type,
        "token":      data.get("Token", ""),
        "message_id": sent.message_id
    }
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º hangup-–∏—Å—Ç–æ—Ä–∏—é
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    await save_telegram_message(
        sent.message_id,
        "dial",
        data.get("Token", ""),
        raw_phone,
        callee,
        is_int
    )
    return {"status": "sent"}


async def process_bridge(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "bridge" (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤):
    - –ï—Å–ª–∏ –≤ dial_cache –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –ø–æ uid, –∑–Ω–∞—á–∏—Ç –∑–≤–æ–Ω–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–∑ –Ω–∞–±–æ—Ä–∞ –≤ "–º–æ—Å—Ç".
      –£–¥–∞–ª—è–µ–º –∏–∑ dial_cache –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (bridge_store.get(uid)).
    - –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ –ª–∏ (caller –∏ connected ‚Äî –æ–±–µ —Ü–∏—Ñ—Ä—ã 3-4 –¥–ª–∏–Ω—ã).
    - –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç:
      * –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: "‚è± –ò–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\ncaller ‚û°Ô∏è connected"
      * –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö: –µ—Å–ª–∏ call_status == 2 (—É—Å–ø–µ—à–Ω—ã–π), –∏–∫–æ–Ω–∫–∞ ‚úÖ; –∏–Ω–∞—á–µ –∏–∫–æ–Ω–∫–∞ ‚¨áÔ∏è.
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ caller/connected, –¥–æ–±–∞–≤–ª—è–µ–º LastCallInfo –¥–ª—è connected.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ bridge_store[uid].
    - –û–±–Ω–æ–≤–ª—è–µ–º call_pair_message_map, hangup_message_map –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ await save_telegram_message.
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ active_bridges –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ (resend_loop).
    """
    uid = data.get("UniqueId", "")
    caller = data.get("CallerIDNum", "")
    connected = data.get("ConnectedLineNum", "")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ–±–∞ –ª–∏ –Ω–æ–º–µ—Ä–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ (3-4 —Ü–∏—Ñ—Ä—ã)
    is_int = is_internal_number(caller) and is_internal_number(connected)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ dial_cache, –∑–Ω–∞—á–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ "dial"-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    if uid in dial_cache:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–Ω "dial"-–∑–≤–æ–Ω–∫–µ
        dial_cache.pop(uid, None)
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram (bridge_store —Ö—Ä–∞–Ω–∏–ª ID –æ—Ç start –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ bridge)
            await bot.delete_message(chat_id, bridge_store.get(uid, 0))
        except Exception:
            pass

    if is_int:
        text = f"‚è± –ò–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n{caller} ‚û°Ô∏è {connected}"
    else:
        status = int(data.get("CallStatus", 0))
        # –ï—Å–ª–∏ call_status == 2, —É—Å–ø–µ—à–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
        pre = "‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä" if status == 2 else "‚¨áÔ∏è üí¨ <b>–í—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä</b>"
        cli_f = format_phone_number(caller)
        cal_f = format_phone_number(connected)
        text = f"{pre}\n‚òéÔ∏è {cli_f} ‚û°Ô∏è üí∞ {cal_f}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–≤–æ–Ω–∫–µ –¥–ª—è connected
        last = get_last_call_info(connected)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_bridge] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_bridge] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ message_id –≤ bridge_store
    bridge_store[uid] = sent.message_id
    # –û–±–Ω–æ–≤–ª—è–µ–º call_pair_message_map –∏ hangup_message_map
    update_call_pair_message(caller, connected, sent.message_id, is_int)
    update_hangup_message_map(caller, connected, sent.message_id, is_int)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (resend_loop)
    active_bridges[uid] = {
        "text":  safe_text,
        "cli":   caller,
        "op":    connected,
        "token": data.get("Token", "")
    }

    await save_telegram_message(
        sent.message_id,
        "bridge",
        data.get("Token", ""),
        caller,
        connected,
        is_int
    )
    return {"status": "sent"}


async def process_hangup(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "hangup" (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞):
    - –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ bridge_store, dial_cache –∏ active_bridges –ø–æ uid.
    - –°—á–∏—Ç–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ (–∏–∑ StartTime –∏ EndTime), —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ "MM:SS".
    - –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ (ct == 2 –∏ callee –≤–Ω—É—Ç—Ä–∏),
      –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫" –∏–ª–∏ "‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" + –Ω–æ–º–µ—Ä–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
      –ò–Ω–∞—á–µ (–≤–Ω–µ—à–Ω–∏–π) –ø—Ä–æ–≤–µ—Ä—è–µ–º ct –∏ cs:
        * –ï—Å–ª–∏ –∏—Å—Ö–æ–¥—è—â–∏–π (ct == 1) –∏ cs == 0 ‚Üí "‚¨ÜÔ∏è ‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"
        * –ï—Å–ª–∏ cs == 2 ‚Üí "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
        * –ò–Ω–∞—á–µ ‚Üí "‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"
      –î–æ–±–∞–≤–ª—è–µ–º formatted phone –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id, –æ–±–Ω–æ–≤–ª—è–µ–º call_pair_message_map –∏ hangup_message_map,
      —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ await save_telegram_message.
    """
    uid = data.get("UniqueId", "")
    caller = data.get("CallerIDNum", "")
    exts = data.get("Extensions", []) or []
    connected = data.get("ConnectedLineNum", "")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ª–∏ –∑–≤–æ–Ω–æ–∫: –µ—Å–ª–∏ exts –Ω–µ–ø—É—Å—Ç, –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä
    is_int = bool(exts and is_internal_number(exts[0]))
    callee = exts[0] if exts else connected or ""

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ cache-–∑–∞–ø–∏—Å–∏ –ø–æ uid
    bridge_store.pop(uid, None)
    # –ï—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω dial, —É–¥–∞–ª—è–µ–º
    dial_cache.pop(uid, None)
    # –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ—Å—Ç, —É–¥–∞–ª—è–µ–º
    active_bridges.pop(uid, None)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: StartTime –∏ EndTime ‚Äî ISO —Å—Ç—Ä–æ–∫–∏
    dur = ""
    try:
        start = datetime.fromisoformat(data.get("StartTime", ""))
        end = datetime.fromisoformat(data.get("EndTime", ""))
        secs = int((end - start).total_seconds())
        dur = f"{secs // 60:02}:{secs % 60:02}"
    except Exception:
        dur = ""

    phone = format_phone_number(caller)
    display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    cs = int(data.get("CallStatus", 0))
    ct = int(data.get("CallType", 0))

    if is_int:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫: –µ—Å–ª–∏ cs == 2 (—É—Å–ø–µ—à–Ω—ã–π), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚úÖ, –∏–Ω–∞—á–µ ‚ùå
        if cs == 2:
            m = "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n"
        else:
            m = "‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª\n"
        m += f"{caller} ‚û°Ô∏è {callee}\n‚åõ {dur}"
    else:
        # –í–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫:
        if ct == 1 and cs == 0:
            # –ò—Å—Ö–æ–¥—è—â–∏–π, –∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
            m = f"‚¨ÜÔ∏è ‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª\nüí∞ {display}"
        elif cs == 2:
            # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            m = f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}\n‚åõ {dur}"
        else:
            # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            m = f"‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}\n‚åõ {dur}"

    safe_text = m.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_hangup] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_hangup] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ hangup-–∏—Å—Ç–æ—Ä–∏—é
    update_call_pair_message(caller, callee, sent.message_id, is_int)
    update_hangup_message_map(caller, callee, sent.message_id, is_int, cs, ct, exts)

    await save_telegram_message(
        sent.message_id,
        "hangup",
        data.get("Token", ""),
        caller,
        callee,
        is_int
    )
    return {"status": "sent"}


async def create_resend_loop(dial_cache_arg, bridge_store_arg, active_bridges_arg, bot: Bot, chat_id: int):
    """
    –§–æ–Ω–æ–≤–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ active_bridges:
    –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º "–º–æ—Å—Ç–∞–º" (bridge),
    —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏ —à–ª—ë–º —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –û–±–Ω–æ–≤–ª—è–µ–º bridge_store_arg[uid] –Ω–æ–≤—ã–º message_id,
    –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é hangup (update_hangup_message_map),
    –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ await save_telegram_message.
    """
    while True:
        await asyncio.sleep(10)
        for uid, info in list(active_bridges_arg.items()):
            text = info.get("text", "")
            cli = info.get("cli")
            op = info.get("op")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ª–∏ –∑–≤–æ–Ω–æ–∫
            is_int = is_internal_number(cli) and is_internal_number(op)
            # –ò—â–µ–º, –º–æ–∂–Ω–æ –ª–∏ reply_to –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π hangup
            reply_id = get_relevant_hangup_message_id(cli, op, is_int)

            safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
            logging.debug(f"[resend_loop] => chat={chat_id}, text={safe_text!r}")

            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤ bridge_store
                if uid in bridge_store_arg:
                    await bot.delete_message(chat_id, bridge_store_arg[uid])
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, —Å reply_to, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω hangup
                if reply_id:
                    sent = await bot.send_message(
                        chat_id,
                        safe_text,
                        reply_to_message_id=reply_id,
                        parse_mode="HTML"
                    )
                else:
                    sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
                # –û–±–Ω–æ–≤–ª—è–µ–º bridge_store_arg[uid] –Ω–æ–≤—ã–º message_id
                bridge_store_arg[uid] = sent.message_id
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º hangup-–∏—Å—Ç–æ—Ä–∏—é
                update_hangup_message_map(cli, op, sent.message_id, is_int)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ "bridge_resend"
                await save_telegram_message(
                    sent.message_id,
                    "bridge_resend",
                    info.get("token", ""),
                    cli,
                    op,
                    is_int
                )
            except BadRequest as e:
                logging.error(f"[resend_loop] failed for {uid}: {e}. text={safe_text!r}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø BOT –ò –°–ü–ò–°–ö–ê CHAT_ID ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _get_bot_and_recipients(asterisk_token: str) -> tuple[str, list[int]]:
    """
    –ü–æ Asterisk-Token (–ø–æ–ª–µ name2 –≤ —Ç–∞–±–ª–∏—Ü–µ enterprises) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - bot_token –¥–ª—è Telegram
      - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö verified tg_id –∏–∑ telegram_users,
        –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É bot_token –∏ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
    –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∫–∏–¥–∞–µ–º HTTPException(404).
    """
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute(
            "SELECT bot_token FROM enterprises WHERE name2 = ?",
            (asterisk_token,)
        )
        ent = await cur.fetchone()
        if not ent:
            raise Exception("Unknown enterprise token")  # –∏–ª–∏ HTTPException(404)
        bot_token = ent["bot_token"]

        cur = await db.execute(
            """
            SELECT tg_id
              FROM telegram_users
             WHERE bot_token = ?
               AND verified = 1
            """,
            (bot_token,)
        )
        rows = await cur.fetchall()

    tg_ids = [int(r["tg_id"]) for r in rows]
    return bot_token, tg_ids


async def _dispatch_to_all(handler, body: dict):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º:
    - –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º bot_token –∏ —Å–ø–∏—Å–æ–∫ chat_id —á–µ—Ä–µ–∑ _get_bot_and_recipients.
    - –°–æ–∑–¥–∞—ë–º Bot(token=bot_token), –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º chat_id –∏ –≤—ã–∑—ã–≤–∞–µ–º handler(bot, chat_id, body).
    - –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"chat_id": ..., "status": ...}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–ª–µ "delivered".
    """
    token = body.get("Token")
    bot_token, tg_ids = await _get_bot_and_recipients(token)
    bot = Bot(token=bot_token)
    results = []

    for chat_id in tg_ids:
        try:
            await handler(bot, chat_id, body)
            results.append({"chat_id": chat_id, "status": "ok"})
        except Exception as e:
            logging.error(f"Asterisk dispatch to {chat_id} failed: {e}")
            results.append({"chat_id": chat_id, "status": "error", "error": str(e)})
    return {"delivered": results}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø –ê–ü–ò –°–ï–†–í–ï–†–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –≤–∞—à–µ–º FastAPI –∏–ª–∏ –¥—Ä—É–≥–æ–º Framework
# –ø—Ä–∏ –ø—Ä–∏—ë–º–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–ª–æ–º (JSON) body –≤—ã –≤—ã–∑—ã–≤–∞–µ—Ç–µ:
#   await _dispatch_to_all(process_start, body)      # –¥–ª—è —Å–æ–±—ã—Ç–∏—è "start"
#   await _dispatch_to_all(process_dial, body)       # –¥–ª—è —Å–æ–±—ã—Ç–∏—è "dial"
#   await _dispatch_to_all(process_bridge, body)     # –¥–ª—è —Å–æ–±—ã—Ç–∏—è "bridge"
#   await _dispatch_to_all(process_hangup, body)     # –¥–ª—è —Å–æ–±—ã—Ç–∏—è "hangup"
#
# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ FastAPI —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
#
# @app.post("/asterisk/start")
# async def asterisk_start_endpoint(request: Request):
#     body = await request.json()
#     return await _dispatch_to_all(process_start, body)
#
# @app.post("/asterisk/dial")
# async def asterisk_dial_endpoint(request: Request):
#     body = await request.json()
#     return await _dispatch_to_all(process_dial, body)
#
# @app.post("/asterisk/bridge")
# async def asterisk_bridge_endpoint(request: Request):
#     body = await request.json()
#     return await _dispatch_to_all(process_bridge, body)
#
# @app.post("/asterisk/hangup")
# async def asterisk_hangup_endpoint(request: Request):
#     body = await request.json()
#     return await _dispatch_to_all(process_hangup, body)
#
# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ü–∏–∫–ª resend_loop, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
#
# async def on_startup():
#     bot_token, tg_ids = await _get_bot_and_recipients("<–≤–∞—à-—Ç–æ–∫–µ–Ω>")
#     bot = Bot(token=bot_token)
#     for chat_id in tg_ids:
#         asyncio.create_task(create_resend_loop(dial_cache, bridge_store, active_bridges, bot, chat_id))
#
# app.add_event_handler("startup", on_startup)
```
