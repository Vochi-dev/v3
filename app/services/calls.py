# app/services/calls.py

import asyncio
import logging
from datetime import datetime
from collections import defaultdict
import phonenumbers
import re

from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.config import DB_PATH

import aiosqlite

# In-memory stores
dial_cache = {}
bridge_store = {}
active_bridges = {}

# –ò—Å—Ç–æ—Ä–∏—è hangup –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä –∑–≤–æ–Ω–∫–æ–≤
call_pair_message_map = {}
hangup_message_map = defaultdict(list)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def is_internal_number(number: str) -> bool:
    return bool(number and re.fullmatch(r"\d{3,4}", number))


def format_phone_number(phone: str) -> str:
    if not phone:
        return phone
    if is_internal_number(phone):
        return phone
    if not phone.startswith("+"):
        phone = "+" + phone
    try:
        parsed = phonenumbers.parse(phone, None)
        return phonenumbers.format_number(
            parsed,
            phonenumbers.PhoneNumberFormat.INTERNATIONAL
        )
    except Exception:
        return phone


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def update_call_pair_message(caller, callee, message_id, is_internal=False):
    if is_internal:
        key = tuple(sorted([caller, callee]))
    else:
        key = (caller,)
    call_pair_message_map[key] = message_id
    return key


def update_hangup_message_map(caller, callee, message_id,
                              is_internal=False,
                              call_status=-1, call_type=-1,
                              extensions=None):
    rec = {
        'message_id': message_id,
        'caller': caller,
        'callee': callee,
        'timestamp': datetime.now().isoformat(),
        'call_status': call_status,
        'call_type': call_type,
        'extensions': extensions or []
    }
    # –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö ‚Äî –ø–æ caller, –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö ‚Äî –ø–æ –æ–±–æ–∏–º
    hangup_message_map[caller].append(rec)
    if is_internal:
        hangup_message_map[callee].append(rec)
    # –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ –±–æ–ª–µ–µ 5
    hangup_message_map[caller] = hangup_message_map[caller][-5:]
    if is_internal:
        hangup_message_map[callee] = hangup_message_map[callee][-5:]


def get_relevant_hangup_message_id(caller, callee, is_internal=False):
    if is_internal:
        hist = hangup_message_map.get(caller, []) + hangup_message_map.get(callee, [])
    else:
        hist = hangup_message_map.get(caller, [])
    if not hist:
        return None
    hist.sort(key=lambda x: x['timestamp'], reverse=True)
    return hist[0]['message_id']


def get_last_call_info(external_number: str) -> str:
    hist = hangup_message_map.get(external_number, [])
    if not hist:
        return ""
    last = sorted(hist, key=lambda x: x['timestamp'], reverse=True)[0]
    ts = datetime.fromisoformat(last['timestamp'])
    ts = ts.replace(hour=(ts.hour + 3) % 24)  # –ø–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ GMT+3
    when = ts.strftime("%d.%m.%Y %H:%M")
    status = last['call_status']
    ctype = last['call_type']
    icon = "‚úÖ" if status == 2 else "‚ùå"
    if ctype == 0:  # –≤—Ö–æ–¥—è—â–∏–π
        return f"üõéÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π: {when}\n{icon}"
    else:  # –∏—Å—Ö–æ–¥—è—â–∏–π
        return f"‚¨ÜÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π: {when}\n{icon}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Asterisk ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def process_start(bot: Bot, chat_id: int, data: dict):
    uid = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or data.get("CallerIDNum", "") or ""
    phone = format_phone_number(raw_phone)
    exts = data.get("Extensions", [])
    is_int = data.get("CallType", 0) == 2
    callee = exts[0] if exts else ""

    if is_int:
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        text = f"üõéÔ∏è –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}"
        last = get_last_call_info(raw_phone)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_start] => chat={chat_id}, text={safe_text!r}")

    try:
        reply_id = get_relevant_hangup_message_id(raw_phone, callee, is_int)
        if reply_id:
            sent = await bot.send_message(
                chat_id, safe_text,
                reply_to_message_id=reply_id,
                parse_mode="HTML"
            )
        else:
            sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_start] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    bridge_store[uid] = sent.message_id
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    save_telegram_message(
        sent.message_id, "start", data.get("Token", ""),
        raw_phone, callee, is_int
    )
    return {"status": "sent"}


async def process_dial(bot: Bot, chat_id: int, data: dict):
    uid = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or ""
    phone = format_phone_number(raw_phone)
    exts = data.get("Extensions", [])
    call_type = int(data.get("CallType", 0))
    is_int = call_type == 2
    callee = exts[0] if exts else ""

    if uid in bridge_store:
        try:
            await bot.delete_message(chat_id, bridge_store.pop(uid))
        except:
            pass

    if is_int:
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if call_type == 1:
            text = f"‚¨ÜÔ∏è <b>–ù–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä</b>\n‚òéÔ∏è {', '.join(exts)} ‚û°Ô∏è\nüí∞ {display}"
        else:
            lines = "\n".join(f"‚òéÔ∏è {e}" for e in exts)
            text = f"üõéÔ∏è <b>–í—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä</b>\nüí∞ {display} ‚û°Ô∏è\n{lines}"
        last = get_last_call_info(raw_phone if call_type != 1 else callee)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_dial] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_dial] failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    dial_cache[uid] = {
        "caller": raw_phone,
        "extensions": exts,
        "call_type": call_type,
        "token": data.get("Token", "")
    }
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    save_telegram_message(
        sent.message_id, "dial", data.get("Token", ""),
        raw_phone, callee, is_int
    )
    return {"status": "sent"}


async def process_bridge(bot: Bot, chat_id: int, data: dict):
    uid = data.get("UniqueId", "")
    caller = data.get("CallerIDNum", "")
    connected = data.get("ConnectedLineNum", "")
    is_int = is_internal_number(caller) and is_internal_number(connected)

    if uid in dial_cache:
        dial_cache.pop(uid)
        try:
            await bot.delete_message(chat_id, bridge_store.get(uid, 0))
        except:
            pass

    if is_int:
        text = f"‚è± –ò–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n{caller} ‚û°Ô∏è {connected}"
    else:
        status = int(data.get("CallStatus", 0))
        pre = ("‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä" if status == 2 else "‚¨áÔ∏è üí¨ <b>–í—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä</b>")
        cli_f = format_phone_number(caller)
        cal_f = format_phone_number(connected)
        text = f"{pre}\n‚òéÔ∏è {cli_f} ‚û°Ô∏è üí∞ {cal_f}"
        last = get_last_call_info(connected)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_bridge] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_bridge] failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    bridge_store[uid] = sent.message_id
    update_call_pair_message(caller, connected, sent.message_id, is_int)
    update_hangup_message_map(caller, connected, sent.message_id, is_int)

    active_bridges[uid] = {
        "text": safe_text,
        "cli": caller,
        "op": connected,
        "token": data.get("Token", "")
    }

    save_telegram_message(
        sent.message_id, "bridge", data.get("Token", ""),
        caller, connected, is_int
    )
    return {"status": "sent"}


async def process_hangup(bot: Bot, chat_id: int, data: dict):
    uid = data.get("UniqueId", "")
    caller = data.get("CallerIDNum", "")
    exts = data.get("Extensions", []) or []
    connected = data.get("ConnectedLineNum", "")
    is_int = bool(exts and is_internal_number(exts[0]))
    callee = exts[0] if exts else connected or ""

    bridge_store.pop(uid, None)
    dial_cache.pop(uid, None)
    active_bridges.pop(uid, None)

    dur = ""
    try:
        start = datetime.fromisoformat(data.get("StartTime", ""))  
        end = datetime.fromisoformat(data.get("EndTime", ""))
        secs = int((end - start).total_seconds())
        dur = f"{secs//60:02}:{secs%60:02}"
    except:
        pass

    phone = format_phone_number(caller)
    display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    cs = int(data.get("CallStatus", 0))
    ct = int(data.get("CallType", 0))

    if is_int:
        m = ("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n" if cs == 2 else "‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª\n")
        m += f"{caller} ‚û°Ô∏è {callee}\n‚åõ {dur}"
    else:
        if ct == 1 and cs == 0:
            m = f"‚¨ÜÔ∏è ‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª\nüí∞ {display}"
        elif cs == 2:
            m = f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}\n‚åõ {dur}"
        else:
            m = f"‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}\n‚åõ {dur}"

    safe_text = m.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_hangup] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_hangup] failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    update_call_pair_message(caller, callee, sent.message_id, is_int)
    update_hangup_message_map(
        caller, callee, sent.message_id, is_int, cs, ct, exts
    )

    save_telegram_message(
        sent.message_id, "hangup", data.get("Token", ""),
        caller, callee, is_int
    )
    return {"status": "sent"}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _get_bot_and_recipients(asterisk_token: str) -> tuple[str, list[int]]:
    """
    –ü–æ Asterisk-Token (–ø–æ–ª–µ name2 –≤ enterprises) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - bot_token –¥–ª—è Telegram
      - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö approved telegram_id –∏–∑ enterprise_users
    """
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        # –Ω–∞—Ö–æ–¥–∏–º enterprise
        cur = await db.execute(
            "SELECT number, bot_token FROM enterprises WHERE name2 = ?",
            (asterisk_token,)
        )
        ent = await cur.fetchone()
        if not ent:
            raise HTTPException(status_code=404, detail="Unknown enterprise token")

        enterprise_id_str = ent["number"]     # —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "0201"
        bot_token = ent["bot_token"]

        # –≤—Å–µ—Ö approved –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur = await db.execute(
            """
            SELECT telegram_id
              FROM enterprise_users
             WHERE enterprise_id = ?
               AND status = 'approved'
            """,
            (enterprise_id_str,)    # –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
        )
        rows = await cur.fetchall()

    # –ø—Ä–∏–≤–æ–¥–∏–º telegram_id –∫ int
    tg_ids = [int(r["telegram_id"]) for r in rows]
    return bot_token, tg_ids
