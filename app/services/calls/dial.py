import logging
import asyncio
import aiohttp
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.services.asterisk_logs import save_asterisk_log
from app.services.metadata_client import metadata_client, extract_internal_phone_from_channel, extract_line_id_from_exten
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    dial_cache,
    bridge_store,
    bridge_store_by_chat,
    # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    get_phone_for_grouping,
    should_send_as_comment,
    should_replace_previous_message,
    update_phone_tracker,
    is_internal_number,
)

async def process_dial(bot: Bot, chat_id: int, data: dict):
    """
    –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'dial' (17.01.2025):
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ "–ü–æ—è—Å–Ω–µ–Ω–∏–µ"  
    - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–µ–Ω—è–µ—Ç start —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ Extensions
    """

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    phone_for_grouping = get_phone_for_grouping(data)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    uid = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or data.get("CallerIDNum", "") or ""
    phone = format_phone_number(raw_phone)
    exts = data.get("Extensions", [])
    call_type = int(data.get("CallType", 0))
    is_int = call_type == 2
    callee = exts[0] if exts else ""
    token = data.get("Token", "")
    trunk_info = data.get("Trunk", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    enterprise_number = token[:4] if token else "0000"  # fallback –ª–æ–≥–∏–∫–∞

    logging.info(f"[process_dial] RAW DATA = {data!r}")
    logging.info(f"[process_dial] Phone for grouping: {phone_for_grouping}, call_type: {call_type}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    should_replace, message_to_delete = should_replace_previous_message(phone_for_grouping, 'dial', chat_id)
    
    if should_replace and message_to_delete:
        try:
            await bot.delete_message(chat_id, message_to_delete)
            logging.info(f"[process_dial] Deleted previous message {message_to_delete}")
        except Exception as e:
            logging.warning(f"[process_dial] Failed to delete message {message_to_delete}: {e}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π "start"-–º–µ—Å—Å–µ–¥–∂ –∏–∑ bridge_store (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    if uid in bridge_store_by_chat[chat_id]:
        try:
            if not should_replace:  # –ï—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–∏–ª–∏ –≤—ã—à–µ, –Ω–µ —É–¥–∞–ª—è–µ–º –¥–≤–∞–∂–¥—ã
                await bot.delete_message(chat_id, bridge_store_by_chat[chat_id].pop(uid))
        except Exception:
            pass

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 2.5. –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
    line_id = extract_line_id_from_exten(trunk_info)  # ID –ª–∏–Ω–∏–∏ –∏–∑ Trunk
    internal_phone = None
    external_phone = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä–∞
    if is_int:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
        internal_phone = data.get("CallerIDNum", "") if is_internal_number(data.get("CallerIDNum", "")) else None
    else:
        # –í–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫
        external_phone = raw_phone
        
        # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä
        if exts:
            for ext in exts:
                if is_internal_number(ext):
                    internal_phone = ext
                    break
        
        if not internal_phone:
            caller_id = data.get("CallerIDNum", "")
            if is_internal_number(caller_id):
                internal_phone = caller_id
    
    # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    enriched_data = {}
    
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ü–æ—è—Å–Ω–µ–Ω–∏—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if is_int:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –§–ò–û
        callee_display = callee
        
        # –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–≤–æ–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n ‚û°Ô∏è {callee_display}"
    else:
        # –í–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä —É ‚òéÔ∏è, –≤–Ω–µ—à–Ω–∏–π —É üí∞
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        # –û–±–æ–≥–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
        if enriched_data.get("customer_name"):
            display = f"{display} ({enriched_data['customer_name']})"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä - –∏–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        internal_num = internal_phone or ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É ‚òéÔ∏è, –≤–Ω–µ—à–Ω–∏–π —É üí∞
        if internal_num:
            # –û–±–æ–≥–∞—â–∞–µ–º –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager_display = enriched_data.get("manager_name", f"–î–æ–±.{internal_num}")
            text = f"‚òéÔ∏è{manager_display} ‚û°Ô∏è üí∞{display}"
        else:
            text = f"üìû ‚û°Ô∏è üí∞{display}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
        if enriched_data.get("line_name"):
            text += f"\nüì°{enriched_data['line_name']}"
        elif trunk_info:
            text += f"\n–õ–∏–Ω–∏—è: {trunk_info}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö
        if call_type != 1:  # –ù–µ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö
            last = get_last_call_info(raw_phone)
            if last:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ó–≤–æ–Ω–∏–ª: X —Ä–∞–∑, –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: –¥–∞—Ç–∞"
                text += f"\n{last}"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º html-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.info(f"[process_dial] => chat={chat_id}, text={safe_text!r}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    should_comment, reply_to_id = should_send_as_comment(phone_for_grouping, 'dial', chat_id)
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if should_replace and message_to_delete:
        should_comment = False
        reply_to_id = None
        logging.info(f"[process_dial] Previous message was deleted, sending as standalone message")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    try:
        if should_comment and reply_to_id:
            logging.info(f"[process_dial] Sending as comment to message {reply_to_id}")
            sent = await bot.send_message(
                chat_id,
                safe_text,
                reply_to_message_id=reply_to_id,
                parse_mode="HTML"
            )
        else:
            sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
            
    except BadRequest as e:
        logging.error(f"[process_dial] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dial_cache ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    dial_cache[uid] = {
        "caller":     raw_phone,
        "extensions": exts,
        "call_type":  call_type,
        "token":      token
    }

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int, chat_id)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int, chat_id=chat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    update_phone_tracker(phone_for_grouping, sent.message_id, 'dial', data, chat_id)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    await save_telegram_message(
        sent.message_id,
        "dial",
        token,
        raw_phone,
        callee,
        is_int
    )

    logging.info(f"[process_dial] Successfully sent dial message {sent.message_id} for {phone_for_grouping}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 9. Fire-and-forget –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Integration Gateway (8020) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    try:
        token_for_gateway = token
        unique_id_for_gateway = uid
        event_type_for_gateway = "dial"

        async def _dispatch_to_gateway():
            try:
                payload = {
                    "token": token_for_gateway,
                    "uniqueId": unique_id_for_gateway,
                    "event_type": event_type_for_gateway,
                    "raw": data,
                }
                timeout = aiohttp.ClientTimeout(total=2)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    logging.info(f"[process_dial] gateway dispatch start: uid={unique_id_for_gateway} type={event_type_for_gateway}")
                    resp = await session.post(
                        "http://localhost:8020/dispatch/call-event",
                        json=payload,
                    )
                    try:
                        logging.info(f"[process_dial] gateway dispatch done: uid={unique_id_for_gateway} status={resp.status}")
                    except Exception:
                        pass
            except Exception as e:
                logging.warning(f"[process_dial] gateway dispatch error: {e}")

        asyncio.create_task(_dispatch_to_gateway())

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, U‚ÄëON) —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è
        # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ 8020 –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ —à–ª—é–∑–∞. –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —à–ª—ë–º,
        # —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ª–æ–≥–∏–∫—É retail –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
    except Exception as e:
        logging.warning(f"[process_dial] failed to schedule gateway dispatch: {e}")

    return {"status": "sent", "message_id": sent.message_id}
