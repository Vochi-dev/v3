import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    dial_cache,
    bridge_store,
)

async def process_dial(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Asterisk-—Å–æ–±—ã—Ç–∏–µ 'dial':
    ‚Äî —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ 'start'-—Å–æ–æ–±—â–µ–Ω–∏–µ,
    ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç,
    ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç–∏ –∏ –ë–î.
    """
    uid       = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or ""
    phone     = format_phone_number(raw_phone)
    exts      = data.get("Extensions", [])
    call_type = int(data.get("CallType", 0))
    is_int    = call_type == 2
    callee    = exts[0] if exts else ""

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π —Å—Ç–∞—Ä—Ç
    if uid in bridge_store:
        try:
            await bot.delete_message(chat_id, bridge_store.pop(uid))
        except Exception:
            pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if is_int:
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if call_type == 1:
            text = (
                f"‚¨ÜÔ∏è <b>–ù–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä</b>\n"
                f"‚òéÔ∏è {', '.join(exts)} ‚û°Ô∏è\n"
                f"üí∞ {display}"
            )
        else:
            lines = "\n".join(f"‚òéÔ∏è {e}" for e in exts)
            text  = (
                f"üõéÔ∏è <b>–í—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä</b>\n"
                f"üí∞ {display} ‚û°Ô∏è\n"
                f"{lines}"
            )
        last = get_last_call_info(raw_phone if call_type != 1 else callee)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_dial] => chat={chat_id}, text={safe_text!r}")

    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_dial] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
    dial_cache[uid] = {
        "caller":     raw_phone,
        "extensions": exts,
        "call_type":  call_type,
        "token":      data.get("Token", "")
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_telegram_message(
        sent.message_id,
        "dial",
        data.get("Token", ""),
        raw_phone,
        callee,
        is_int
    )

    return {"status": "sent"}
