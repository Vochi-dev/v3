import logging
import json
import hashlib
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.services.asterisk_logs import save_asterisk_log
from app.services.postgres import get_pool
from .utils import format_phone_number, delete_previous_messages, escape_html

async def get_phone_statistics(phone_number: str, enterprise_id: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã calls
    """
    pool = await get_pool()
    if not pool:
        return {"total_calls": 0, "successful_calls": 0, "last_call": "", "first_call": ""}
    
    try:
        async with pool.acquire() as conn:
            query = """
                SELECT 
                    COUNT(*) as total_calls,
                    COUNT(CASE WHEN call_status = '2' THEN 1 END) as successful_calls,
                    MAX(timestamp) as last_call_time,
                    MIN(timestamp) as first_call_time
                FROM calls 
                WHERE phone_number = $1 AND enterprise_id = $2
                GROUP BY phone_number
            """
            result = await conn.fetchrow(query, phone_number, enterprise_id)
            
            if result:
                last_call = result['last_call_time'].strftime("%d.%m.%Y –≤ %H:%M") if result['last_call_time'] else ""
                first_call = result['first_call_time'].strftime("%d.%m.%Y") if result['first_call_time'] else ""
                
                return {
                    'total_calls': result['total_calls'],
                    'successful_calls': result['successful_calls'],
                    'last_call': last_call,
                    'first_call': first_call
                }
            else:
                return {"total_calls": 1, "successful_calls": 0, "last_call": "", "first_call": ""}
                
    except Exception as e:
        logging.error(f"Error getting phone statistics for {phone_number}: {e}")
        return {"total_calls": 0, "successful_calls": 0, "last_call": "", "first_call": ""}

async def get_line_info(trunk: str, enterprise_id: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã gsm_lines
    """
    pool = await get_pool()
    if not pool:
        return {"line_name": trunk, "phone_number": ""}
    
    try:
        async with pool.acquire() as conn:
            query = """
                SELECT line_name, phone_number 
                FROM gsm_lines 
                WHERE line_id = $1 AND enterprise_number = $2
                LIMIT 1
            """
            result = await conn.fetchrow(query, trunk, enterprise_id)
            
            if result and (result['line_name'] or result['phone_number']):
                return {
                    'line_name': result['line_name'] or trunk,
                    'phone_number': result['phone_number'] or ""
                }
            else:
                return {"line_name": trunk, "phone_number": ""}
                
    except Exception as e:
        logging.error(f"Error getting line info for {trunk}: {e}")
        return {"line_name": trunk, "phone_number": ""}

async def get_call_events(unique_id: str) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    pool = await get_pool()
    if not pool:
        return []
    
    try:
        async with pool.acquire() as conn:
            query = """
                SELECT event_type, raw_data, event_timestamp
                FROM call_events 
                WHERE unique_id = $1
                ORDER BY event_timestamp ASC
            """
            rows = await conn.fetch(query, unique_id)
            
            events = []
            for row in rows:
                events.append({
                    'event_type': row['event_type'],
                    'data': json.loads(row['raw_data']),
                    'timestamp': row['event_timestamp']
                })
            
            return events
            
    except Exception as e:
        logging.error(f"Error getting call events for {unique_id}: {e}")
        return []

async def find_related_calls(unique_id: str, phone_number: str, enterprise_id: str, timestamp: datetime) -> list:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ ¬±60 —Å–µ–∫—É–Ω–¥
    """
    pool = await get_pool()
    if not pool:
        return [unique_id]
    
    try:
        async with pool.acquire() as conn:
            # –ò—â–µ–º –∑–≤–æ–Ω–∫–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ ¬±60 —Å–µ–∫—É–Ω–¥ —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
            query = """
                SELECT unique_id, timestamp
                FROM calls 
                WHERE phone_number = $1 
                  AND enterprise_id = $2
                  AND ABS(EXTRACT(EPOCH FROM (timestamp - $3))) <= 60
                ORDER BY timestamp
            """
            rows = await conn.fetch(query, phone_number, enterprise_id, timestamp)
            
            related_ids = [row['unique_id'] for row in rows]
            return related_ids if related_ids else [unique_id]
            
    except Exception as e:
        logging.error(f"Error finding related calls for {unique_id}: {e}")
        return [unique_id]

def format_message_template(call_data: dict, stats: dict, line_info: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω–∞–º –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏–µ.txt
    """
    call_type = int(call_data.get('CallType', 0))
    call_status = int(call_data.get('CallStatus', 0))
    phone = escape_html(call_data.get('Phone', ''))
    extensions = call_data.get('Extensions', [])
    start_time = escape_html(call_data.get('StartTime', ''))
    end_time = escape_html(call_data.get('EndTime', ''))
    trunk = escape_html(call_data.get('Trunk', ''))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    formatted_phone = format_phone_number(phone)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration = ""
    if start_time and end_time:
        try:
            start = datetime.fromisoformat(start_time)
            end = datetime.fromisoformat(end_time)
            total_seconds = int((end - start).total_seconds())
            duration = f"{total_seconds//60:02}:{total_seconds%60:02}"
        except:
            duration = "00:00"
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞
    call_start_time = ""
    if start_time:
        try:
            start = datetime.fromisoformat(start_time)
            call_start_time = start.strftime("%H:%M")
        except:
            call_start_time = ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–Ω–∏—é
    line_display = line_info['line_name']
    if line_info['phone_number']:
        line_display = f"{line_info['phone_number']} {line_info['line_name']}"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
    stats_text = ""
    if stats['total_calls'] > 1:
        stats_text = f"–ó–≤–æ–Ω–∏–ª: {stats['total_calls']} —Ä–∞–∑\n"
        if stats['last_call']:
            stats_text += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {stats['last_call']}\n"
    
    # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ó–í–û–ù–ö–ò (CallType = 2)
    if call_type == 2:
        caller = phone or extensions[0] if extensions else ""
        callee = extensions[0] if extensions else ""
        
        if call_status == 2:  # –£—Å–ø–µ—à–Ω—ã–π
            return f"""‚úÖ–£—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
‚òéÔ∏è{caller}‚û°Ô∏è ‚òéÔ∏è{callee}
‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}
üîâ–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        else:  # –ù–µ—É—Å–ø–µ—à–Ω—ã–π
            return f"""‚ùå –ö–æ–ª–ª–µ–≥–∞ –Ω–µ –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É
‚òéÔ∏è{caller}‚û°Ô∏è ‚òéÔ∏è{callee}
‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–æ–∑–≤–∞–Ω–∏–≤–∞–ª–∏—Å—å: {duration}"""
    
    # –í–•–û–î–Ø–©–ò–ï –ó–í–û–ù–ö–ò (CallType = 0)
    elif call_type == 0:
        if call_status == 2:  # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π
            answered_by = ""
            if extensions:
                answered_by = f"‚òéÔ∏è{extensions[0]}"
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –ë–î
                
            return f"""‚úÖ–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
üí∞{formatted_phone}
{answered_by}
–õ–∏–Ω–∏—è: {line_display}
{stats_text}‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}
üîâ–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        else:  # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π
            ext_list = ""
            if extensions:
                ext_list = "\n".join([f"‚òéÔ∏è{ext}" for ext in extensions])
                if len(extensions) > 1:
                    ext_list = "\n" + ext_list
            
            return f"""‚ùå –ú—ã –Ω–µ –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É
üí∞{formatted_phone}{ext_list}
–õ–∏–Ω–∏—è: {line_display}
{stats_text}‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–æ–∑–≤–∞–Ω–∏–≤–∞–ª–∏—Å—å: {duration}"""
    
    # –ò–°–•–û–î–Ø–©–ò–ï –ó–í–û–ù–ö–ò (CallType = 1) 
    elif call_type == 1:
        caller_ext = extensions[0] if extensions else ""
        
        if call_status == 2:  # –£—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π
            return f"""‚úÖ–£—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
‚òéÔ∏è{caller_ext}
üí∞{formatted_phone}
–õ–∏–Ω–∏—è: {line_display}
{stats_text}‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}
üîâ–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        else:  # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π
            return f"""‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É
‚òéÔ∏è{caller_ext}
üí∞{formatted_phone}
–õ–∏–Ω–∏—è: {line_display}
{stats_text}‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–æ–∑–≤–∞–Ω–∏–≤–∞–ª–∏—Å—å: {duration}"""
    
    # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
    return f"""‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫
üí∞{formatted_phone}
‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {call_start_time}
‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"""

async def create_call_record(unique_id: str, token: str, data: dict, uuid_token: str = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ calls –¥–ª—è hangup —Å–æ–±—ã—Ç–∏—è
    """
    pool = await get_pool()
    if not pool:
        logging.error("PostgreSQL pool not available for creating call record")
        return None
    
    try:
        async with pool.acquire() as connection:
            # –ü–æ–ª—É—á–∞–µ–º enterprise_id –ø–æ —Ç–æ–∫–µ–Ω—É
            enterprise_query = """
                SELECT number FROM enterprises 
                WHERE name2 = $1 OR secret = $1
                LIMIT 1
            """
            enterprise_result = await connection.fetchrow(enterprise_query, token)
            enterprise_id = enterprise_result['number'] if enterprise_result else token[:4]
            
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–æ–∫–µ–Ω–∞
            hashed_token = hashlib.md5(token.encode()).hexdigest()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            phone_number = escape_html(data.get('Phone', data.get('CallerIDNum', '')))
            start_time_str = escape_html(data.get('StartTime', ''))
            end_time_str = escape_html(data.get('EndTime', ''))
            call_status = str(data.get('CallStatus', '0'))
            call_type = str(data.get('CallType', '0'))
            trunk = escape_html(data.get('Trunk', ''))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º duration
            duration = 0
            if start_time_str and end_time_str:
                try:
                    start_time = datetime.fromisoformat(start_time_str)
                    end_time = datetime.fromisoformat(end_time_str)
                    duration = int((end_time - start_time).total_seconds())
                except:
                    pass
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ calls
            insert_query = """
                INSERT INTO calls (
                    unique_id, token, enterprise_id, phone_number, trunk,
                    call_status, call_type, duration, start_time, end_time,
                    timestamp, data_source, raw_data, created_at
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
                ON CONFLICT (unique_id) DO UPDATE SET
                    call_status = EXCLUDED.call_status,
                    end_time = EXCLUDED.end_time,
                    duration = EXCLUDED.duration,
                    raw_data = EXCLUDED.raw_data
                RETURNING id
            """
            
            timestamp = datetime.fromisoformat(start_time_str) if start_time_str else datetime.now()
            start_time_dt = datetime.fromisoformat(start_time_str) if start_time_str else None
            end_time_dt = datetime.fromisoformat(end_time_str) if end_time_str else None
            
            result = await connection.fetchrow(
                insert_query,
                unique_id, hashed_token, enterprise_id, phone_number, trunk,
                call_status, call_type, duration, start_time_dt, end_time_dt,
                timestamp, 'live', json.dumps(data), datetime.now()
            )
            
            if result:
                call_id = result['id']
                logging.info(f"Created/updated call record id={call_id} for {unique_id}")
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                update_query = """
                    UPDATE call_events 
                    SET processed = true 
                    WHERE unique_id = $1 AND event_type = 'hangup'
                """
                await connection.execute(update_query, unique_id)
                
                return call_id
                
    except Exception as e:
        logging.error(f"Error creating call record for {unique_id}: {e}")
        return None

async def process_hangup_v2(bot: Bot, chat_id: int, data: dict):
    """
    –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ hangup —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏–µ.txt
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ HANGUP —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)
    
    uid = data.get("UniqueId", "")
    token = data.get("Token", "")
    phone = escape_html(data.get("Phone", "") or data.get("CallerIDNum", ""))
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ unique_id (START/DIAL/BRIDGE)
    deleted = await delete_previous_messages(bot, chat_id, uid)
    logging.info(f"[process_hangup_v2] Deleted {len(deleted)} previous messages for {uid}")
    
    if not uid or not token:
        logging.error(f"Missing required fields: UniqueId={uid}, Token={token}")
        return {"status": "error", "error": "Missing required fields"}
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ calls
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π UUID —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –≤–æ –≤—Å–µ—Ö chat_id)
    shared_uuid = data.get("_shared_uuid_token", None)
    call_id = await create_call_record(uid, token, data, shared_uuid)
    
    # –ü–æ–ª—É—á–∞–µ–º enterprise_id
    pool = await get_pool()
    enterprise_id = token[:4]  # fallback
    if pool:
        try:
            async with pool.acquire() as conn:
                enterprise_query = "SELECT number FROM enterprises WHERE name2 = $1 OR secret = $1 LIMIT 1"
                enterprise_result = await conn.fetchrow(enterprise_query, token)
                if enterprise_result:
                    enterprise_id = enterprise_result['number']
        except Exception as e:
            logging.error(f"Error getting enterprise_id: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤
    stats = await get_phone_statistics(phone, enterprise_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏
    trunk = escape_html(data.get('Trunk', ''))
    line_info = await get_line_info(trunk, enterprise_id)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (–¥–ª—è –±—É–¥—É—â–µ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
    timestamp = datetime.now()
    if data.get('StartTime'):
        try:
            timestamp = datetime.fromisoformat(data['StartTime'])
        except:
            pass
    
    related_calls = await find_related_calls(uid, phone, enterprise_id, timestamp)
    logging.info(f"Found {len(related_calls)} related calls for {uid}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
    message_text = format_message_template(data, stats, line_info)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    safe_text = message_text.replace("<", "&lt;").replace(">", "&gt;")
    
    logging.info(f"[process_hangup_v2] => chat={chat_id}, text preview: {safe_text[:100]}...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º caller/callee –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        call_type_int = int(data.get("CallType", 0))
        extensions = data.get("Extensions", [])
        
        if call_type_int == 2:  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
            caller = phone or (extensions[0] if extensions else "")
            callee = extensions[1] if len(extensions) > 1 else ""
            is_internal = True
        elif call_type_int == 1:  # –∏—Å—Ö–æ–¥—è—â–∏–π
            caller = extensions[0] if extensions else ""
            callee = phone
            is_internal = False
        else:  # –≤—Ö–æ–¥—è—â–∏–π
            caller = phone
            callee = extensions[0] if extensions else ""
            is_internal = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (HANGUP –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ V2 –ø–∞–º—è—Ç–∏!)
        await save_telegram_message(
            message_id=sent.message_id,
            event_type="hangup_v2",
            token=token,
            caller=caller,
            callee=callee,
            is_internal=is_internal,
            call_status=int(data.get("CallStatus", 0)),
            call_type=call_type_int
        )
        
        logging.info(f"Successfully sent hangup_v2 message {sent.message_id} to chat {chat_id}")
        return {"status": "sent", "message_id": sent.message_id}
        
    except BadRequest as e:
        logging.error(f"[process_hangup_v2] send_message failed: {e}. text preview: {safe_text[:200]}...")
        return {"status": "error", "error": str(e)}
    except Exception as e:
        logging.error(f"[process_hangup_v2] unexpected error: {e}")
        return {"status": "error", "error": str(e)} 