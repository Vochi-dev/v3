import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.services.asterisk_logs import save_asterisk_log
from .utils import format_phone_number, delete_previous_messages, save_v2_message, escape_html

async def process_dial_v2(bot: Bot, chat_id: int, data: dict):
    """
    –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ dial - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram,
    —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ unique_id.
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏–µ.txt: "–ö–∞–∂–¥–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ"
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    await save_asterisk_log(data)
    
    uid = data.get("UniqueId", "")
    token = data.get("Token", "")
    raw_phone = escape_html(data.get("Phone", "") or data.get("CallerIDNum", "") or "")
    extensions = data.get("Extensions", [])
    call_type = int(data.get("CallType", 0))
    trunk = escape_html(data.get("Trunk", ""))
    
    logging.info(f"[process_dial_v2] DIAL event: uid={uid}, phone={raw_phone}, extensions={extensions}, call_type={call_type}")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ unique_id
    deleted = await delete_previous_messages(bot, chat_id, uid)
    logging.info(f"[process_dial_v2] Deleted {len(deleted)} previous messages for {uid}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    formatted_phone = format_phone_number(raw_phone) if raw_phone else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ DIAL —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏–µ.txt
    if call_type == 0:  # –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        if len(extensions) == 1:
            message_lines = [
                f"üí∞{formatted_phone} ‚û°Ô∏è",
                f"‚òéÔ∏è{extensions[0]}",
                f"–õ–∏–Ω–∏—è: {trunk}",
                "üìû –ó–≤–æ–Ω–æ–∫ –ø–æ—Å—Ç—É–ø–∏–ª..."
            ]
        else:
            ext_lines = [f"‚òéÔ∏è{ext}" for ext in extensions]
            message_lines = [
                f"üí∞{formatted_phone} ‚û°Ô∏è"
            ] + ext_lines + [
                f"–õ–∏–Ω–∏—è: {trunk}",
                "üìû –ì—Ä—É–ø–ø–æ–≤–æ–π –≤—ã–∑–æ–≤..."
            ]
    else:  # –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        if extensions:
            message_lines = [
                f"‚òéÔ∏è{extensions[0]} ‚û°Ô∏è üí∞{formatted_phone}",
                f"–õ–∏–Ω–∏—è: {trunk}",
                "üìû –ù–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä..."
            ]
        else:
            message_lines = [
                f"üìû ‚û°Ô∏è üí∞{formatted_phone}",
                f"–õ–∏–Ω–∏—è: {trunk}",
                "üìû –ù–∞–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä..."
            ]
    
    message_text = "\n".join(message_lines)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        tg_message = await bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode="HTML"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º caller/callee –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
        if call_type == 0:  # –≤—Ö–æ–¥—è—â–∏–π
            caller = raw_phone
            callee = extensions[0] if extensions else ""
        else:  # –∏—Å—Ö–æ–¥—è—â–∏–π
            caller = extensions[0] if extensions else ""
            callee = raw_phone
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        await save_telegram_message(
            message_id=tg_message.message_id,
            event_type="dial_v2",
            token=token,
            caller=caller,
            callee=callee,
            is_internal=(call_type == 2),
            call_status=-1,  # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
            call_type=call_type
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è V2 –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        save_v2_message(uid, chat_id, tg_message.message_id, "dial_v2")
        
        logging.info(f"[process_dial_v2] Sent DIAL message {tg_message.message_id} to chat {chat_id}")
        return {"status": "sent", "message_id": tg_message.message_id, "deleted_previous": len(deleted)}
        
    except Exception as e:
        logging.error(f"[process_dial_v2] Failed to send DIAL message: {e}")
        raise e 