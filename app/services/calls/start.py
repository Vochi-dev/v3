import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.services.asterisk_logs import save_asterisk_log
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    bridge_store,
    bridge_store_by_chat,
    # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    get_phone_for_grouping,
    should_send_as_comment,
    should_replace_previous_message,
    update_phone_tracker,
)

async def process_start(bot: Bot, chat_id: int, data: dict):
    """
    –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'start' (17.01.2025):
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ "–ü–æ—è—Å–Ω–µ–Ω–∏–µ"
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    """

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    phone_for_grouping = get_phone_for_grouping(data)
    
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 1. –í—ã–≤–æ–¥ –≤ stdout –≤—Å–µ–≥–æ payload ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    logging.info(f"[process_start] RAW DATA = {data!r}")
    logging.info(f"[process_start] Phone for grouping: {phone_for_grouping}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    uid = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or ""
    phone = format_phone_number(raw_phone)
    exts = data.get("Extensions", [])
    call_type = int(data.get("CallType", 0))
    is_int = call_type == 2
    callee = exts[0] if exts else ""
    token = data.get("Token", "")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ü–æ—è—Å–Ω–µ–Ω–∏—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if is_int:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ—é—Ç start —Å–æ–±—ã—Ç–∏—è
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        # –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏—è
        display = phone if (phone and not phone.startswith("+000")) else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        # –ë–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è start —Å–æ–±—ã—Ç–∏—è
        text = f"üí∞{display} ‚û°Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å Token
        if token:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
            trunk_info = data.get("Trunk", "")
            if trunk_info:
                text += f"\n–õ–∏–Ω–∏—è: {trunk_info}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤
        last = get_last_call_info(raw_phone)
        if last:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "–ó–≤–æ–Ω–∏–ª: X —Ä–∞–∑"
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–ª—É—á—à–∏—Ç—å
            text += f"\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 3a. –í—ã–≤–æ–¥–∏–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    logging.info(f"[process_start] => chat={chat_id}, text={safe_text!r}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    should_comment, reply_to_id = should_send_as_comment(phone_for_grouping, 'start', chat_id)
    
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    try:
        if should_comment and reply_to_id:
            logging.info(f"[process_start] Sending as comment to message {reply_to_id}")
            sent = await bot.send_message(
                chat_id,
                safe_text,
                reply_to_message_id=reply_to_id,
                parse_mode="HTML"
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É reply_to –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            reply_id = get_relevant_hangup_message_id(raw_phone, callee, is_int, chat_id)
            if reply_id and not should_comment:
                sent = await bot.send_message(
                    chat_id,
                    safe_text,
                    reply_to_message_id=reply_id,
                    parse_mode="HTML"
                )
            else:
                sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_start] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    bridge_store_by_chat[chat_id][uid] = sent.message_id
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int, chat_id)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int, chat_id=chat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    update_phone_tracker(phone_for_grouping, sent.message_id, 'start', data, chat_id)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    await save_telegram_message(
        sent.message_id,
        "start",
        token,
        raw_phone,
        callee,
        is_int
    )

    logging.info(f"[process_start] Successfully sent start message {sent.message_id} for {phone_for_grouping}")
    return {"status": "sent", "message_id": sent.message_id}
