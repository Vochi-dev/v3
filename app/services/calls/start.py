import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    bridge_store,
)

async def process_start(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Asterisk-—Å–æ–±—ã—Ç–∏–µ 'start':
    ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç,
    ‚Äî –∏—â–µ—Ç reply-to –ø–æ hangup-–∏—Å—Ç–æ—Ä–∏–∏,
    ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ,
    ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç state –∏ –≤ –ë–î.
    """
    uid       = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or data.get("CallerIDNum", "") or ""
    phone     = format_phone_number(raw_phone)
    exts      = data.get("Extensions", [])
    is_int    = data.get("CallType", 0) == 2
    callee    = exts[0] if exts else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if is_int:
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        text    = f"üõéÔ∏è –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}"
        last    = get_last_call_info(raw_phone)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_start] => chat={chat_id}, text={safe_text!r}")

    try:
        reply_id = get_relevant_hangup_message_id(raw_phone, callee, is_int)
        if reply_id:
            sent = await bot.send_message(
                chat_id, safe_text,
                reply_to_message_id=reply_id,
                parse_mode="HTML"
            )
        else:
            sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_start] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
    bridge_store[uid] = sent.message_id
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_telegram_message(
        sent.message_id,
        "start",
        data.get("Token", ""),
        raw_phone,
        callee,
        is_int
    )

    return {"status": "sent"}
