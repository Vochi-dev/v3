import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    bridge_store,
)

async def process_start(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ Asterisk 'start' (–Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞):
      1. –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ (DEBUG), —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, –ø–æ–¥ –∫–∞–∫–∏–º –∫–ª—é—á–æ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–º–µ—Ä.
      2. –ò–∑–≤–ª–µ–∫–∞–µ–º UniqueId –∏ —Ç–µ–ª–µ—Ñ–æ–Ω (raw_phone) ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–ª—é—á "Phone".
      3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ ‚Äî —Å—Ç—Ä–µ–ª–∫–∞ –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–∞–º–∏;
         –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∑–≤–æ–Ω–∫–µ.
      4. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã '<' –∏ '>' –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTML.
      5. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ hangup-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reply_to (—á–µ—Ä–µ–∑ get_relevant_hangup_message_id).
      6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (—Å reply_to, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ).
      7. –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ bridge_store, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
         ‚Ä¢ call_pair_message_map (—á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –º–æ–∂–Ω–æ –±—ã–ª–æ reply-to),
         ‚Ä¢ hangup_message_map (–∏—Å—Ç–æ—Ä–∏—è hangup).
      8. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ë–î (await save_telegram_message).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"status": "sent"} –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ {"status": "error", "error": ...} –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 1. –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å payload, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ—á–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    logging.debug(f"[process_start] RAW DATA = {data!r}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ raw_phone –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    uid = data.get("UniqueId", "")
    # –í –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–±—ã—Ç–∏—è start –∫–ª—é—á —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Phone"
    raw_phone = data.get("Phone", "") or ""
    phone = format_phone_number(raw_phone)

    exts = data.get("Extensions", [])  # –û–±—ã—á–Ω–æ –ø—É—Å—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è start
    is_int = data.get("CallType", 0) == 2
    callee = exts[0] if exts else ""

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if is_int:
        # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫ (CallType == 2), –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        # –í–Ω–µ—à–Ω–∏–π –∑–≤–æ–Ω–æ–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ +000... (–Ω–æ–º–µ—Ä –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω), –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        display = phone if (phone and not phone.startswith("+000")) else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        text = f"üõéÔ∏è –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        last = get_last_call_info(raw_phone)
        if last:
            text += f"\n\n{last}"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã '<' –∏ '>' –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTML
    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_start] => chat={chat_id}, text={safe_text!r}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 4. –ò—â–µ–º reply_to –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    try:
        reply_id = get_relevant_hangup_message_id(raw_phone, callee, is_int)
        if reply_id:
            sent = await bot.send_message(
                chat_id,
                safe_text,
                reply_to_message_id=reply_id,
                parse_mode="HTML"
            )
        else:
            sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_start] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 5. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    bridge_store[uid] = sent.message_id
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    await save_telegram_message(
        sent.message_id,
        "start",
        data.get("Token", ""),
        raw_phone,
        callee,
        is_int
    )

    return {"status": "sent"}
