import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    bridge_store,
)

async def process_start(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ Asterisk 'start' (–Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞):
      1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç UniqueId, —Ç–µ–ª–µ—Ñ–æ–Ω (raw_phone), –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ª–∏ –∑–≤–æ–Ω–æ–∫.
      2. –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ ‚Äî —Å—Ç—Ä–µ–ª–∫–∞ –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–∞–º–∏;
         –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∑–≤–æ–Ω–∫–µ.
      3. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã '<' –∏ '>' –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTML.
      4. –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ hangup-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reply_to (—á–µ—Ä–µ–∑ get_relevant_hangup_message_id).
      5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (—Å reply_to, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ).
      6. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ bridge_store, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
         ‚Ä¢ call_pair_message_map (—á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –º–æ–∂–Ω–æ –±—ã–ª–æ reply-to),
         ‚Ä¢ hangup_message_map (–∏—Å—Ç–æ—Ä–∏—è hangup).
      7. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ë–î (await save_telegram_message).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"status": "sent"} –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ {"status": "error", "error": ...} –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    uid       = data.get("UniqueId", "")
    raw_phone = data.get("Phone", "") or data.get("CallerIDNum", "") or ""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π, –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
    phone     = format_phone_number(raw_phone)
    exts      = data.get("Extensions", [])
    # CallType == 2 –æ–∑–Ω–∞—á–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
    is_int    = data.get("CallType", 0) == 2
    # Callee ‚Äî –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ Extensions, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç
    callee    = exts[0] if exts else ""

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if is_int:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –º–µ–∂–¥—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        text = f"üõéÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n{raw_phone} ‚û°Ô∏è {callee}"
    else:
        # –í–Ω–µ—à–Ω–∏–π –≤—Ö–æ–¥—è—â–∏–π: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º LastCallInfo (–µ—Å–ª–∏ –µ—Å—Ç—å)
        display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        text    = f"üõéÔ∏è –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\nüí∞ {display}"
        # –ï—Å–ª–∏ –±—ã–ª–∞ –∏—Å—Ç–æ—Ä–∏—è hangup –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        last    = get_last_call_info(raw_phone)
        if last:
            text += f"\n\n{last}"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã '<' –∏ '>' –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_start] => chat={chat_id}, text={safe_text!r}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ reply_to –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    try:
        # –ò—â–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ hangup-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reply_to
        reply_id = get_relevant_hangup_message_id(raw_phone, callee, is_int)
        if reply_id:
            sent = await bot.send_message(
                chat_id,
                safe_text,
                reply_to_message_id=reply_id,
                parse_mode="HTML"
            )
        else:
            sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_start] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ bridge_store, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∑–Ω–∞—Ç—å, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å
    bridge_store[uid] = sent.message_id
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã caller‚Äìcallee –∏ hangup-–∏—Å—Ç–æ—Ä–∏—é
    update_call_pair_message(raw_phone, callee, sent.message_id, is_int)
    update_hangup_message_map(raw_phone, callee, sent.message_id, is_int)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º await, —á—Ç–æ–±—ã –∫–æ—Ä—É—Ç–∏–Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    await save_telegram_message(
        sent.message_id,
        "start",
        data.get("Token", ""),
        raw_phone,
        callee,
        is_int
    )

    return {"status": "sent"}
