import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.services.asterisk_logs import save_asterisk_log
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    get_last_call_info,
    update_call_pair_message,
    update_hangup_message_map,
    dial_cache,
    bridge_store,
    active_bridges,
)

async def process_bridge(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Asterisk-—Å–æ–±—ã—Ç–∏–µ 'bridge':
    ‚Äî —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π dial (–µ—Å–ª–∏ –µ—Å—Ç—å),
    ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç,
    ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ active_bridges –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏,
    ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)

    uid       = data.get("UniqueId", "")
    caller    = data.get("CallerIDNum", "")
    connected = data.get("ConnectedLineNum", "")
    is_int    = caller.isdigit() and len(caller) <= 4 and connected.isdigit() and len(connected) <= 4

    # –£–¥–∞–ª—è–µ–º dial-—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    if uid in dial_cache:
        dial_cache.pop(uid)
        try:
            await bot.delete_message(chat_id, bridge_store.get(uid, 0))
        except Exception:
            pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if is_int:
        text = f"‚è± –ò–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n{caller} ‚û°Ô∏è {connected}"
    else:
        status = int(data.get("CallStatus", 0))
        pre    = "‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä" if status == 2 else "‚¨áÔ∏è üí¨ <b>–í—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä</b>"
        cli    = format_phone_number(caller)
        cal    = format_phone_number(connected)
        text   = f"{pre}\n‚òéÔ∏è {cli} ‚û°Ô∏è üí∞ {cal}"
        last   = get_last_call_info(connected)
        if last:
            text += f"\n\n{last}"

    safe_text = text.replace("<", "&lt;").replace(">", "&gt;")
    logging.debug(f"[process_bridge] => chat={chat_id}, text={safe_text!r}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    try:
        sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
    except BadRequest as e:
        logging.error(f"[process_bridge] send_message failed: {e}. text={safe_text!r}")
        return {"status": "error", "error": str(e)}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é
    bridge_store[uid] = sent.message_id
    update_call_pair_message(caller, connected, sent.message_id, is_int)
    update_hangup_message_map(caller, connected, sent.message_id, is_int)

    # –¢—Ä–µ–∫–µ—Ä –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –º–æ—Å—Ç–æ–≤ –¥–ª—è resend-loop
    active_bridges[uid] = {
        "text": safe_text,
        "cli":  caller,
        "op":   connected,
        "token": data.get("Token", "")
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_telegram_message(
        sent.message_id,
        "bridge",
        data.get("Token", ""),
        caller,
        connected,
        is_int
    )

    return {"status": "sent"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AMI-—Å–∫—Ä–∏–ø—Ç–∞ (17.01.2025)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def process_bridge_create(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ BridgeCreate - —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ—Å—Ç–∞ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–æ –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)
    
    uid = data.get("UniqueId", "")
    bridge_id = data.get("BridgeUniqueid", "")
    bridge_type = data.get("BridgeType", "")
    
    logging.info(f"[process_bridge_create] BridgeCreate: uid={uid}, bridge_id={bridge_id}, type={bridge_type}")
    
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await save_telegram_message(
        message_id=0,  # –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        event_type="bridge_create",
        token=data.get("Token", ""),
        caller=data.get("CallerIDNum", ""),
        callee=data.get("ConnectedLineNum", ""),
        is_internal=False,
        call_status=-1
    )
    
    return {"status": "logged"}

async def process_bridge_leave(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ BridgeLeave - —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –º–æ—Å—Ç.
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –º–æ—Å—Ç–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)
    
    uid = data.get("UniqueId", "")
    bridge_id = data.get("BridgeUniqueid", "")
    channel = data.get("Channel", "")
    
    logging.info(f"[process_bridge_leave] BridgeLeave: uid={uid}, bridge_id={bridge_id}, channel={channel}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º active_bridges - —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –º–æ—Å—Ç –ø—É—Å—Ç–µ–µ—Ç
    if uid in active_bridges:
        logging.info(f"[process_bridge_leave] Removing bridge tracking for {uid}")
        active_bridges.pop(uid, None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await save_telegram_message(
        message_id=0,  # –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        event_type="bridge_leave", 
        token=data.get("Token", ""),
        caller=data.get("CallerIDNum", ""),
        callee=data.get("ConnectedLineNum", ""),
        is_internal=False,
        call_status=-1
    )
    
    return {"status": "logged"}

async def process_bridge_destroy(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ BridgeDestroy - —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ—Å—Ç–∞.
    –û—á–∏—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ—Å—Ç–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)
    
    bridge_id = data.get("BridgeUniqueid", "")
    bridge_type = data.get("BridgeType", "")
    
    logging.info(f"[process_bridge_destroy] BridgeDestroy: bridge_id={bridge_id}, type={bridge_type}")
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ—Å—Ç—ã –∏–∑ active_bridges
    bridges_to_remove = []
    for uid, bridge_info in active_bridges.items():
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bridge_id –≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        bridges_to_remove.append(uid)
    
    for uid in bridges_to_remove:
        active_bridges.pop(uid, None)
        logging.info(f"[process_bridge_destroy] Cleaned bridge tracking for {uid}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await save_telegram_message(
        message_id=0,  # –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        event_type="bridge_destroy",
        token=data.get("Token", ""),
        caller="",
        callee="",
        is_internal=False,
        call_status=-1
    )
    
    return {"status": "logged"}

async def process_new_callerid(bot: Bot, chat_id: int, data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ NewCallerid - –∏–∑–º–µ–Ω–µ–Ω–∏–µ CallerID –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    –ú–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
    await save_asterisk_log(data)
    
    uid = data.get("UniqueId", "")
    channel = data.get("Channel", "")
    caller_id_num = data.get("CallerIDNum", "")
    caller_id_name = data.get("CallerIDName", "")
    connected_line_num = data.get("ConnectedLineNum", "")
    connected_line_name = data.get("ConnectedLineName", "")
    context = data.get("Context", "")
    exten = data.get("Exten", "")
    
    logging.info(f"[process_new_callerid] NewCallerid: uid={uid}, channel={channel}")
    logging.info(f"[process_new_callerid] CallerID: {caller_id_num} ({caller_id_name})")
    logging.info(f"[process_new_callerid] ConnectedLine: {connected_line_num} ({connected_line_name})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ—Å—Ç—ã —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ CallerID
    if uid in active_bridges:
        bridge_info = active_bridges[uid]
        bridge_info["caller_id_updated"] = {
            "CallerIDNum": caller_id_num,
            "CallerIDName": caller_id_name,
            "ConnectedLineNum": connected_line_num,
            "ConnectedLineName": connected_line_name,
            "Context": context,
            "Exten": exten
        }
        logging.info(f"[process_new_callerid] Updated bridge info for {uid}")
    
    # –ü–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è NewCallerid,
    # –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–π –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await save_telegram_message(
        message_id=0,  # –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        event_type="new_callerid",
        token=data.get("Token", ""),
        caller=caller_id_num,
        callee=connected_line_num,
        is_internal=False,
        call_status=-1
    )
    
    return {"status": "logged"}
