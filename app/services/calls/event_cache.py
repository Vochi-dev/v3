#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –∑–≤–æ–Ω–∫–æ–≤

–ê–≤—Ç–æ—Ä: Assistant
–î–∞—Ç–∞: 2025-09-14
"""

import json
import redis
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from dataclasses import asdict

from .event_filter import EventFilter, Event, FilterResult


class EventCache:
    """
    –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    - –°—ã—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è: events:{call_id} 
    - –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ: filtered:{call_id}:{integration}
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: metadata:{call_id}
    - –°—Ç–∞—Ç—É—Å: status:{call_id}
    """
    
    def __init__(self, redis_host='localhost', redis_port=6379, redis_db=0):
        self.redis = redis.Redis(host=redis_host, port=redis_port, db=redis_db)
        self.event_filter = EventFilter()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –∫—ç—à–µ)
        self.ACTIVE_CALL_TTL = 3600 * 4    # 4 —á–∞—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        self.COMPLETED_CALL_TTL = 3600 * 24 * 7  # 7 –¥–Ω–µ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –°–û–ë–´–¢–ò–Ø–ú–ò
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def add_event(self, event: Event) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∫—ç—à –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –ø–µ—Ä–µ—Å—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        call_id = event.uniqueid
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event_data = {
            'event': event.event,
            'uniqueid': event.uniqueid,
            'timestamp': event.timestamp.isoformat(),
            'data': event.data
        }
        
        self.redis.lpush(f"events:{call_id}", json.dumps(event_data))
        self.redis.expire(f"events:{call_id}", self.ACTIVE_CALL_TTL)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
        self._update_call_status(call_id, event)
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ)
        self._invalidate_filter_cache(call_id)
        
        self.logger.debug(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event.event} –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
    
    def get_filtered_events(self, call_id: str, integration: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            call_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–∞
            integration: –¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (bitrix24, telegram, general)
        """
        cache_key = f"filtered:{call_id}:{integration}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = self.redis.get(cache_key)
        if cached_result:
            self.logger.debug(f"üéØ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è {call_id}:{integration}")
            return json.loads(cached_result)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ - –≤—ã—á–∏—Å–ª—è–µ–º
        self.logger.debug(f"üîÑ –ö—ç—à –ø—Ä–æ–º–∞—Ö –¥–ª—è {call_id}:{integration}, –≤—ã—á–∏—Å–ª—è–µ–º...")
        return self._compute_and_cache_filter(call_id, integration)
    
    def get_call_metadata(self, call_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ (—Å–ª–æ–∂–Ω–æ—Å—Ç—å, –æ—Å–Ω–æ–≤–Ω–æ–π UID, —Å—Ç–∞—Ç—É—Å)
        """
        metadata = self.redis.hgetall(f"metadata:{call_id}")
        if metadata:
            # Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
            return {k.decode(): v.decode() for k, v in metadata.items()}
        return None
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def _compute_and_cache_filter(self, call_id: str, integration: str) -> List[Dict]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
        raw_events = self._load_raw_events(call_id)
        if not raw_events:
            return []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        filter_result = self.event_filter.filter_events_for_integrations(raw_events)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self._save_call_metadata(call_id, filter_result)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        self._cache_all_integrations(call_id, filter_result)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        return self._get_integration_events(filter_result, integration)
    
    def _load_raw_events(self, call_id: str) -> List[Event]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—ã—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫—ç—à–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç—ã Event
        """
        raw_data = self.redis.lrange(f"events:{call_id}", 0, -1)
        events = []
        
        for item in reversed(raw_data):  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
            try:
                event_data = json.loads(item)
                event = Event(
                    event=event_data['event'],
                    uniqueid=event_data['uniqueid'],
                    timestamp=datetime.fromisoformat(event_data['timestamp']),
                    data=event_data['data']
                )
                events.append(event)
            except (json.JSONDecodeError, KeyError) as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
        
        return events
    
    def _save_call_metadata(self, call_id: str, filter_result: FilterResult) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –≤ –∫—ç—à
        """
        metadata = {
            'complexity': filter_result.complexity,
            'primary_uid': filter_result.primary_uid,
            'total_events': len(filter_result.general),
            'bitrix24_events': len(filter_result.bitrix24),
            'telegram_events': len(filter_result.telegram),
            'last_updated': datetime.now().isoformat()
        }
        
        self.redis.hset(f"metadata:{call_id}", mapping=metadata)
        self.redis.expire(f"metadata:{call_id}", self.COMPLETED_CALL_TTL)
    
    def _cache_all_integrations(self, call_id: str, filter_result: FilterResult) -> None:
        """
        –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        """
        ttl = self._get_cache_ttl(call_id)
        
        integrations = {
            'bitrix24': filter_result.bitrix24,
            'telegram': filter_result.telegram,
            'general': filter_result.general
        }
        
        for integration, events in integrations.items():
            cache_key = f"filtered:{call_id}:{integration}"
            event_dicts = [self._event_to_dict(e) for e in events]
            
            self.redis.setex(cache_key, ttl, json.dumps(event_dicts))
        
        self.logger.debug(f"üíæ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è {call_id} ({filter_result.complexity})")
    
    def _get_integration_events(self, filter_result: FilterResult, integration: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑ FilterResult
        """
        events = getattr(filter_result, integration, filter_result.general)
        return [self._event_to_dict(e) for e in events]
    
    def _event_to_dict(self, event: Event) -> Dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Event –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        return {
            'event': event.event,
            'uniqueid': event.uniqueid,
            'timestamp': event.timestamp.isoformat(),
            'data': event.data
        }
    
    def _update_call_status(self, call_id: str, event: Event) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π
        """
        if event.event == 'start':
            self.redis.hset(f"status:{call_id}", "status", "active")
            self.redis.hset(f"status:{call_id}", "started_at", event.timestamp.isoformat())
        elif event.event == 'hangup':
            self.redis.hset(f"status:{call_id}", "status", "completed") 
            self.redis.hset(f"status:{call_id}", "ended_at", event.timestamp.isoformat())
            
        self.redis.expire(f"status:{call_id}", self.COMPLETED_CALL_TTL)
    
    def _invalidate_filter_cache(self, call_id: str) -> None:
        """
        –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞
        """
        patterns = [
            f"filtered:{call_id}:*"
        ]
        
        for pattern in patterns:
            keys = self.redis.keys(pattern)
            if keys:
                self.redis.delete(*keys)
    
    def _get_cache_ttl(self, call_id: str) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç TTL –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
        """
        status = self.redis.hget(f"status:{call_id}", "status")
        if status and status.decode() == "completed":
            return self.COMPLETED_CALL_TTL
        return self.ACTIVE_CALL_TTL
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –£–¢–ò–õ–ò–¢–´ –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        """
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–∏ –ø–æ —Ç–∏–ø–∞–º
        events_keys = len(self.redis.keys("events:*"))
        filtered_keys = len(self.redis.keys("filtered:*"))
        metadata_keys = len(self.redis.keys("metadata:*"))
        status_keys = len(self.redis.keys("status:*"))
        
        return {
            'total_calls': events_keys,
            'cached_filters': filtered_keys,
            'metadata_entries': metadata_keys,
            'status_entries': status_keys,
            'redis_memory_usage': self.redis.info()['used_memory_human']
        }
    
    def cleanup_old_calls(self, days_old: int = 7) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        """
        cutoff_date = datetime.now() - timedelta(days=days_old)
        cleaned = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
        for key in self.redis.keys("status:*"):
            call_id = key.decode().split(":", 1)[1]
            ended_at = self.redis.hget(key, "ended_at")
            
            if ended_at:
                try:
                    end_time = datetime.fromisoformat(ended_at.decode())
                    if end_time < cutoff_date:
                        self._delete_call_data(call_id)
                        cleaned += 1
                except ValueError:
                    continue
        
        return cleaned
    
    def _delete_call_data(self, call_id: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –∏–∑ –∫—ç—à–∞
        """
        patterns = [
            f"events:{call_id}",
            f"filtered:{call_id}:*", 
            f"metadata:{call_id}",
            f"status:{call_id}"
        ]
        
        keys_to_delete = []
        for pattern in patterns:
            if '*' in pattern:
                keys_to_delete.extend(self.redis.keys(pattern))
            else:
                keys_to_delete.append(pattern)
        
        if keys_to_delete:
            self.redis.delete(*keys_to_delete)
