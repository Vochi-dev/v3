import logging
import asyncio
import aiohttp
from telegram import Bot
from telegram.error import BadRequest
import json
import hashlib
import traceback
import uuid
from datetime import datetime

from app.services.events import save_telegram_message
from app.services.customers import upsert_customer_from_hangup
from app.services.postgres import get_pool
from app.services.asterisk_logs import save_asterisk_log
from app.services.postgres import get_pool
from app.services.metadata_client import metadata_client, extract_internal_phone_from_channel, extract_line_id_from_exten

def get_recording_link_text(call_record_info):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è Telegram
    """
    if call_record_info and call_record_info.get('call_url'):
        call_url = call_record_info['call_url']
        return f'\nüîâ<a href="{call_url}">–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</a>'
    else:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        return f'\nüîâ–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'
from .utils import (
    format_phone_number,
    get_relevant_hangup_message_id,
    update_call_pair_message,
    update_hangup_message_map,
    dial_cache,
    bridge_store,
    active_bridges,
    # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    get_phone_for_grouping,
    should_send_as_comment,
    should_replace_previous_message,
    update_phone_tracker,
    is_internal_number,
    phone_message_tracker,
)

async def create_call_record(unique_id: str, token: str, data: dict, uuid_token: str = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ calls –¥–ª—è hangup —Å–æ–±—ã—Ç–∏—è
    """
    pool = await get_pool()
    if not pool:
        logging.error("PostgreSQL pool not available for creating call record")
        return None
    
    try:
        async with pool.acquire() as connection:
            # –ü–æ–ª—É—á–∞–µ–º enterprise_id –ø–æ —Ç–æ–∫–µ–Ω—É
            enterprise_query = """
                SELECT number FROM enterprises 
                WHERE name2 = $1 OR secret = $1
                LIMIT 1
            """
            enterprise_result = await connection.fetchrow(enterprise_query, token)
            enterprise_id = enterprise_result['number'] if enterprise_result else token[:4]
            
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–æ–∫–µ–Ω–∞
            hashed_token = hashlib.md5(token.encode()).hexdigest()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            phone_number = data.get('Phone', data.get('CallerIDNum', ''))
            start_time_str = data.get('StartTime', '')
            end_time_str = data.get('EndTime', '')
            call_status = str(data.get('CallStatus', '0'))
            call_type = str(data.get('CallType', '0'))
            trunk = data.get('Trunk', '')  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ trunk
            
            # üîç –ü–û–õ–£–ß–ê–ï–ú TRUNK –ò–ó –ü–†–ï–î–´–î–£–©–ò–• –°–û–ë–´–¢–ò–ô (dial/start)
            if not trunk:
                try:
                    trunk_query = """
                        SELECT raw_data->'Trunk' as trunk_data
                        FROM call_events 
                        WHERE unique_id = $1 
                          AND event_type IN ('dial', 'start')
                          AND raw_data ? 'Trunk'
                        ORDER BY event_timestamp DESC
                        LIMIT 1
                    """
                    trunk_result = await connection.fetchrow(trunk_query, unique_id)
                    if trunk_result and trunk_result['trunk_data']:
                        trunk = str(trunk_result['trunk_data']).strip('"')
                        logging.info(f"–ü–æ–ª—É—á–∏–ª–∏ trunk '{trunk}' –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è {unique_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è trunk –¥–ª—è {unique_id}: {e}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
            start_time = None
            end_time = None
            duration = 0
            
            if start_time_str and end_time_str:
                try:
                    start_time = datetime.fromisoformat(start_time_str)
                    end_time = datetime.fromisoformat(end_time_str)
                    duration = int((end_time - start_time).total_seconds())
                except:
                    pass
            
            # üîó –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
            if uuid_token is None:
                uuid_token = str(uuid.uuid4())
            call_url = f"https://bot.vochi.by/recordings/file/{uuid_token}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ calls —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è UUID —Å—Å—ã–ª–∫—É
            insert_query = """
                INSERT INTO calls (
                    unique_id, token, enterprise_id, phone_number, 
                    call_status, call_type, duration, data_source, created_at,
                    start_time, end_time, trunk, raw_data,
                    uuid_token, call_url
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
                ON CONFLICT (unique_id) DO UPDATE SET
                    start_time = COALESCE(EXCLUDED.start_time, calls.start_time),
                    end_time = COALESCE(EXCLUDED.end_time, calls.end_time),
                    trunk = COALESCE(EXCLUDED.trunk, calls.trunk),
                    call_status = EXCLUDED.call_status,
                    duration = EXCLUDED.duration,
                    raw_data = COALESCE(EXCLUDED.raw_data, calls.raw_data),
                    uuid_token = COALESCE(EXCLUDED.uuid_token, calls.uuid_token),
                    call_url = COALESCE(EXCLUDED.call_url, calls.call_url)
                RETURNING id
            """
            
            result = await connection.fetchrow(
                insert_query,
                unique_id, hashed_token, enterprise_id, phone_number,
                call_status, call_type, duration, 'live', datetime.now(),
                start_time, end_time, trunk, json.dumps(data),
                uuid_token, call_url
            )
            
            if result:
                call_id = result['id']
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å call_id={call_id} –¥–ª—è {unique_id}")
                logging.info(f"üîó UUID —Å—Å—ã–ª–∫–∞: {call_url}")
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                update_query = """
                    UPDATE call_events 
                    SET processed = true 
                    WHERE unique_id = $1 AND event_type = 'hangup'
                """
                await connection.execute(update_query, unique_id)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º call_id –∏ call_url –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏–∏
                return {"call_id": call_id, "call_url": call_url}
            else:
                logging.debug(f"Call record for {unique_id} already exists, skipping")
                return None
                
    except Exception as e:
        logging.error(f"Error creating call record for {unique_id}: {e}")
        return None

async def process_hangup(bot: Bot, chat_id: int, data: dict):
    """
    –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'hangup' (17.01.2025):
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ bridge —Å–æ–±—ã—Ç–∏—è–º
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ "–ü–æ—è—Å–Ω–µ–Ω–∏–µ"
    - –†–∞–∑–ª–∏—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ/–Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –ø–æ CallStatus
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs
        await save_asterisk_log(data)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
        phone_for_grouping = get_phone_for_grouping(data)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        uid = data.get("UniqueId", "")
        caller = data.get("CallerIDNum", "") or ""
        exts = data.get("Extensions", []) or []
        connected = data.get("ConnectedLineNum", "") or ""
        call_status = int(data.get("CallStatus", -1))
        call_type = int(data.get("CallType", -1))
        token = data.get("Token", "")
        trunk_info = data.get("Trunk", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –ø–æ —Ç–æ–∫–µ–Ω—É
        enterprise_number = "0000"  # fallback –ª–æ–≥–∏–∫–∞
        if token:
            try:
                pool = await get_pool()
                if pool:
                    async with pool.acquire() as conn:
                        ent_row = await conn.fetchrow("SELECT number FROM enterprises WHERE name2 = $1", token)
                        if ent_row:
                            enterprise_number = ent_row["number"]
            except Exception as e:
                logging.warning(f"[process_hangup] Failed to get enterprise_number for token {token}: {e}")
                enterprise_number = token[:4] if len(token) >= 4 else "0000"

        logging.info(f"[process_hangup] RAW DATA = {data!r}")
        logging.info(f"[process_hangup] Phone for grouping: {phone_for_grouping}")
        logging.info(f"[process_hangup] Status: {call_status}, Type: {call_type}")
        logging.info(f"[process_hangup] DEBUG: caller='{caller}', exts={exts}, connected='{connected}'")

        # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–ê–°–°–ò–í–û–í
        try:
            if exts and len(exts) > 0:
                logging.info(f"[process_hangup] DEBUG: exts[0] = '{exts[0]}'")
            else:
                logging.info(f"[process_hangup] DEBUG: exts is empty or None")
        except Exception as e:
            logging.error(f"[process_hangup] ERROR accessing exts: {e}, exts={exts}")
            exts = []  # –û–±–Ω—É–ª—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ calls –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å
        call_record_info = None
        if uid and token:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π UUID —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –≤–æ –≤—Å–µ—Ö chat_id)
            shared_uuid = data.get("_shared_uuid_token", None)
            call_record_info = await create_call_record(uid, token, data, shared_uuid)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 2. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        bridge_store.pop(uid, None)
        dial_cache.pop(uid, None)
        active_bridges.pop(uid, None)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 3. –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        duration_text = ""
        try:
            start_time_str = data.get("StartTime", "")
            end_time_str = data.get("EndTime", "")
            if start_time_str and end_time_str:
                start_time = datetime.fromisoformat(start_time_str)
                end_time = datetime.fromisoformat(end_time_str)
                total_seconds = int((end_time - start_time).total_seconds())
                duration_text = f"{total_seconds//60:02d}:{total_seconds%60:02d}"
        except Exception as e:
            logging.warning(f"[process_hangup] Failed to calculate duration: {e}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        caller_is_internal = is_internal_number(caller)
        
        # –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
        if call_type == 2 or (caller_is_internal and connected and is_internal_number(connected)):
            call_direction = "internal"
            callee = connected or (exts[0] if exts and len(exts) > 0 else "")
        else:
            # –í–Ω–µ—à–Ω–∏–µ –∑–≤–æ–Ω–∫–∏
            if call_type == 1:
                call_direction = "outgoing"
            elif call_type == 0:
                call_direction = "incoming"
            else:
                call_direction = "unknown"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 5. –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        line_id = extract_line_id_from_exten(trunk_info)  # ID –ª–∏–Ω–∏–∏ –∏–∑ Trunk
        internal_phone = None
        external_phone = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
        if call_direction == "incoming":
            external_phone = caller
            if connected and is_internal_number(connected):
                internal_phone = connected
            elif exts:
                for ext in reversed(exts):
                    if is_internal_number(ext):
                        internal_phone = ext
                        break
        elif call_direction == "outgoing":
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ dial.py
            external_phone = data.get("Phone", "")  # –í–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä –∏–∑ Phone
            
            # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –≤ Extensions (–∫–∞–∫ –≤ dial.py)
            if exts:
                for ext in exts:
                    if is_internal_number(ext):
                        internal_phone = ext
                        break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ Extensions, –ø—Ä–æ–≤–µ—Ä—è–µ–º CallerIDNum
            if not internal_phone:
                caller_id = data.get("CallerIDNum", "")
                if is_internal_number(caller_id):
                    internal_phone = caller_id
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ 1-2: –∏—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
            if not internal_phone and data.get("ExternalInitiated"):
                try:
                    # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö bridge —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ –≤–Ω–µ—à–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞
                    pool = await get_pool()
                    if pool:
                        async with pool.acquire() as connection:
                            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π bridge —Å —Ç–µ–º –∂–µ –≤–Ω–µ—à–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º
                            query = """
                                SELECT raw_data->'ConnectedLineNum' as internal_num
                                FROM call_events 
                                WHERE raw_data->>'Token' = $1 
                                  AND event_type = 'bridge'
                                  AND (raw_data->>'CallerIDNum' = $2 OR raw_data->>'ConnectedLineNum' = $2)
                                  AND raw_data ? 'ConnectedLineNum'
                                ORDER BY event_timestamp DESC
                                LIMIT 1
                            """
                            result = await connection.fetchrow(query, token, external_phone)
                            if result and result['internal_num']:
                                potential_internal = str(result['internal_num']).strip('"')
                                if is_internal_number(potential_internal):
                                    internal_phone = potential_internal
                                    logging.info(f"[process_hangup] Found internal_phone '{internal_phone}' from previous bridge event")
                except Exception as e:
                    logging.error(f"[process_hangup] Error searching for internal phone in DB: {e}")
        elif call_direction == "internal":
            # –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ–±–∞ –Ω–æ–º–µ—Ä–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
            internal_phone = caller if is_internal_number(caller) else None
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–ö–õ–Æ–ß–ê–ï–ú –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è hangup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        enriched_data = {}
        if call_direction in ["incoming", "outgoing"] and enterprise_number != "0000":
            try:
                # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ–≥–∞—â–µ–Ω–∏—è
                logging.info(f"[process_hangup] Enrichment params: enterprise_number={enterprise_number}, internal_phone={internal_phone}, external_phone={external_phone}, line_id={line_id}")
                
                enriched_data = await metadata_client.enrich_message_data(
                    enterprise_number=enterprise_number,
                    internal_phone=internal_phone if internal_phone else None,
                    line_id=line_id if line_id else None,
                    external_phone=external_phone if external_phone else None
                )
                logging.info(f"[process_hangup] Enriched data: {enriched_data}")
            except Exception as e:
                logging.error(f"[process_hangup] Error enriching metadata: {e}")
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 6. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ü–æ—è—Å–Ω–µ–Ω–∏—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        
        if call_direction == "internal":
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–≤–æ–Ω–∫–∏
            if call_status == 2:
                # –£—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
                # –û–±–æ–≥–∞—â–∞–µ–º –§–ò–û –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
                caller_display = caller
                connected_display = connected
                
                # –§–ò–û –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                
                text = (f"‚úÖ–£—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫\n"
                       f"‚òéÔ∏è{caller_display}‚û°Ô∏è\n"
                       f"‚òéÔ∏è{connected_display}")
                if duration_text:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ StartTime
                    start_time = data.get('StartTime', '')
                    if start_time:
                        try:
                            if 'T' in start_time:
                                time_part = start_time.split('T')[1][:5]
                            elif ' ' in start_time:
                                parts = start_time.split(' ')
                                if len(parts) >= 2:
                                    time_part = parts[1][:5]
                                else:
                                    time_part = "–Ω–µ–∏–∑–≤"
                            else:
                                time_part = "–Ω–µ–∏–∑–≤"
                            text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {time_part}"
                        except Exception as e:
                            logging.warning(f"[process_hangup] Error parsing StartTime '{start_time}': {e}")
                            text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –Ω–µ–∏–∑–≤"
                    text += f"\n‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"
                    text += get_recording_link_text(call_record_info)
            else:
                # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–æ–Ω–æ–∫
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                text = (f"‚ùå –ö–æ–ª–ª–µ–≥–∞ –Ω–µ –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É\n"
                       f"‚òéÔ∏è{caller_display}‚û°Ô∏è\n" 
                       f"‚òéÔ∏è{connected_display}")
                if duration_text:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ StartTime
                    start_time = data.get('StartTime', '')
                    if start_time:
                        try:
                            if 'T' in start_time:
                                time_part = start_time.split('T')[1][:5]
                            elif ' ' in start_time:
                                parts = start_time.split(' ')
                                if len(parts) >= 2:
                                    time_part = parts[1][:5]
                                else:
                                    time_part = "–Ω–µ–∏–∑–≤"
                            else:
                                time_part = "–Ω–µ–∏–∑–≤"
                            text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {time_part}"
                        except Exception as e:
                            logging.warning(f"[process_hangup] Error parsing StartTime '{start_time}': {e}")
                            text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –Ω–µ–∏–∑–≤"
                    text += f"\n‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"
        
        elif call_direction == "incoming":
            # –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
            phone = format_phone_number(caller)
            display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
            # –û–±–æ–≥–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if enriched_data.get("customer_name"):
                display = f"{display} ({enriched_data['customer_name']})"
            
            if call_status == 2:
                # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                text = f"‚úÖ–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫\nüí∞{display}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                if internal_phone:
                    manager_fio = enriched_data.get("manager_name", "")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ - –µ—Å–ª–∏ –§–ò–û –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ "–î–æ–±.XXX", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–§–ò–û (–Ω–æ–º–µ—Ä)", –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä
                    if manager_fio and not manager_fio.startswith("–î–æ–±."):
                        manager_display = f"{manager_fio} ({internal_phone})"
                    else:
                        manager_display = internal_phone
                    text += f"\n‚òéÔ∏è{manager_display}"
                elif connected and is_internal_number(connected):
                    text += f"\n‚òéÔ∏è{connected}"
                elif exts:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ
                    for ext in reversed(exts):
                        if is_internal_number(ext):
                            text += f"\n‚òéÔ∏è{ext}"
                            break
                            
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                if enriched_data.get("line_name"):
                    text += f"\nüì°{enriched_data['line_name']}"
                elif trunk_info:
                    text += f"\n–õ–∏–Ω–∏—è: {trunk_info}"
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
                if data.get('StartTime'):
                    start_time = data.get('StartTime')
                    try:
                        if 'T' in start_time:
                            time_part = start_time.split('T')[1][:5]
                        elif ' ' in start_time:
                            # –§–æ—Ä–º–∞—Ç "2025-07-17 15:39:04"
                            parts = start_time.split(' ')
                            if len(parts) >= 2:
                                time_part = parts[1][:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
                            else:
                                time_part = "–Ω–µ–∏–∑–≤"
                        else:
                            time_part = "–Ω–µ–∏–∑–≤"
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {time_part}"
                    except Exception as e:
                        logging.warning(f"[process_hangup] Error parsing StartTime '{start_time}': {e}")
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –Ω–µ–∏–∑–≤"
                if duration_text:
                    text += f"\n‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"
                    text += get_recording_link_text(call_record_info)
            else:
                # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                text = f"‚ùå –ú—ã –Ω–µ –ø–æ–¥–Ω—è–ª–∏ —Ç—Ä—É–±–∫—É\nüí∞{display}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö, –∫–æ–º—É –∑–≤–æ–Ω–∏–ª–∏ (—Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –§–ò–û)
                if exts:
                    internal_exts = [ext for ext in exts if is_internal_number(ext)]
                    mobile_exts = [ext for ext in exts if not is_internal_number(ext)]
                    
                    for ext in internal_exts:
                        # –§–ò–û –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                        text += f"\n‚òéÔ∏è{ext}"
                    for ext in mobile_exts:
                        text += f"\nüì±{format_phone_number(ext)}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                if enriched_data.get("line_name"):
                    text += f"\nüì°{enriched_data['line_name']}"
                elif trunk_info:
                    text += f"\n–õ–∏–Ω–∏—è: {trunk_info}"
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ–∑–≤–æ–Ω–∞
                if data.get('StartTime'):
                    start_time_str = data.get('StartTime')
                    try:
                        if 'T' in start_time_str:
                            time_part = start_time_str.split('T')[1][:5]
                        else:
                            time_part = start_time_str.split(' ')[1][:5] if ' ' in start_time_str else start_time_str[-5:]
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {time_part}"
                    except:
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {start_time_str}"
                if duration_text:
                    text += f"\n‚åõ –î–æ–∑–≤–∞–Ω–∏–≤–∞–ª—Å—è: {duration_text}"
        
        elif call_direction == "outgoing":
            # –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏  
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º—É –∑–≤–æ–Ω–∏–ª–∏
            external_phone = ""
            internal_caller = ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä (–∫–æ–º—É –∑–≤–æ–Ω–∏–ª–∏)
            if connected and not is_internal_number(connected):
                external_phone = connected
            elif exts:
                # –ò—â–µ–º –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ä–µ–¥–∏ Extensions
                for ext in exts:
                    if not is_internal_number(ext):
                        external_phone = ext
                        break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–≤–æ–Ω—è—â–µ–≥–æ
            if caller and is_internal_number(caller):
                internal_caller = caller
            elif exts:
                # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ä–µ–¥–∏ Extensions
                for ext in exts:
                    if is_internal_number(ext):
                        internal_caller = ext
                        break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            if not external_phone:
                external_phone = data.get("Phone", "") or data.get("ConnectedLineNum", "") or ""
                
            phone = format_phone_number(external_phone)
            display = phone if not phone.startswith("+000") else "–ù–æ–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
            # –û–±–æ–≥–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–º–µ–Ω–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if enriched_data.get("customer_name"):
                display = f"{display} ({enriched_data['customer_name']})"
            
            if call_status == 2:
                # –£—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                text = f"‚úÖ–£—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º internal_phone –≤–º–µ—Å—Ç–æ internal_caller –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ 1-2
                manager_number = internal_caller or internal_phone
                if manager_number:
                    manager_fio = enriched_data.get("manager_name", "")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ - –µ—Å–ª–∏ –§–ò–û –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ "–î–æ–±.XXX", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–§–ò–û (–Ω–æ–º–µ—Ä)", –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä
                    if manager_fio and not manager_fio.startswith("–î–æ–±."):
                        manager_display = f"{manager_fio} ({manager_number})"
                    else:
                        manager_display = manager_number
                    text += f"\n‚òéÔ∏è{manager_display}"
                
                text += f"\nüí∞{display}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                if enriched_data.get("line_name"):
                    text += f"\nüì°{enriched_data['line_name']}"
                elif trunk_info:
                    text += f"\n–õ–∏–Ω–∏—è: {trunk_info}"
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                if data.get('StartTime'):
                    start_time_str = data.get('StartTime')
                    try:
                        if 'T' in start_time_str:
                            time_part = start_time_str.split('T')[1][:5]
                        else:
                            time_part = start_time_str.split(' ')[1][:5] if ' ' in start_time_str else start_time_str[-5:]
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {time_part}"
                    except:
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {start_time_str}"
                if duration_text:
                    text += f"\n‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"
                    text += get_recording_link_text(call_record_info)
            else:
                # –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                text = f"‚ùå –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –ø–æ–¥–Ω—è–ª —Ç—Ä—É–±–∫—É"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º internal_phone –≤–º–µ—Å—Ç–æ internal_caller –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ 1-2
                manager_number = internal_caller or internal_phone
                if manager_number:
                    manager_fio = enriched_data.get("manager_name", "")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ - –µ—Å–ª–∏ –§–ò–û –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ "–î–æ–±.XXX", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–§–ò–û (–Ω–æ–º–µ—Ä)", –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä
                    if manager_fio and not manager_fio.startswith("–î–æ–±."):
                        manager_display = f"{manager_fio} ({manager_number})"
                    else:
                        manager_display = manager_number
                    text += f"\n‚òéÔ∏è{manager_display}"
                
                text += f"\nüí∞{display}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏ (–æ–±–æ–≥–∞—â—ë–Ω–Ω—É—é)
                if enriched_data.get("line_name"):
                    text += f"\nüì°{enriched_data['line_name']}"
                elif trunk_info:
                    text += f"\n–õ–∏–Ω–∏—è: {trunk_info}"
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ–∑–≤–æ–Ω–∞  
                if data.get('StartTime'):
                    start_time_str = data.get('StartTime')
                    try:
                        if 'T' in start_time_str:
                            time_part = start_time_str.split('T')[1][:5]
                        else:
                            time_part = start_time_str.split(' ')[1][:5] if ' ' in start_time_str else start_time_str[-5:]
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {time_part}"
                    except:
                        text += f"\n‚è∞–ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ {start_time_str}"
                if duration_text:
                    text += f"\n‚åõ –î–æ–∑–≤–∞–Ω–∏–≤–∞–ª—Å—è: {duration_text}"
        
        else:
            # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø - –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            text = f"‚ùå –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫\nüí∞{format_phone_number(caller)}"
            if duration_text:
                text += f"\n‚åõ {duration_text}"

        # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º html-—Ç–µ–≥–∏ —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode="HTML"
        # –∏ –Ω—É–∂–Ω—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å–∏
        safe_text = text
        logging.info(f"[process_hangup] => chat={chat_id}, text={safe_text!r}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        should_comment, reply_to_id = should_send_as_comment(phone_for_grouping, 'hangup', chat_id)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º bridge ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        logging.info(f"[process_hangup] === SENDING HANGUP MESSAGE ===")
        logging.info(f"[process_hangup] should_comment={should_comment}, reply_to_id={reply_to_id}")
        logging.info(f"[process_hangup] chat_id={chat_id}, safe_text={safe_text!r}")
        
        try:
            if should_comment and reply_to_id:
                logging.info(f"[process_hangup] Sending as comment to message {reply_to_id}")
                sent = await bot.send_message(
                    chat_id,
                    safe_text,
                    reply_to_message_id=reply_to_id,
                    parse_mode="HTML"
                )
                logging.info(f"[process_hangup] ‚úÖ HANGUP COMMENT SENT: message_id={sent.message_id}")
            else:
                logging.info(f"[process_hangup] Sending as standalone message")
                sent = await bot.send_message(chat_id, safe_text, parse_mode="HTML")
                logging.info(f"[process_hangup] ‚úÖ HANGUP MESSAGE SENT: message_id={sent.message_id}")
                
        except BadRequest as e:
            logging.error(f"[process_hangup] ‚ùå send_message failed: {e}. text={safe_text!r}")
            return {"status": "error", "error": str(e)}
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 8. –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ hangup - —É–¥–∞–ª—è–µ–º bridge —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –£–¥–∞–ª—è–µ–º bridge —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        bridge_messages_to_delete = []
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è chat_id
        from .utils import bridge_store_by_chat, phone_message_tracker_by_chat
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º bridge_store –ø–æ UniqueId –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ chat_id
        chat_bridge_store = bridge_store_by_chat[chat_id]
        if uid in chat_bridge_store:
            bridge_msg = chat_bridge_store.pop(uid)
            bridge_messages_to_delete.append(bridge_msg)
            logging.info(f"[process_hangup] Found bridge message {bridge_msg} in bridge_store for uid {uid}")
        
        # 2. –ì–õ–ê–í–ù–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º phone_message_tracker –ø–æ –í–ù–ï–®–ù–ï–ú–£ –ù–û–ú–ï–†–£ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∫–æ—Ä—å!)
        chat_phone_tracker = phone_message_tracker_by_chat[chat_id]
        if phone_for_grouping in chat_phone_tracker:
            tracker_data = chat_phone_tracker[phone_for_grouping]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ tracker_data —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(tracker_data, dict) and tracker_data.get('event_type') == 'bridge':
                bridge_msg_id = tracker_data['message_id']
                bridge_messages_to_delete.append(bridge_msg_id)
                # –û—á–∏—â–∞–µ–º tracker
                del chat_phone_tracker[phone_for_grouping]
                logging.info(f"[process_hangup] Found bridge message {bridge_msg_id} in phone_tracker for phone {phone_for_grouping}")
        
        # 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ bridge —Å–æ–æ–±—â–µ–Ω–∏—è
        for bridge_msg_id in bridge_messages_to_delete:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=bridge_msg_id)
                logging.info(f"[process_hangup] Deleted bridge message {bridge_msg_id} due to hangup")
            except BadRequest as e:
                logging.warning(f"[process_hangup] Could not delete bridge message {bridge_msg_id}: {e}")
            except Exception as e:
                logging.error(f"[process_hangup] Error deleting bridge message {bridge_msg_id}: {e}")

        logging.info(f"[process_hangup] Deleted {len(bridge_messages_to_delete)} bridge messages")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 9. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callee –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if call_direction == "internal":
            callee = connected or ""
            is_int = True
        else:
            # –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if exts and len(exts) > 0:
                callee = exts[0]
            elif connected:
                callee = connected
            else:
                callee = ""
            is_int = False
            
        update_call_pair_message(caller, callee, sent.message_id, is_int, chat_id)
        update_hangup_message_map(caller, callee, sent.message_id, is_int, call_status, call_type, exts, chat_id=chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        update_phone_tracker(phone_for_grouping, sent.message_id, 'hangup', data, chat_id)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 10. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        await save_telegram_message(
            sent.message_id,
            "hangup",
            token,
            caller,
            callee,
            is_int
        )
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–≥ 11. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ U‚ÄëON —á–µ—Ä–µ–∑ 8020 (—Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            ext_for_notify = exts[0] if exts else (connected or "")
            notify_payload = {
                "enterprise_number": token,
                "phone": caller,
                "extension": ext_for_notify,
            }
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            pass
        except Exception as e:
            logging.warning(f"[process_hangup] notify incoming failed: {e}")

        logging.info(f"[process_hangup] Successfully sent hangup message {sent.message_id} for {phone_for_grouping}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Fire-and-forget –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ customers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            asyncio.create_task(upsert_customer_from_hangup(data))
        except Exception:
            pass

        # üîÑ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ß–ï–†–ï–ó 8020
        async def _enrich_and_edit(data: dict):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
            try:
                logging.info(f"[hangup] _enrich_and_edit called with data: {data}")
                
                # –ü–æ–ª—É—á–∞–µ–º enterprise_number –∏–∑ —Ç–æ–∫–µ–Ω–∞
                pool = await get_pool()
                if not pool:
                    return
                    
                async with pool.acquire() as conn:
                    row = await conn.fetchrow(
                        "SELECT number FROM enterprises WHERE name2 = $1 OR secret = $1 OR number = $1 LIMIT 1",
                        data.get("Token", "")
                    )
                    if not row:
                        return
                    current_enterprise_number = row["number"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
                phone = data.get("Phone") or data.get("CallerIDNum") or data.get("ConnectedLineNum") or ""
                if not phone:
                    return
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –≤ E.164 —Ñ–æ—Ä–º–∞—Ç
                if not phone.startswith("+"):
                    phone_e164 = "+" + ''.join(ch for ch in phone if ch.isdigit())
                else:
                    phone_e164 = phone

                # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                pass

            except Exception as e:
                logging.error(f"[hangup] Error in _enrich_and_edit: {e}")

        try:
            logging.info(f"[hangup] Starting profile enrichment task for {uid}")
            await _enrich_and_edit(data)
        except Exception as e:
            logging.warning(f"[hangup] Failed to create enrichment task: {e}")

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Fire-and-forget –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Integration Gateway (8020) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            token_for_gateway = token
            unique_id_for_gateway = uid
            event_type_for_gateway = "hangup"
            record_url_for_gateway = (call_record_info or {}).get("call_url")

            # Gateway dispatch –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            pass
        except Exception as e:
            logging.warning(f"[process_hangup] failed to schedule gateway dispatch: {e}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è U‚ÄëON –∏ –ø—Ä–æ—á–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ 8020; –∑–¥–µ—Å—å –Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.

        return {"status": "sent", "message_id": sent.message_id}
    except Exception as e:
        error_trace = traceback.format_exc()
        logging.error(f"[process_hangup] An unexpected error occurred: {e}")
        logging.error(f"[process_hangup] Full traceback: {error_trace}")
        logging.error(f"[process_hangup] Data that caused error: {data}")
        return {"status": "error", "error": str(e)}
