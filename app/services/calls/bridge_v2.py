import logging
from telegram import Bot
from telegram.error import BadRequest

from app.services.events import save_telegram_message
from app.services.asterisk_logs import save_asterisk_log
from .utils import format_phone_number, delete_previous_messages, save_v2_message, is_internal_number, escape_html

async def process_bridge_v2(bot: Bot, chat_id: int, data: dict):
    """
    –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ bridge - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram,
    —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ unique_id.
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏–µ.txt: "–ö–∞–∂–¥–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ"
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ asterisk_logs –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    await save_asterisk_log(data)
    
    uid = data.get("UniqueId", "")
    token = data.get("Token", "")
    caller = escape_html(data.get("CallerIDNum", ""))
    connected = escape_html(data.get("ConnectedLineNum", ""))
    trunk = data.get("Trunk", "")
    bridge_id = data.get("BridgeUniqueid", "")
    
    logging.info(f"[process_bridge_v2] BRIDGE event: uid={uid}, bridge_id={bridge_id}, caller={caller}, connected={connected}")
    
    # –ü—Ä–∞–≤–∏–ª–æ: "–°–æ–±—ã—Ç–∏–µ –±—Ä–∏–¥–∂ –Ω–∞ –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ BridgeUniqueid - –æ–¥–∏–Ω –º–æ—Å—Ç = –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    from .utils import v2_messages, bridge_sent_cache, bridge_recent_pairs
    
    if bridge_id and bridge_id in bridge_sent_cache:
        logging.info(f"[process_bridge_v2] BRIDGE already sent for bridge_id={bridge_id}, skipping")
        return {"status": "skipped", "reason": "bridge_already_sent"}
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –±—ã–ª–∏ –≤ bridge –Ω–µ–¥–∞–≤–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫)
    import time
    current_time = time.time()
    bridge_key = f"{caller}_{connected}"
    
    recent = bridge_recent_pairs.get(bridge_key)
    if recent and (current_time - recent) < 10:  # 10 —Å–µ–∫—É–Ω–¥
        logging.info(f"[process_bridge_v2] Recent BRIDGE for {bridge_key}, skipping")
        return {"status": "skipped", "reason": "bridge_too_recent"}
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ unique_id
    deleted = await delete_previous_messages(bot, chat_id, uid)
    logging.info(f"[process_bridge_v2] Deleted {len(deleted)} previous messages for {uid}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
    caller_internal = is_internal_number(caller)
    connected_internal = is_internal_number(connected)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ BRIDGE —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É –∏–∑ –ü–æ—è—Å–Ω–µ–Ω–∏–µ.txt
    if caller_internal and connected_internal:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π: ‚òéÔ∏è185 –ë–∞–µ–≤—Å–∫–∏–π –ï–≤–≥–µ–Ω–∏–π üìû‚û°Ô∏è ‚òéÔ∏è186 –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Äüìû
        message_text = f"‚òéÔ∏è{caller} üìû‚û°Ô∏è ‚òéÔ∏è{connected}üìû"
    elif caller_internal:
        # –ò—Å—Ö–æ–¥—è—â–∏–π: ‚òéÔ∏è185 –ë–∞–µ–≤—Å–∫–∏–π –ï–≤–≥–µ–Ω–∏–π üìû‚û°Ô∏è üí∞+375 (29) 625-40-70üìû
        formatted_connected = format_phone_number(connected)
        message_text = f"‚òéÔ∏è{caller} üìû‚û°Ô∏è üí∞{formatted_connected}üìû\n–õ–∏–Ω–∏—è: {trunk}"
    else:
        # –í—Ö–æ–¥—è—â–∏–π: ‚òéÔ∏è185 –ë–∞–µ–≤—Å–∫–∏–π –ï–≤–≥–µ–Ω–∏–π üìû‚û°Ô∏è üí∞+375 (29) 625-40-70üìû
        formatted_caller = format_phone_number(caller)
        message_text = f"‚òéÔ∏è{connected} üìû‚û°Ô∏è üí∞{formatted_caller}üìû\n–õ–∏–Ω–∏—è: {trunk}"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        tg_message = await bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode="HTML"
        )
        
        # –¢–∏–ø –∑–≤–æ–Ω–∫–∞ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if caller_internal and connected_internal:
            call_type = 2  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
            is_internal = True
        elif caller_internal:
            call_type = 1  # –∏—Å—Ö–æ–¥—è—â–∏–π  
            is_internal = False
        else:
            call_type = 0  # –≤—Ö–æ–¥—è—â–∏–π
            is_internal = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        await save_telegram_message(
            message_id=tg_message.message_id,
            event_type="bridge_v2",
            token=token,
            caller=caller,
            callee=connected,
            is_internal=is_internal,
            call_status=2,  # —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            call_type=call_type
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è V2 –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        save_v2_message(uid, chat_id, tg_message.message_id, "bridge_v2")
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ bridge_id —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if bridge_id:
            bridge_sent_cache.add(bridge_id)
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—Ä–µ–º—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏  
        bridge_recent_pairs[bridge_key] = current_time
        
        logging.info(f"[process_bridge_v2] Sent BRIDGE message {tg_message.message_id} to chat {chat_id}")
        return {"status": "sent", "message_id": tg_message.message_id, "deleted_previous": len(deleted)}
        
    except Exception as e:
        logging.error(f"[process_bridge_v2] Failed to send BRIDGE message: {e}")
        raise e 