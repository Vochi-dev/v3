"""
–ö—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
"""
import asyncio
import json
import logging
from typing import Dict, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class IntegrationsCache:
    """–ö—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π"""
    
    def __init__(self):
        self._cache: Dict[str, dict] = {}  # {enterprise_number: active_integrations}
        self._last_updated: Dict[str, datetime] = {}
        self._lock = asyncio.Lock()
        self._is_initialized = False
    
    async def get_config(self, enterprise_number: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        
        Args:
            enterprise_number: –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0367")
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç
            
        Example:
            {
                "retailcrm": {
                    "enabled": True,
                    "api_url": "https://test.retailcrm.ru",
                    "api_key": "key123"
                }
            }
        """
        async with self._lock:
            config = self._cache.get(enterprise_number)
            if config:
                logger.debug(f"–ö—ç—à HIT –¥–ª—è {enterprise_number}: {list(config.keys())}")
            else:
                logger.debug(f"–ö—ç—à MISS –¥–ª—è {enterprise_number}")
            return config
    
    async def update_config(self, enterprise_number: str, config: dict):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∫—ç—à–µ
        
        Args:
            enterprise_number: –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            config: –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        """
        async with self._lock:
            self._cache[enterprise_number] = config
            self._last_updated[enterprise_number] = datetime.utcnow()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è {enterprise_number}: {list(config.keys())}")
    
    async def remove_config(self, enterprise_number: str):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞"""
        async with self._lock:
            self._cache.pop(enterprise_number, None)
            self._last_updated.pop(enterprise_number, None)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –∫—ç—à–∞ –¥–ª—è {enterprise_number}")
    
    async def load_all_configs(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î –≤ –∫—ç—à"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            import asyncpg
            from app.config import DB_CONFIG
            
            conn = await asyncpg.connect(**DB_CONFIG)
            try:
                rows = await conn.fetch("""
                    SELECT number, integrations_config 
                    FROM enterprises 
                    WHERE integrations_config IS NOT NULL
                """)
                
                loaded_count = 0
                async with self._lock:
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
                    self._cache.clear()
                    self._last_updated.clear()
                    
                    for row in rows:
                        enterprise_number = row['number']
                        config_json = row['integrations_config']
                        
                        if not config_json:
                            continue
                            
                        # –ü–∞—Ä—Å–∏–º JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                        try:
                            full_config = json.loads(config_json) if isinstance(config_json, str) else config_json
                        except (json.JSONDecodeError, TypeError) as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {enterprise_number}: {e}")
                            continue
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                        active_config = {}
                        for integration_type, integration_config in full_config.items():
                            if isinstance(integration_config, dict) and integration_config.get('enabled', False):
                                active_config[integration_type] = integration_config
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                        if active_config:
                            self._cache[enterprise_number] = active_config
                            self._last_updated[enterprise_number] = datetime.utcnow()
                            loaded_count += 1
                
                self._is_initialized = True
                logger.info(f"üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ –∫—ç—à")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for ent_num, config in self._cache.items():
                    integrations_list = list(config.keys())
                    logger.info(f"  üìã {ent_num}: {integrations_list}")
                    
            finally:
                await conn.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ –∫—ç—à: {e}")
            self._is_initialized = False
    
    async def has_active_integrations(self, enterprise_number: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        async with self._lock:
            return enterprise_number in self._cache
    
    async def get_integration_types(self, enterprise_number: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        config = await self.get_config(enterprise_number)
        return list(config.keys()) if config else []
    
    def get_cache_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        cache_size_bytes = len(str(self._cache).encode('utf-8'))
        
        return {
            "cached_enterprises": len(self._cache),
            "total_integrations": sum(len(config) for config in self._cache.values()),
            "last_update": max(self._last_updated.values()) if self._last_updated else None,
            "cache_size_kb": round(cache_size_bytes / 1024, 2),
            "is_initialized": self._is_initialized,
            "enterprises": {
                ent_num: list(config.keys()) 
                for ent_num, config in self._cache.items()
            }
        }
    
    async def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        async with self._lock:
            self._cache.clear()
            self._last_updated.clear()
            self._is_initialized = False
            logger.warning("üßπ –ö—ç—à –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
integrations_cache = IntegrationsCache()