"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
"""
import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Optional

from .cache import integrations_cache

logger = logging.getLogger(__name__)


class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self, update_interval: int = 300):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.cache = integrations_cache
        self.update_task: Optional[asyncio.Task] = None
        self.update_interval = update_interval
        self._is_running = False
        
    async def start_cache_updater(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
        if not self.update_task or self.update_task.done():
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval}s)")
            self.update_task = asyncio.create_task(self._cache_update_loop())
            self._is_running = True
    
    async def stop_cache_updater(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.update_task and not self.update_task.done():
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
            self.update_task.cancel()
            try:
                await self.update_task
            except asyncio.CancelledError:
                pass
            self.update_task = None
            self._is_running = False
    
    async def _cache_update_loop(self):
        """–§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞"""
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        await self.cache.load_all_configs()
        
        while True:
            try:
                await asyncio.sleep(self.update_interval)
                
                logger.debug("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
                start_time = datetime.utcnow()
                
                await self.cache.load_all_configs()
                
                elapsed = (datetime.utcnow() - start_time).total_seconds()
                logger.debug(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ {elapsed:.2f}s")
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def force_reload_enterprise(self, enterprise_number: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        
        Args:
            enterprise_number: –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            import asyncpg
            from app.config import DB_CONFIG
            
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è {enterprise_number}")
            
            conn = await asyncpg.connect(**DB_CONFIG)
            try:
                row = await conn.fetchrow("""
                    SELECT integrations_config 
                    FROM enterprises 
                    WHERE number = $1
                """, enterprise_number)
                
                if row and row['integrations_config']:
                    # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    config_json = row['integrations_config']
                    try:
                        full_config = json.loads(config_json) if isinstance(config_json, str) else config_json
                    except (json.JSONDecodeError, TypeError) as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {enterprise_number}: {e}")
                        await self.cache.remove_config(enterprise_number)
                        return
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                    active_config = {}
                    for integration_type, integration_config in full_config.items():
                        if isinstance(integration_config, dict) and integration_config.get('enabled', False):
                            active_config[integration_type] = integration_config
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    if active_config:
                        await self.cache.update_config(enterprise_number, active_config)
                        logger.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {enterprise_number}: {list(active_config.keys())}")
                    else:
                        await self.cache.remove_config(enterprise_number)
                        logger.info(f"üóëÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è {enterprise_number}, —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
                else:
                    # –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î - —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                    await self.cache.remove_config(enterprise_number)
                    logger.info(f"üóëÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î –¥–ª—è {enterprise_number}, —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞")
                    
            finally:
                await conn.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–ª—è {enterprise_number}: {e}")
    
    async def warm_up_cache(self):
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        logger.info("üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        start_time = datetime.utcnow()
        
        await self.cache.load_all_configs()
        
        elapsed = (datetime.utcnow() - start_time).total_seconds()
        stats = self.cache.get_cache_stats()
        
        logger.info(f"‚úÖ –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Ç –∑–∞ {elapsed:.2f}s: {stats['cached_enterprises']} –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π, {stats['total_integrations']} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
    
    def get_manager_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞"""
        return {
            "is_running": self._is_running,
            "update_interval": self.update_interval,
            "task_status": "running" if self.update_task and not self.update_task.done() else "stopped",
            "cache_stats": self.cache.get_cache_stats()
        }
    
    async def health_check(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        stats = self.get_manager_stats()
        cache_stats = stats["cache_stats"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
        is_fresh = True
        if cache_stats["last_update"]:
            age = datetime.utcnow() - cache_stats["last_update"]
            is_fresh = age < timedelta(minutes=10)  # –ö—ç—à —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–≤–µ–∂–∏–º 10 –º–∏–Ω—É—Ç
        
        health = {
            "status": "healthy" if stats["is_running"] and is_fresh else "degraded",
            "manager_running": stats["is_running"],
            "cache_initialized": cache_stats["is_initialized"],
            "cache_fresh": is_fresh,
            "cached_enterprises": cache_stats["cached_enterprises"],
            "total_integrations": cache_stats["total_integrations"],
            "last_update": cache_stats["last_update"]
        }
        
        return health


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞
cache_manager = CacheManager()