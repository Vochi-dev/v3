#!/usr/bin/env python3
"""
Metadata Cache Service

–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:
- GSM/SIP –ª–∏–Ω–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
- –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å –§–ò–û –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ 
- –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
- –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
"""

import asyncio
import asyncpg
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Any

logger = logging.getLogger(__name__)

class MetadataCache:
    """–ö—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π"""
    
    def __init__(self, db_pool: asyncpg.Pool):
        self.db = db_pool
        self.cache: Dict[str, Dict[str, Any]] = {}
        self.last_update: Dict[str, datetime] = {}
        
    async def load_enterprise_metadata(self, enterprise_number: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –≤ –∫—ç—à"""
        try:
            logger.info(f"üóÑÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—ç—à–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            if enterprise_number not in self.cache:
                self.cache[enterprise_number] = {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º GSM –ª–∏–Ω–∏–∏
            await self._load_gsm_lines(enterprise_number)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º SIP –ª–∏–Ω–∏–∏  
            await self._load_sip_lines(enterprise_number)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await self._load_managers(enterprise_number)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            await self._load_enterprise_data(enterprise_number)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ª–∏–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞)
            await self._load_backup_lines(enterprise_number)
            
            self.last_update[enterprise_number] = datetime.now()
            
            logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number} –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {enterprise_number}: {e}")
            return False
    
    async def _load_gsm_lines(self, enterprise_number: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç GSM –ª–∏–Ω–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ GoIP –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫"""
        async with self.db.acquire() as conn:
            query = """
            SELECT 
                gl.line_id,
                gl.internal_id,
                gl.phone_number,
                gl.line_name,
                gl.prefix,
                g.gateway_name as goip_name,
                g.device_ip as goip_ip,
                s.name as shop_name
            FROM gsm_lines gl
            LEFT JOIN goip g ON gl.goip_id = g.id
            LEFT JOIN shop_lines sl ON gl.id = sl.gsm_line_id
            LEFT JOIN shops s ON sl.shop_id = s.id
            WHERE gl.enterprise_number = $1
            """
            
            rows = await conn.fetch(query, enterprise_number)
            
            lines = {}
            for row in rows:
                line_data = {
                    "internal_id": row['internal_id'],
                    "phone": row['phone_number'],
                    "name": row['line_name'] or f"GSM-{row['line_id']}",
                    "prefix": row['prefix'],
                    "operator": self._extract_operator(row['line_name']),
                    "goip_name": row['goip_name'],
                    "goip_ip": row['goip_ip'],
                    "shop_name": row['shop_name']
                }
                # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ line_id (internal_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π)
                lines[row['line_id']] = line_data
            
            self.cache[enterprise_number]["gsm_lines"] = lines
            logger.debug(f"üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(lines)} GSM –ª–∏–Ω–∏–π –¥–ª—è {enterprise_number}")
    
    async def _load_sip_lines(self, enterprise_number: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SIP –ª–∏–Ω–∏–∏"""
        async with self.db.acquire() as conn:
            query = """
            SELECT 
                line_name,
                prefix,
                provider_id,
                in_schema,
                out_schema
            FROM sip_unit
            WHERE enterprise_number = $1
            """
            
            rows = await conn.fetch(query, enterprise_number)
            
            sip_lines = {}
            for row in rows:
                sip_lines[row['line_name']] = {
                    "name": row['line_name'],
                    "prefix": row['prefix'],
                    "provider_id": row['provider_id'],
                    "in_schema": row['in_schema'],
                    "out_schema": row['out_schema'],
                    "type": "SIP"
                }
            
            self.cache[enterprise_number]["sip_lines"] = sip_lines
            logger.debug(f"‚òéÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sip_lines)} SIP –ª–∏–Ω–∏–π –¥–ª—è {enterprise_number}")
    
    async def _load_managers(self, enterprise_number: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏"""
        async with self.db.acquire() as conn:
            query = """
            SELECT 
                u.id as user_id,
                u.last_name,
                u.first_name,
                u.patronymic,
                u.personal_phone,
                u.follow_me_number,
                u.follow_me_enabled,
                uip.phone_number as internal_phone,
                uip.password as internal_password
            FROM users u
            JOIN user_internal_phones uip ON u.id = uip.user_id
            WHERE u.enterprise_number = $1
            ORDER BY u.last_name, u.first_name
            """
            
            rows = await conn.fetch(query, enterprise_number)
            
            managers = {}
            for row in rows:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –§–ò–û
                full_name_parts = [row['last_name'], row['first_name']]
                if row['patronymic']:
                    full_name_parts.append(row['patronymic'])
                full_name = ' '.join(full_name_parts)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò.–û.)
                short_name = row['last_name']
                if row['first_name']:
                    short_name += f" {row['first_name'][0]}."
                if row['patronymic']:
                    short_name += f"{row['patronymic'][0]}."
                
                manager_data = {
                    "user_id": row['user_id'],
                    "full_name": full_name,
                    "short_name": short_name,
                    "last_name": row['last_name'],
                    "first_name": row['first_name'],
                    "patronymic": row['patronymic'],
                    "personal_phone": row['personal_phone'],
                    "follow_me_number": row['follow_me_number'],
                    "follow_me_enabled": row['follow_me_enabled'],
                    "internal_password": row['internal_password']
                }
                
                managers[row['internal_phone']] = manager_data
            
            self.cache[enterprise_number]["managers"] = managers
            logger.debug(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(managers)} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è {enterprise_number}")
    
    async def _load_enterprise_data(self, enterprise_number: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        async with self.db.acquire() as conn:
            query = """
            SELECT 
                number,
                name,
                name2,
                bot_token,
                chat_id,
                host,
                ip,
                secret,
                active
            FROM enterprises
            WHERE number = $1
            """
            
            row = await conn.fetchrow(query, enterprise_number)
            
            if row:
                enterprise_data = {
                    "number": row['number'],
                    "name": row['name'],
                    "name2": row['name2'],
                    "bot_token": row['bot_token'],
                    "chat_id": row['chat_id'],
                    "host": row['host'],
                    "ip": row['ip'],
                    "secret": row['secret'],
                    "active": row['active']
                }
                
                self.cache[enterprise_number]["enterprise"] = enterprise_data
                logger.debug(f"üè¢ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
    
    async def _load_backup_lines(self, enterprise_number: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ª–∏–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ –ø–æ–ª–µ
        self.cache[enterprise_number]["backup_lines"] = {}
        logger.debug(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è {enterprise_number} (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    
    def _extract_operator(self, line_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏"""
        if not line_name:
            return "Unknown"
        
        line_name_upper = line_name.upper()
        if "–ú–¢–°" in line_name_upper or "MTS" in line_name_upper:
            return "–ú–¢–°"
        elif "A1" in line_name_upper or "VELCOM" in line_name_upper:
            return "A1"
        elif "LIFE" in line_name_upper:
            return "life:)"
        elif "SIP" in line_name_upper:
            return "SIP"
        else:
            return "GSM"
    
    # === –ú–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É ===
    
    def get_line_name(self, enterprise_number: str, line_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –ø–æ ID"""
        if enterprise_number not in self.cache:
            return f"–õ–∏–Ω–∏—è {line_id}"
        
        # –ò—â–µ–º –≤ GSM –ª–∏–Ω–∏—è—Ö
        gsm_lines = self.cache[enterprise_number].get("gsm_lines", {})
        if line_id in gsm_lines:
            return gsm_lines[line_id]["name"]
        
        # –ò—â–µ–º –≤ SIP –ª–∏–Ω–∏—è—Ö
        sip_lines = self.cache[enterprise_number].get("sip_lines", {})
        if line_id in sip_lines:
            return sip_lines[line_id]["name"]
        
        return f"–õ–∏–Ω–∏—è {line_id}"
    
    def get_line_operator(self, enterprise_number: str, line_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ª–∏–Ω–∏–∏ –ø–æ ID"""
        if enterprise_number not in self.cache:
            return "Unknown"
        
        gsm_lines = self.cache[enterprise_number].get("gsm_lines", {})
        if line_id in gsm_lines:
            return gsm_lines[line_id]["operator"]
        
        sip_lines = self.cache[enterprise_number].get("sip_lines", {})
        if line_id in sip_lines:
            return "SIP"
        
        return "Unknown"
    
    def get_manager_name(self, enterprise_number: str, internal_phone: str, short: bool = False) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –Ω–æ–º–µ—Ä—É"""
        if enterprise_number not in self.cache:
            return f"–î–æ–±.{internal_phone}"
        
        managers = self.cache[enterprise_number].get("managers", {})
        if internal_phone in managers:
            if short:
                return managers[internal_phone]["short_name"]
            else:
                return managers[internal_phone]["full_name"]
        
        return f"–î–æ–±.{internal_phone}"
    
    def get_manager_personal_phone(self, enterprise_number: str, internal_phone: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if enterprise_number not in self.cache:
            return None
        
        managers = self.cache[enterprise_number].get("managers", {})
        if internal_phone in managers:
            return managers[internal_phone]["personal_phone"]
        
        return None
    
    def get_manager_follow_me_number(self, enterprise_number: str, internal_phone: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä FollowMe –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if enterprise_number not in self.cache:
            return None
        
        managers = self.cache[enterprise_number].get("managers", {})
        if internal_phone in managers:
            return managers[internal_phone]["follow_me_number"]
        
        return None
    
    def get_manager_follow_me_enabled(self, enterprise_number: str, internal_phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω –ª–∏ FollowMe —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if enterprise_number not in self.cache:
            return False
        
        managers = self.cache[enterprise_number].get("managers", {})
        if internal_phone in managers:
            return managers[internal_phone].get("follow_me_enabled", False)
        
        return False
    
    def get_manager_full_data(self, enterprise_number: str, internal_phone: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if enterprise_number not in self.cache:
            return None
        
        managers = self.cache[enterprise_number].get("managers", {})
        if internal_phone in managers:
            return managers[internal_phone].copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        return None
    
    def get_enterprise_data(self, enterprise_number: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        if enterprise_number not in self.cache:
            return None
        
        return self.cache[enterprise_number].get("enterprise")
    
    def get_backup_lines(self, enterprise_number: str, primary_line: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ª–∏–Ω–∏–π"""
        if enterprise_number not in self.cache:
            return []
        
        backup_lines = self.cache[enterprise_number].get("backup_lines", {})
        return backup_lines.get(primary_line, [])
    
    def is_line_exists(self, enterprise_number: str, line_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏"""
        if enterprise_number not in self.cache:
            return False
        
        gsm_lines = self.cache[enterprise_number].get("gsm_lines", {})
        sip_lines = self.cache[enterprise_number].get("sip_lines", {})
        
        return line_id in gsm_lines or line_id in sip_lines
    
    def is_manager_exists(self, enterprise_number: str, internal_phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if enterprise_number not in self.cache:
            return False
        
        managers = self.cache[enterprise_number].get("managers", {})
        return internal_phone in managers
    
    def get_all_internal_phones(self, enterprise_number: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        if enterprise_number not in self.cache:
            return []
        
        managers = self.cache[enterprise_number].get("managers", {})
        return list(managers.keys())
    
    def get_all_line_ids(self, enterprise_number: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ ID –ª–∏–Ω–∏–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        if enterprise_number not in self.cache:
            return []
        
        gsm_lines = self.cache[enterprise_number].get("gsm_lines", {})
        sip_lines = self.cache[enterprise_number].get("sip_lines", {})
        
        return list(gsm_lines.keys()) + list(sip_lines.keys())
    
    async def load_all_active_enterprises(self) -> int:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π"""
        try:
            async with self.db.acquire() as conn:
                query = "SELECT number FROM enterprises WHERE active = true ORDER BY number"
                rows = await conn.fetch(query)
                
                loaded_count = 0
                for row in rows:
                    enterprise_number = row['number']
                    if await self.load_enterprise_metadata(enterprise_number):
                        loaded_count += 1
                
                logger.info(f"üóÑÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {loaded_count}/{len(rows)} –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π")
                return loaded_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π: {e}")
            return 0
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        total_enterprises = len(self.cache)
        total_lines = 0
        total_managers = 0
        
        for enterprise_data in self.cache.values():
            gsm_lines = enterprise_data.get("gsm_lines", {})
            sip_lines = enterprise_data.get("sip_lines", {})
            managers = enterprise_data.get("managers", {})
            
            # –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            total_lines += len(gsm_lines) + len(sip_lines)
            total_managers += len(managers)
        
        return {
            "enterprises": total_enterprises,
            "total_lines": total_lines,
            "total_managers": total_managers,
            "last_updates": {k: v.isoformat() for k, v in self.last_update.items()},
            "memory_enterprises": list(self.cache.keys())
        }
    
    def clear_enterprise_cache(self, enterprise_number: str):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        if enterprise_number in self.cache:
            del self.cache[enterprise_number]
        if enterprise_number in self.last_update:
            del self.last_update[enterprise_number]
        logger.info(f"üóëÔ∏è –ö—ç—à –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number} –æ—á–∏—â–µ–Ω")
    
    def clear_all_cache(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à"""
        self.cache.clear()
        self.last_update.clear()
        logger.info("üóëÔ∏è –í–µ—Å—å –∫—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω")


# === –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===

def format_phone_display(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É"""
    if not phone:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits = ''.join(filter(str.isdigit, phone))
    
    if len(digits) == 12 and digits.startswith('375'):
        # –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä: +375 (29) 123-45-67
        return f"+375 ({digits[3:5]}) {digits[5:8]}-{digits[8:10]}-{digits[10:12]}"
    elif len(digits) == 11 and digits.startswith('7'):
        # –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: +7 (999) 123-45-67  
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    else:
        return phone


def extract_internal_phone_from_channel(channel: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∏–∑ Channel —Å—Ç—Ä–æ–∫–∏"""
    if not channel:
        return None
    
    # –ü—Ä–∏–º–µ—Ä—ã: "SIP/150-00000123", "PJSIP/151-00000456"
    parts = channel.split('/')
    if len(parts) >= 2:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ñ–∏—Å–∞
        phone_part = parts[1].split('-')[0]
        if phone_part.isdigit():
            return phone_part
    
    return None


def extract_line_id_from_exten(exten: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ª–∏–Ω–∏–∏ –∏–∑ Exten –ø–æ–ª—è"""
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, Exten –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å line_id –∏–ª–∏ internal_id
    return exten if exten else None

