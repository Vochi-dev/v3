import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command

from app.services.database import get_enterprises_with_tokens

logger = logging.getLogger(__name__)

async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç.")

async def start_bot(enterprise_number: str, token: str):
    bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
    dp = Dispatcher(bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã (aiogram 2.x)
    dp.register_message_handler(start_handler, commands=["start"])

    if enterprise_number == "0201":
        logger.setLevel(logging.DEBUG)
        logging.getLogger("aiogram").setLevel(logging.DEBUG)
        logging.getLogger("httpx").setLevel(logging.WARNING)
        logger.debug("üîç –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–æ—Ç–∞ 0201")
        logger.debug(f"–¢–æ–∫–µ–Ω: {token}")

    try:
        me = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç {enterprise_number} –∑–∞–ø—É—â–µ–Ω: @{me.username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ {enterprise_number}: {e}")
        return

    try:
        # –ó–∞–ø—É—Å–∫ polling (–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ —á–µ—Ä–µ–∑ executor)
        # –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å create_task, 
        # –Ω–æ –≤ aiogram 2.x –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ-–¥—Ä—É–≥–æ–º—É ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫:
        await dp.start_polling()
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è polling –¥–ª—è –±–æ—Ç–∞ {enterprise_number}: {e}")

async def start_enterprise_bots():
    enterprises = await get_enterprises_with_tokens()
    tasks = []
    for ent in enterprises:
        number = ent["number"]
        token = ent["bot_token"]
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks.append(asyncio.create_task(start_bot(number, token)))
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(start_enterprise_bots())
