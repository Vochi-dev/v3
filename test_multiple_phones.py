#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ person_uid
2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import json
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MultiplePhoneTestCase:
    def __init__(self):
        self.enterprise_number = "0367"
        self.test_phone_1 = "+375296254070"  # –û—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä
        self.test_phone_2 = "+375296111333"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (–¥–ª—è —Ç–µ—Å—Ç–∞)
        self.pg_pool = None
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            self.pg_pool = await asyncpg.create_pool(
                host="127.0.0.1",
                database="postgres", 
                user="postgres",
                password="r/Yskqh/ZbZuvjb2b3ahfg==",
                min_size=1,
                max_size=3
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
            
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.pg_pool:
            try:
                async with self.pg_pool.acquire() as conn:
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                    await conn.execute(
                        "DELETE FROM customers WHERE enterprise_number = $1 AND phone_e164 IN ($2, $3)",
                        self.enterprise_number, self.test_phone_2, self.test_phone_1
                    )
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                await self.pg_pool.close()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    async def get_customers_from_db(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î"""
        try:
            async with self.pg_pool.acquire() as conn:
                rows = await conn.fetch(
                    """SELECT enterprise_number, phone_e164, first_name, last_name, 
                              middle_name, enterprise_name, meta 
                       FROM customers 
                       WHERE enterprise_number = $1 AND phone_e164 IN ($2, $3)
                       ORDER BY phone_e164""",
                    self.enterprise_number, self.test_phone_1, self.test_phone_2
                )
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            return []

    async def test_case_1_create_multiple_phones_for_same_person(self):
        """–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        await self.cleanup()
        
        try:
            from app.services.customers import merge_customer_identity
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            await merge_customer_identity(
                enterprise_number=self.enterprise_number,
                phone_e164=self.test_phone_1,
                source="retailcrm",
                external_id="12345",
                fio={
                    "first_name": "–°—Ç–µ–ø–∞–Ω",
                    "last_name": "–ü–µ—Ç—Ä–æ–≤",
                    "middle_name": "–î–µ–Ω–∏—Å–æ–≤–∏—á",
                    "enterprise_name": "–û–û–û –¢–µ—Å—Ç"
                },
                set_primary=True
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ {self.test_phone_1}")
            
            # –ü–æ–ª—É—á–∞–µ–º person_uid –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
            customers = await self.get_customers_from_db()
            if not customers:
                logger.error("‚ùå –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return False
                
            first_customer = customers[0]
            meta = first_customer.get('meta', {})
            if isinstance(meta, str):
                meta = json.loads(meta)
            person_uid = meta.get('person_uid')
            
            if not person_uid:
                logger.error("‚ùå person_uid –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏")
                return False
                
            logger.info(f"üìã Person UID: {person_uid}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å —Ç–µ–º –∂–µ person_uid
            await merge_customer_identity(
                enterprise_number=self.enterprise_number,
                phone_e164=self.test_phone_2,
                source="retailcrm",
                external_id="12345",  # –¢–æ—Ç –∂–µ ID –∫–ª–∏–µ–Ω—Ç–∞
                fio={
                    "first_name": "–°—Ç–µ–ø–∞–Ω",
                    "last_name": "–ü–µ—Ç—Ä–æ–≤", 
                    "middle_name": "–î–µ–Ω–∏—Å–æ–≤–∏—á",
                    "enterprise_name": "–û–û–û –¢–µ—Å—Ç"
                },
                set_primary=False
            )
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –Ω–æ–º–µ—Ä–∞ {self.test_phone_2}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            customers = await self.get_customers_from_db()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(customers)}")
            
            for customer in customers:
                logger.info(f"   üìû {customer['phone_e164']}: {customer.get('last_name', '')} {customer.get('first_name', '')}")
                meta = customer.get('meta', {})
                if isinstance(meta, str):
                    meta = json.loads(meta)
                logger.info(f"      Person UID: {meta.get('person_uid', 'None')}")
                logger.info(f"      RetailCRM IDs: {meta.get('ids', {}).get('retailcrm', [])}")
            
            return len(customers) == 2
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {e}")
            return False

    async def test_case_2_update_fio_for_all_phones(self):
        """–¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üß™ –¢–ï–°–¢ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
            customers_before = await self.get_customers_from_db()
            if len(customers_before) < 2:
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç 1 —Å–Ω–∞—á–∞–ª–∞.")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º person_uid
            meta = customers_before[0].get('meta', {})
            if isinstance(meta, str):
                meta = json.loads(meta)
            person_uid = meta.get('person_uid')
            
            if not person_uid:
                logger.error("‚ùå person_uid –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            logger.info("üìù –§–ò–û –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:")
            for customer in customers_before:
                logger.info(f"   üìû {customer['phone_e164']}: {customer.get('last_name', '')} {customer.get('first_name', '')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤
            from app.services.customers import update_fio_for_person
            await update_fio_for_person(
                enterprise_number=self.enterprise_number,
                person_uid=person_uid,
                first_name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",  # –ò–∑–º–µ–Ω—è–µ–º –∏–º—è
                last_name="–ò–≤–∞–Ω–æ–≤",      # –ò–∑–º–µ–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é
                middle_name="–ü–µ—Ç—Ä–æ–≤–∏—á",  # –ò–∑–º–µ–Ω—è–µ–º –æ—Ç—á–µ—Å—Ç–≤–æ
                enterprise_name="–û–û–û –ù–æ–≤–æ–µ"
            )
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            customers_after = await self.get_customers_from_db()
            logger.info("üìù –§–ò–û –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            for customer in customers_after:
                logger.info(f"   üìû {customer['phone_e164']}: {customer.get('last_name', '')} {customer.get('first_name', '')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –§–ò–û –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
            all_updated = True
            for customer in customers_after:
                if customer.get('first_name') != '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä' or customer.get('last_name') != '–ò–≤–∞–Ω–æ–≤':
                    all_updated = False
                    break
            
            if all_updated:
                logger.info("‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–µ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {e}")
            return False

    async def test_case_3_primary_integration_check(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
        logger.info("üß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            async with self.pg_pool.acquire() as conn:
                row = await conn.fetchrow(
                    "SELECT integrations_config FROM enterprises WHERE number = $1",
                    self.enterprise_number
                )
                if not row:
                    logger.error("‚ùå –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return False
                
                integrations_config = row["integrations_config"] or {}
                primary_integration = integrations_config.get("smart", {}).get("primary")
                
                logger.info(f"üîß –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {primary_integration}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RetailCRM —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π
                if primary_integration == "retailcrm":
                    logger.info("‚úÖ RetailCRM —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {primary_integration}, –æ–∂–∏–¥–∞–ª–∞—Å—å retailcrm")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3: {e}")
            return False

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        
        try:
            await self.setup()
            
            results = {
                "test_1_multiple_phones": await self.test_case_1_create_multiple_phones_for_same_person(),
                "test_2_fio_update": await self.test_case_2_update_fio_for_all_phones(),
                "test_3_primary_integration": await self.test_case_3_primary_integration_check()
            }
            
            logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            for test_name, result in results.items():
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
                logger.info(f"   {test_name}: {status}")
            
            all_passed = all(results.values())
            if all_passed:
                logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            else:
                logger.warning("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
                
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
            return None
        finally:
            # –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if self.pg_pool:
                await self.pg_pool.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    test_case = MultiplePhoneTestCase()
    results = await test_case.run_all_tests()
    
    if results:
        print("\n" + "="*60)
        print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print("="*60)
        for test_name, result in results.items():
            status = "–ü–†–û–ô–î–ï–ù ‚úÖ" if result else "–ù–ï –ü–†–û–ô–î–ï–ù ‚ùå"
            print(f"{test_name}: {status}")
        print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
