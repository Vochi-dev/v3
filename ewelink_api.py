from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
import uvicorn
import logging
import sys
import os
import json
import time
from urllib.parse import urlencode
import requests
import asyncpg

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å EWeLinkDevices –∏–∑ ewelink_devices.py
from ewelink_devices import EWeLinkDevices

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='ewelink_service.log',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s'
)

app = FastAPI(title="eWeLink API Service", description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è eWeLink-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏", version="1.0")

device_client = EWeLinkDevices()
if not device_client.load_tokens():
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã eWeLink! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ CLI –∏–ª–∏ callback.")
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã eWeLink! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ CLI –∏–ª–∏ callback.")

# --- –£–¥–∞–ª—è—é –∑–∞–≥—Ä—É–∑–∫—É DEVICEID_TO_ENTERPRISE ---

# –ò—Å–ø—Ä–∞–≤–ª—è—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (—É–±–∏—Ä–∞—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
DB_DSN = "postgresql://postgres:r/Yskqh/ZbZuvjb2b3ahfg==@localhost:5432/postgres".strip()

async def log_unit_status_history(device_id, prev_status, new_status, failure_counter, action_type, action_result, user_initiator, extra_info=None):
    try:
        conn = await asyncpg.connect(DB_DSN)
        row = await conn.fetchrow("SELECT number FROM enterprises WHERE host = $1", device_id)
        enterprise_number = row['number'] if row else None
        if not enterprise_number:
            logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω enterprise_number –¥–ª—è device_id={device_id}, –∑–∞–ø–∏—Å—å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            await conn.close()
            return
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        logging.info(f"unit_status_history params: enterprise_number={enterprise_number} (type={type(enterprise_number)}), prev_status={prev_status} (type={type(prev_status)}), new_status={new_status} (type={type(new_status)}), failure_counter={failure_counter} (type={type(failure_counter)}), action_type={action_type} (type={type(action_type)}), action_result={action_result} (type={type(action_result)}), user_initiator={user_initiator} (type={type(user_initiator)}), extra_info={extra_info} (type={type(extra_info)})")
        print(f"[DEBUG] failure_counter –¥–æ int: {repr(failure_counter)} (type={type(failure_counter)})")
        logging.info(f"[DEBUG] failure_counter –¥–æ int: {repr(failure_counter)} (type={type(failure_counter)})")
        try:
            failure_counter = int(str(failure_counter).strip())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è failure_counter –∫ int: {failure_counter} ({e})")
            failure_counter = 0
        try:
            extra_info_json = json.dumps(extra_info, ensure_ascii=False) if extra_info else None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ extra_info: {extra_info} ({e})")
            extra_info_json = None
        await conn.execute(
            """
            INSERT INTO unit_status_history (enterprise_number, prev_status, new_status, change_time, failure_counter, action_type, action_result, user_initiator, extra_info)
            VALUES ($1, $2, $3, now(), $4, $5, $6, $7, $8)
            """,
            enterprise_number, prev_status, new_status, failure_counter, action_type, action_result, user_initiator, extra_info_json
        )
        await conn.close()
        logging.info(f"unit_status_history: –∑–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è {enterprise_number}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ unit_status_history: {e} | DSN={DB_DSN}")

class ToggleRequest(BaseModel):
    device_id: str
    state: bool

@app.post("/toggle")
async def toggle_device(req: ToggleRequest):
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {req.device_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {'on' if req.state else 'off'}")
    if not device_client.access_token:
        logging.error("–ù–µ—Ç access_token –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏!")
        raise HTTPException(status_code=500, detail="–ù–µ—Ç access_token –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏!")
    result = device_client.toggle_device(req.device_id, req.state)
    # --- –õ–û–ì–ò–†–£–ï–ú –í unit_status_history ---
    prev_status = 'on' if req.state else 'off'
    new_status = 'off' if req.state == False else 'on'
    failure_counter = 0
    action_type = 'ewelink_toggle'
    action_result = 'success' if result else 'fail'
    user_initiator = 'api'
    extra_info = {'device_id': req.device_id, 'state': req.state}
    await log_unit_status_history(req.device_id, prev_status, new_status, failure_counter, action_type, action_result, user_initiator, extra_info)
    if result:
        logging.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {req.device_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {'on' if req.state else 'off'}")
        return {"success": True, "message": f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {req.device_id} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ"}
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {req.device_id}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

@app.get("/status/{device_id}")
def get_status(device_id: str):
    logging.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")
    if not device_client.access_token:
        logging.error("–ù–µ—Ç access_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!")
        raise HTTPException(status_code=500, detail="–ù–µ—Ç access_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!")
    status = device_client.get_device_status(device_id)
    if status:
        return {"device_id": device_id, "status": status.get('params', {}).get('switch', 'unknown'), "online": status.get('online', False)}
    else:
        logging.error(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ API")
        raise HTTPException(status_code=404, detail="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ API")

@app.get("/devices")
def get_devices():
    logging.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    if not device_client.access_token:
        logging.error("–ù–µ—Ç access_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")
        raise HTTPException(status_code=500, detail="–ù–µ—Ç access_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")
    devices = device_client.get_devices(save_to_file=False)
    if devices is not None:
        return {"devices": devices}
    else:
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

@app.get("/ewelink-auth-url")
def get_ewelink_auth_url():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OAuth2 URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    app_id = device_client.app_id
    app_secret = device_client.app_secret
    region = device_client.region
    nonce = str(int(time.time()))
    state = str(int(time.time()))
    seq = str(int(time.time() * 1000))
    message = f"{app_id}_{seq}"
    import hmac, hashlib, base64
    signature = base64.b64encode(hmac.new(app_secret.encode(), message.encode(), digestmod=hashlib.sha256).digest()).decode()
    redirect_url = "https://bot.vochi.by/ewelink-debug/"
    params = {
        "clientId": app_id,
        "seq": seq,
        "authorization": signature,
        "redirectUrl": redirect_url,
        "grantType": "authorization_code",
        "state": state,
        "nonce": nonce,
        "showQRCode": "false"
    }
    url = f"https://c2ccdn.coolkit.cc/oauth/index.html?{urlencode(params)}"
    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ OAuth2 —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {url}")
    return {"auth_url": url}

@app.get("/ewelink-callback/")
async def ewelink_callback(request: Request):
    """Production endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OAuth –∫–æ–¥–∞ –æ—Ç eWeLink"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏ —Ä–µ–≥–∏–æ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        code = request.query_params.get('code')
        region = request.query_params.get('region', 'eu')
        state = request.query_params.get('state')
        
        logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω OAuth –∫–æ–¥: {code[:10] if code else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}... —Ä–µ–≥–∏–æ–Ω: {region}, state: {state}")
        
        if not code:
            logging.error("‚ùå OAuth –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return {"error": "OAuth –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
        success = device_client.exchange_oauth_code(code, region=region)
        
        if success:
            logging.info("üéâ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            return {
                "success": True,
                "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                "timestamp": time.time()
            }
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã")
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã",
                "timestamp": time.time()
            }
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}",
            "timestamp": time.time()
        }

@app.get("/ewelink-debug/")
async def ewelink_debug(request: Request):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ eWeLink callback"""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    headers = dict(request.headers)
    query_params = dict(request.query_params)
    client_ip = request.client.host
    
    debug_info = {
        "method": request.method,
        "url": str(request.url),
        "client_ip": client_ip,
        "headers": headers,
        "query_params": query_params,
        "timestamp": time.time()
    }
    
    logging.info(f"[DEBUG] eWeLink request: {debug_info}")
    return {"status": "ok", "debug_info": debug_info}

@app.post("/ewelink-debug/")
async def ewelink_debug_post(request: Request):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
    headers = dict(request.headers)
    query_params = dict(request.query_params)
    client_ip = request.client.host
    
    try:
        body = await request.body()
        body_text = body.decode('utf-8') if body else ""
    except:
        body_text = ""
    
    debug_info = {
        "method": request.method,
        "url": str(request.url),
        "client_ip": client_ip,
        "headers": headers,
        "query_params": query_params,
        "body": body_text,
        "timestamp": time.time()
    }
    
    logging.info(f"[DEBUG] eWeLink POST request: {debug_info}")
    return {"status": "ok", "debug_info": debug_info}

@app.post("/ewelink-refresh-token/")
async def refresh_token():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token —á–µ—Ä–µ–∑ refresh_token"""
    try:
        success = device_client.refresh_access_token()
        if success:
            return {
                "success": True,
                "message": "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                "timestamp": time.time()
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ refresh_token.",
                "timestamp": time.time()
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}",
            "timestamp": time.time()
        }

@app.post("/ewelink-manual-oauth/")
async def manual_oauth_exchange(code: str, region: str = "eu"):
    """–†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ OAuth –∫–æ–¥–∞ –æ—Ç httpbin.org"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
        success = device_client.exchange_oauth_code(code, region=region)
        if success:
            return {
                "success": True,
                "message": "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ OAuth –∫–æ–¥–∞!",
                "timestamp": time.time()
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ —Ä–µ–≥–∏–æ–Ω.",
                "timestamp": time.time()
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ OAuth –∫–æ–¥–∞: {e}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}",
            "timestamp": time.time()
        }

if __name__ == "__main__":
    port = int(os.environ.get("EWELINK_API_PORT", 8010))
    uvicorn.run("ewelink_api:app", host="0.0.0.0", port=port, log_level="info") 