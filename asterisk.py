# -*- coding: utf-8 -*-
"""
Asterisk Call Management Service
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö Asterisk —Ö–æ—Å—Ç–∞—Ö
–ü–æ—Ä—Ç: 8018
"""

import uvicorn
from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import JSONResponse
import asyncpg
import logging
import subprocess
import time
from typing import Dict, Optional, Tuple
import asyncio
from datetime import datetime

from app.config import POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, POSTGRES_HOST, POSTGRES_PORT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Asterisk Call Management API",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã–µ Asterisk —Ö–æ—Å—Ç—ã",
    version="1.0.0"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = {
    "user": POSTGRES_USER,
    "password": POSTGRES_PASSWORD,
    "database": POSTGRES_DB,
    "host": POSTGRES_HOST,
    "port": POSTGRES_PORT,
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö Asterisk —Ö–æ—Å—Ç–æ–≤
ASTERISK_CONFIG = {
    "ssh_port": 5059,
    "ssh_user": "root",
    "ssh_password": "5atx9Ate@pbx"
}

async def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        return await asyncpg.connect(**DB_CONFIG)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise HTTPException(status_code=500, detail="Database connection error")

async def validate_client_secret(client_id: str, conn: asyncpg.Connection) -> Optional[Dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ clientId –ø—Ä–æ—Ç–∏–≤ secret –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enterprises"""
    try:
        query = """
        SELECT number, name, ip 
        FROM enterprises 
        WHERE secret = $1 AND active = true
        """
        result = await conn.fetchrow(query, client_id)
        
        if result:
            return {
                "enterprise_number": result["number"],
                "name": result["name"],
                "host_ip": result["ip"]
            }
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ clientId: {e}")
        return None

async def get_customer_info_from_db(conn: asyncpg.Connection, enterprise_number: str, phone: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã customers"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        phone_normalized = phone.strip()
        if not phone_normalized.startswith("+"):
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ +, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
            digits = ''.join(c for c in phone_normalized if c.isdigit())
            if digits.startswith("375") and len(digits) == 12:
                phone_normalized = f"+{digits}"
            else:
                phone_normalized = f"+{digits}"
        
        query = """
        SELECT first_name, last_name, middle_name, enterprise_name, phone_e164,
               meta->>'person_uid' as person_uid,
               meta->>'source_type' as source_type
        FROM customers 
        WHERE enterprise_number = $1 AND phone_e164 = $2
        LIMIT 1
        """
        
        logger.info(f"üîç Searching customer: enterprise={enterprise_number}, phone_orig='{phone}', phone_norm='{phone_normalized}'")
        row = await conn.fetchrow(query, enterprise_number, phone_normalized)
        
        if row:
            customer = dict(row)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: enterprise_name > –§–ò–û (–±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞)
            display_parts = []
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            if customer.get('enterprise_name'):
                display_parts.append(customer['enterprise_name'])
            
            # –ó–∞—Ç–µ–º –§–ò–û (—Ç–æ–ª—å–∫–æ –§–∞–º–∏–ª–∏—è –ò–º—è –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞)
            fio_parts = []
            if customer.get('last_name'):
                fio_parts.append(customer['last_name'])
            if customer.get('first_name'):
                fio_parts.append(customer['first_name'])
            # –û—Ç—á–µ—Å—Ç–≤–æ —É–±–∏—Ä–∞–µ–º: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º middle_name
            
            if fio_parts:
                fio = ' '.join(fio_parts)
                if customer.get('enterprise_name'):
                    display_parts.append(f"({fio})")
                else:
                    display_parts.append(fio)
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            display_name = ' '.join(display_parts) if display_parts else phone
            
            customer['display_name'] = display_name
            return customer
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        return None

def ssh_originate_call(host_ip: str, from_ext: str, to_phone: str, customer_name: str = None) -> Tuple[bool, str]:
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ SSH CLI –∫–æ–º–∞–Ω–¥—ã"""
    try:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        to_phone = to_phone.strip()
        # 1) –ü–µ—Ä–µ–¥ originate –∫–ª–∞–¥—ë–º –Ω–æ–º–µ—Ä –∞–±–æ–Ω–µ–Ω—Ç–∞ –≤ Asterisk DB, —á—Ç–æ–±—ã –¥–∏–∞–ª–ø–ª–∞–Ω –º–æ–≥ –≤—ã—Å—Ç–∞–≤–∏—Ç—å CallerID –Ω–∞ –ø–µ—Ä–≤–æ–π –Ω–æ–≥–µ
        try:
            db_put_cmd = [
                'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
                'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
                f"asterisk -rx \"database put extcall nextcall_{from_ext} {to_phone}\"",
            ]
            subprocess.run(db_put_cmd, capture_output=True, text=True, timeout=6)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if customer_name:
                # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–≤–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –§–∞–º–∏–ª–∏–µ–π –∏ –ò–º–µ–Ω–µ–º
                clean_name = '..'.join(customer_name.split())
                db_put_name_cmd = [
                    'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
                    'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
                    '-o', 'StrictHostKeyChecking=no',
                    '-o', 'ConnectTimeout=10',
                    f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
                    f"asterisk -rx \"database put extcall nextname_{from_ext} {clean_name}\"",
                ]
                subprocess.run(db_put_name_cmd, capture_output=True, text=True, timeout=6)
                logger.info(f"üìù Set customer name for ext {from_ext}: {clean_name}")
        except Exception as _:
            pass

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º SSH –∫–æ–º–∞–Ω–¥—É ORIGINATE
        cli_command = f'asterisk -rx "channel originate LOCAL/{from_ext}@web-originate application Dial LOCAL/{to_phone}@inoffice"'
        
        ssh_command = [
            'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
            'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
            cli_command
        ]
        
        logger.info(f"üîó SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host_ip}: {from_ext} -> {to_phone}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SSH –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            ssh_command,
            capture_output=True,
            text=True,
            timeout=15
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ CLI –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {host_ip}: {from_ext} -> {to_phone}")
            # CLI –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –µ—Å–ª–∏ returncode = 0, –∑–Ω–∞—á–∏—Ç –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—à–ª–∞
            return True, f"Call initiated successfully: {from_ext} -> {to_phone}"
        else:
            error_msg = result.stderr.strip() if result.stderr else "Unknown SSH error"
            logger.error(f"‚ùå SSH –æ—à–∏–±–∫–∞ –Ω–∞ {host_ip}: {error_msg}")
            return False, f"SSH command failed: {error_msg}"
            
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host_ip}")
        return False, f"SSH timeout to {host_ip}"
    except FileNotFoundError:
        logger.error("sshpass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False, "SSH client (sshpass) not available"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSH –Ω–∞ {host_ip}: {e}")
        return False, f"SSH error: {str(e)}"

def ssh_get_active_channels(host_ip: str) -> Tuple[bool, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ SSH CLI"""
    try:
        cli_command = 'asterisk -rx "core show channels concise"'
        
        ssh_command = [
            'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
            'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
            cli_command
        ]
        
        result = subprocess.run(
            ssh_command,
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            return True, result.stdout.strip()
        else:
            return False, result.stderr.strip() if result.stderr else "Command failed"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å {host_ip}: {e}")
        return False, f"Error: {str(e)}"

def ssh_monitor_call(host_ip: str, monitor_from: str, target_channel: str, action: str) -> Tuple[bool, str]:
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ SSH CLI"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ ChanSpy –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è
        spy_flags = {
            "09": "bq",      # –ü–æ–¥—Å–ª—É—à–∏–≤–∞–Ω–∏–µ (spy)
            "01": "bqw",     # –°—É—Ñ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (whisper)  
            "02": "Bbqw"     # –í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (barge)
        }
        
        flags = spy_flags.get(action, "bq")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        cli_command = f'asterisk -rx "channel originate LOCAL/{monitor_from}@inoffice application ChanSpy {target_channel},{flags}"'
        
        ssh_command = [
            'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
            'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
            cli_command
        ]
        
        action_names = {"09": "–ø–æ–¥—Å–ª—É—à–∏–≤–∞–Ω–∏–µ", "01": "—Å—É—Ñ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "02": "–≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"}
        action_name = action_names.get(action, "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        logger.info(f"üéß SSH –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ({action_name}) –∫ {host_ip}: {monitor_from} -> {target_channel}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SSH –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            ssh_command,
            capture_output=True,
            text=True,
            timeout=15
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ {host_ip}: {action_name} –¥–ª—è {target_channel}")
            return True, f"Monitoring initiated successfully: {action_name} for {target_channel}"
        else:
            error_msg = result.stderr.strip() if result.stderr else "Unknown SSH error"
            logger.error(f"‚ùå SSH –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ {host_ip}: {error_msg}")
            return False, f"SSH monitoring failed: {error_msg}"
            
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç SSH –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫ {host_ip}")
        return False, f"SSH monitoring timeout to {host_ip}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSH –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ {host_ip}: {e}")
        return False, f"SSH monitoring error: {str(e)}"


def ssh_transfer_call(host_ip: str, from_channel: str, to_extension: str, transfer_type: str) -> Tuple[bool, str]:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ SSH CLI
    
    Args:
        host_ip: IP —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ Asterisk —Ö–æ—Å—Ç–∞
        from_channel: –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä SIP/150-xxxx)
        to_extension: –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 151)
        transfer_type: —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞ ("blind" –∏–ª–∏ "attended")
    
    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        if transfer_type == "blind":
            # –°–ª–µ–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥: –Ω–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª
            action_name = "—Å–ª–µ–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥"
            # –î–ª—è —Å–ª–µ–ø–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª, bridged —Å from_channel
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ bridge
            bridge_info_command = f'asterisk -rx "core show channel {from_channel}"'
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            ssh_bridge_command = [
                'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
                'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
                bridge_info_command
            ]
            
            bridge_result = subprocess.run(ssh_bridge_command, capture_output=True, text=True, timeout=10)
            
            if bridge_result.returncode != 0:
                return False, f"Failed to get channel info: {bridge_result.stderr}"
            
            # –ò—â–µ–º BRIDGEPEER –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª)
            bridged_channel = None
            for line in bridge_result.stdout.split('\n'):
                if 'BRIDGEPEER=' in line:
                    bridged_channel = line.split('BRIDGEPEER=')[1].strip()
                    break
            
            if bridged_channel:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º BRIDGEPEER (–≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª) –Ω–∞ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä
                cli_command = f'asterisk -rx "channel redirect {bridged_channel} inoffice,{to_extension},1"'
                logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª (BRIDGEPEER): {bridged_channel} -> {to_extension}")
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π redirect –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ BRIDGEPEER
                cli_command = f'asterisk -rx "channel redirect {from_channel} inoffice,{to_extension},1"'
                logger.warning(f"‚ö†Ô∏è BRIDGEPEER –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {from_channel} -> {to_extension}")
        elif transfer_type == "attended":
            # –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º Local –∫–∞–Ω–∞–ª —Å proper transfer logic
            action_name = "–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–µ–º –∫–∞–Ω–∞–ª–µ (BRIDGEPEER)
            bridge_info_command = f'asterisk -rx "core show channel {from_channel}"'
            
            ssh_bridge_command = [
                'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
                'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
                bridge_info_command
            ]
            
            bridge_result = subprocess.run(ssh_bridge_command, capture_output=True, text=True, timeout=10)
            
            if bridge_result.returncode != 0:
                return False, f"Failed to get channel info for attended transfer: {bridge_result.stderr}"
            
            # –ò—â–µ–º BRIDGEPEER (–≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª)
            bridged_channel = None
            for line in bridge_result.stdout.split('\n'):
                if 'BRIDGEPEER=' in line:
                    bridged_channel = line.split('BRIDGEPEER=')[1].strip()
                    break
            
            if bridged_channel:
                # ATTENDED TRANSFER –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù - –∏—Å–ø–æ–ª—å–∑—É–µ–º blind transfer
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–º–µ—Ä (–∫–∞–∫ blind transfer)
                cli_command = f'asterisk -rx "channel redirect {bridged_channel} inoffice,{to_extension},1"'
                logger.info(f"‚ö†Ô∏è Attended transfer –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º blind transfer: {bridged_channel} -> {to_extension}")
            else:
                return False, f"BRIDGEPEER –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è attended transfer"
        else:
            return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: {transfer_type}"
        
        ssh_command = [
            'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
            'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
            cli_command
        ]
        
        logger.info(f"üìû {action_name.capitalize()}: {from_channel} -> {to_extension} –Ω–∞ {host_ip}")
        logger.info(f"üíª CLI –∫–æ–º–∞–Ω–¥–∞: {cli_command}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SSH –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            ssh_command,
            capture_output=True,
            text=True,
            timeout=15
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ {host_ip}: {action_name} –Ω–∞ {to_extension}")
            return True, f"Transfer initiated successfully: {action_name} to {to_extension}"
        else:
            error_msg = result.stderr.strip() if result.stderr else "Unknown SSH error"
            logger.error(f"‚ùå SSH –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {host_ip}: {error_msg}")
            return False, f"SSH transfer command failed: {error_msg}"
            
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç SSH –ø–µ—Ä–µ–≤–æ–¥–∞ –∫ {host_ip}")
        return False, f"SSH transfer timeout to {host_ip}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSH –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {host_ip}: {e}")
        return False, f"SSH transfer error: {str(e)}"


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "asterisk-call-management", "port": 8018}

@app.get("/api/monitor")
async def monitor_call(
    action: str = Query(..., description="–¢–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: 09 (–ø–æ–¥—Å–ª—É—à–∏–≤–∞–Ω–∏–µ), 01 (—Å—É—Ñ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ), 02 (–≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ)"),
    target: str = Query(..., description="–ù–æ–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"),
    monitor_from: str = Query(..., description="–ù–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å"),
    clientId: str = Query(..., description="Client ID (secret –∏–∑ enterprises)")
):
    """
    –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - action: —Ç–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      - "09": –ø–æ–¥—Å–ª—É—à–∏–≤–∞–Ω–∏–µ (spy)
      - "01": —Å—É—Ñ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (whisper) 
      - "02": –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (barge)
    - target: –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)
    - monitor_from: –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 151)
    - clientId: secret –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enterprises
    
    –ü—Ä–∏–º–µ—Ä:
    GET /api/monitor?action=09&target=150&monitor_from=151&clientId=eb7ba607633a47af8edc9b8d257d29e4
    """
    
    start_time = time.time()
    
    try:
        logger.info(f"üéß –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: action={action}, target={target}, monitor_from={monitor_from}, clientId={clientId[:8]}...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not action or not target or not monitor_from or not clientId:
            raise HTTPException(
                status_code=400, 
                detail="–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: action, target, monitor_from, clientId"
            )
        
        if action not in ["09", "01", "02"]:
            raise HTTPException(
                status_code=400, 
                detail="action –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 09 (–ø–æ–¥—Å–ª—É—à–∏–≤–∞–Ω–∏–µ), 01 (—Å—É—Ñ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ), 02 (–≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ)"
            )
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await get_db_connection()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º clientId
            enterprise_info = await validate_client_secret(clientId, conn)
            
            if not enterprise_info:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π clientId: {clientId}")
                raise HTTPException(
                    status_code=401, 
                    detail="Invalid clientId"
                )
            
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {enterprise_info['name']} ({enterprise_info['enterprise_number']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ host_ip
            host_ip = enterprise_info.get("host_ip")
            if not host_ip:
                logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω host_ip –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_info['enterprise_number']}")
                raise HTTPException(
                    status_code=500, 
                    detail="Host IP not configured for this enterprise"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–∞ target –Ω–æ–º–µ—Ä–µ
            channels_success, channels_data = ssh_get_active_channels(host_ip)
            
            if not channels_success:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {channels_data}")
                raise HTTPException(
                    status_code=500,
                    detail=f"Cannot get active channels: {channels_data}"
                )
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª target –Ω–æ–º–µ—Ä–∞
            target_channel = f"SIP/{target}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
            if channels_data and target not in channels_data:
                logger.warning(f"üîç Target {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å SIP/{target}")
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            success, message = ssh_monitor_call(host_ip, monitor_from, target_channel, action)
            
            if success:
                response_time = round((time.time() - start_time) * 1000, 2)
                
                action_names = {"09": "–ø–æ–¥—Å–ª—É—à–∏–≤–∞–Ω–∏–µ", "01": "—Å—É—Ñ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "02": "–≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"}
                action_name = action_names.get(action, "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                
                return JSONResponse(
                    status_code=200,
                    content={
                        "success": True,
                        "message": message,
                        "action": action,
                        "action_name": action_name,
                        "target": target,
                        "monitor_from": monitor_from,
                        "target_channel": target_channel,
                        "enterprise": enterprise_info['name'],
                        "enterprise_number": enterprise_info['enterprise_number'],
                        "host_ip": host_ip,
                        "response_time_ms": response_time
                    }
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {message}")
                raise HTTPException(
                    status_code=500,
                    detail=f"Monitoring initiation failed: {message}"
                )
                
        finally:
            await conn.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )

@app.get("/api/makecallexternal")
async def make_call_external(
    code: str = Query(..., description="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä"),
    phone: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
    clientId: str = Query(..., description="Client ID (secret –∏–∑ enterprises)")
):
    """
    –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - code: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150, 151)
    - phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +375296254070)
    - clientId: secret –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enterprises
    
    –ü—Ä–∏–º–µ—Ä:
    GET /api/makecallexternal?code=150&phone=+375296254070&clientId=eb7ba607633a47af8edc9b8d257d29e4
    """
    
    start_time = time.time()
    
    try:
        # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        phone = phone.strip()
        code = code.strip()
        
        logger.info(f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫: {code} -> '{phone}', clientId: {clientId[:8]}...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not code or not phone or not clientId:
            raise HTTPException(
                status_code=400, 
                detail="–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: code, phone, clientId"
            )
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await get_db_connection()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º clientId
            enterprise_info = await validate_client_secret(clientId, conn)
            
            if not enterprise_info:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π clientId: {clientId}")
                raise HTTPException(
                    status_code=401, 
                    detail="Invalid clientId"
                )
            
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {enterprise_info['name']} ({enterprise_info['enterprise_number']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ host_ip
            host_ip = enterprise_info.get("host_ip")
            if not host_ip:
                logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω host_ip –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_info['enterprise_number']}")
                raise HTTPException(
                    status_code=500, 
                    detail="Host IP not configured for this enterprise"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã customers
            customer_info = await get_customer_info_from_db(conn, enterprise_info['enterprise_number'], phone)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
            customer_name = None
            if customer_info:
                customer_name = customer_info.get('display_name')
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ SSH CLI
            success, message = ssh_originate_call(host_ip, code, phone, customer_name)
            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –≤ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã call_logs
                    table_exists = await conn.fetchval("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables 
                            WHERE table_schema = 'public' 
                            AND table_name = 'call_logs'
                        )
                    """)
                    
                    if table_exists:
                        log_query = """
                        INSERT INTO call_logs (enterprise_number, from_ext, to_phone, status, created_at)
                        VALUES ($1, $2, $3, $4, $5)
                        """
                        await conn.execute(
                            log_query,
                            enterprise_info['enterprise_number'],
                            code,
                            phone,
                            'initiated',
                            datetime.now()
                        )
                    else:
                        logger.info("–¢–∞–±–ª–∏—Ü–∞ call_logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
                        
                except Exception as log_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {log_error}")
                
                response_time = round((time.time() - start_time) * 1000, 2)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
                response_content = {
                    "success": True,
                    "message": message,
                    "enterprise": enterprise_info['name'],
                    "enterprise_number": enterprise_info['enterprise_number'],
                    "from_ext": code,
                    "to_phone": phone,
                    "host_ip": host_ip,
                    "response_time_ms": response_time
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
                if customer_info:
                    response_content["customer"] = customer_info
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    display_name = customer_info.get("display_name", phone)
                    response_content["display_name"] = display_name
                    logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ {code} -> {phone} ({display_name})")
                else:
                    response_content["display_name"] = phone
                    logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ {code} -> {phone} (–∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î)")
                
                return JSONResponse(
                    status_code=200,
                    content=response_content
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {message}")
                raise HTTPException(
                    status_code=500,
                    detail=f"Call initiation failed: {message}"
                )
                
        finally:
            await conn.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )

@app.get("/api/status")
async def api_status():
    """–°—Ç–∞—Ç—É—Å API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await get_db_connection()
        db_status = "connected"
        await conn.close()
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    return {
        "service": "asterisk-call-management",
        "version": "1.0.0",
        "database": db_status,
        "asterisk_config": {
            "method": "SSH CLI",
            "ssh_port": ASTERISK_CONFIG["ssh_port"],
            "ssh_user": ASTERISK_CONFIG["ssh_user"]
        }
    }


@app.get("/api/transfer")
async def transfer_call(
    transfer_type: str = Query(..., description="–¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: blind (—Å–ª–µ–ø–æ–π) –∏–ª–∏ attended (–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π)"),
    from_ext: str = Query(..., description="–ù–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–≤–æ–Ω–æ–∫"),
    to_ext: str = Query(..., description="–ù–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å"),
    clientId: str = Query(..., description="Client ID (secret –∏–∑ enterprises)")
):
    """
    –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - transfer_type: —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞
      - "blind": —Å–ª–µ–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥ (# + –Ω–æ–º–µ—Ä) - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
      - "attended": –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (*2 + –Ω–æ–º–µ—Ä) - —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
    - from_ext: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–≤–æ–Ω–æ–∫
    - to_ext: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    - clientId: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    start_time = time.time()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await get_db_connection()
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è clientId
            enterprise_info = await validate_client_secret(clientId, conn)
            if not enterprise_info:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π clientId –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {clientId}")
                raise HTTPException(status_code=401, detail="Invalid clientId")
            
            enterprise_name = enterprise_info['name']
            enterprise_number = enterprise_info['enterprise_number']
            host_ip = enterprise_info['host_ip']
            
            logger.info(f"üìû –ü–ï–†–ï–í–û–î –ó–í–û–ù–ö–ê: {from_ext} -> {to_ext} ({transfer_type}) –¥–ª—è {enterprise_name} ({enterprise_number})")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            if transfer_type not in ["blind", "attended"]:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: {transfer_type}")
                raise HTTPException(status_code=400, detail="transfer_type must be 'blind' or 'attended'")
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–æ–º–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç
            success_channels, channels_info = ssh_get_active_channels(host_ip)
            if not success_channels:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å {host_ip}")
                raise HTTPException(status_code=500, detail="Failed to get active channels")
            
            # –ò—â–µ–º –∫–∞–Ω–∞–ª –Ω–æ–º–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç
            from_channel = None
            for line in channels_info.split('\n'):
                if line.strip() and f"SIP/{from_ext}-" in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    parts = line.split('!')
                    if parts:
                        from_channel = parts[0]
                        break
            
            if not from_channel:
                logger.error(f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–º–µ—Ä–∞ {from_ext} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {host_ip}")
                raise HTTPException(status_code=404, detail=f"Active channel for extension {from_ext} not found")
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {from_channel}")
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–æ–Ω–∫–∞
            success, message = ssh_transfer_call(host_ip, from_channel, to_ext, transfer_type)
            
            if not success:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {message}")
                raise HTTPException(status_code=500, detail=message)
            
            response_time = round((time.time() - start_time) * 1000, 2)
            
            response_data = {
                "success": True,
                "message": message,
                "transfer_type": transfer_type,
                "transfer_name": "—Å–ª–µ–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥" if transfer_type == "blind" else "–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
                "from_ext": from_ext,
                "to_ext": to_ext,
                "from_channel": from_channel,
                "enterprise": enterprise_name,
                "enterprise_number": enterprise_number,
                "host_ip": host_ip,
                "response_time_ms": response_time
            }
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: {from_ext} -> {to_ext} ({transfer_type}) –∑–∞ {response_time}ms")
            return response_data
            
        finally:
            await conn.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        raise HTTPException(status_code=500, detail=f"Transfer error: {str(e)}")


if __name__ == "__main__":
    uvicorn.run(
        "asterisk:app",
        host="0.0.0.0",
        port=8018,
        reload=True,
        log_level="info"
    )