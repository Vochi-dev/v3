# -*- coding: utf-8 -*-
"""
Asterisk Call Management Service
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö Asterisk —Ö–æ—Å—Ç–∞—Ö
–ü–æ—Ä—Ç: 8018
"""

import uvicorn
from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import JSONResponse
import asyncpg
import logging
import subprocess
import time
from typing import Dict, Optional, Tuple
import asyncio
from datetime import datetime

from app.config import POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, POSTGRES_HOST, POSTGRES_PORT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Asterisk Call Management API",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã–µ Asterisk —Ö–æ—Å—Ç—ã",
    version="1.0.0"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = {
    "user": POSTGRES_USER,
    "password": POSTGRES_PASSWORD,
    "database": POSTGRES_DB,
    "host": POSTGRES_HOST,
    "port": POSTGRES_PORT,
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö Asterisk —Ö–æ—Å—Ç–æ–≤
ASTERISK_CONFIG = {
    "ssh_port": 5059,
    "ssh_user": "root",
    "ssh_password": "5atx9Ate@pbx"
}

async def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        return await asyncpg.connect(**DB_CONFIG)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise HTTPException(status_code=500, detail="Database connection error")

async def validate_client_secret(client_id: str, conn: asyncpg.Connection) -> Optional[Dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ clientId –ø—Ä–æ—Ç–∏–≤ secret –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enterprises"""
    try:
        query = """
        SELECT number, name, ip 
        FROM enterprises 
        WHERE secret = $1 AND active = true
        """
        result = await conn.fetchrow(query, client_id)
        
        if result:
            return {
                "enterprise_number": result["number"],
                "name": result["name"],
                "host_ip": result["ip"]
            }
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ clientId: {e}")
        return None

def ssh_originate_call(host_ip: str, from_ext: str, to_phone: str) -> Tuple[bool, str]:
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ SSH CLI –∫–æ–º–∞–Ω–¥—ã"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º SSH –∫–æ–º–∞–Ω–¥—É
        cli_command = f'asterisk -rx "channel originate LOCAL/{from_ext}@inoffice application Dial LOCAL/{to_phone}@inoffice"'
        
        ssh_command = [
            'sshpass', '-p', ASTERISK_CONFIG['ssh_password'],
            'ssh', '-p', str(ASTERISK_CONFIG['ssh_port']),
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{ASTERISK_CONFIG['ssh_user']}@{host_ip}",
            cli_command
        ]
        
        logger.info(f"üîó SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host_ip}: {from_ext} -> {to_phone}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SSH –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            ssh_command,
            capture_output=True,
            text=True,
            timeout=15
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ CLI –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {host_ip}: {from_ext} -> {to_phone}")
            # CLI –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –µ—Å–ª–∏ returncode = 0, –∑–Ω–∞—á–∏—Ç –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—à–ª–∞
            return True, f"Call initiated successfully: {from_ext} -> {to_phone}"
        else:
            error_msg = result.stderr.strip() if result.stderr else "Unknown SSH error"
            logger.error(f"‚ùå SSH –æ—à–∏–±–∫–∞ –Ω–∞ {host_ip}: {error_msg}")
            return False, f"SSH command failed: {error_msg}"
            
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host_ip}")
        return False, f"SSH timeout to {host_ip}"
    except FileNotFoundError:
        logger.error("sshpass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False, "SSH client (sshpass) not available"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSH –Ω–∞ {host_ip}: {e}")
        return False, f"SSH error: {str(e)}"

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "asterisk-call-management", "port": 8018}

@app.get("/api/makecallexternal")
async def make_call_external(
    code: str = Query(..., description="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä"),
    phone: str = Query(..., description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
    clientId: str = Query(..., description="Client ID (secret –∏–∑ enterprises)")
):
    """
    –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - code: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150, 151)
    - phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +375296254070)
    - clientId: secret –∏–∑ —Ç–∞–±–ª–∏—Ü—ã enterprises
    
    –ü—Ä–∏–º–µ—Ä:
    GET /api/makecallexternal?code=150&phone=+375296254070&clientId=eb7ba607633a47af8edc9b8d257d29e4
    """
    
    start_time = time.time()
    
    try:
        logger.info(f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫: {code} -> {phone}, clientId: {clientId[:8]}...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not code or not phone or not clientId:
            raise HTTPException(
                status_code=400, 
                detail="–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: code, phone, clientId"
            )
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await get_db_connection()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º clientId
            enterprise_info = await validate_client_secret(clientId, conn)
            
            if not enterprise_info:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π clientId: {clientId}")
                raise HTTPException(
                    status_code=401, 
                    detail="Invalid clientId"
                )
            
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {enterprise_info['name']} ({enterprise_info['enterprise_number']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ host_ip
            host_ip = enterprise_info.get("host_ip")
            if not host_ip:
                logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω host_ip –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_info['enterprise_number']}")
                raise HTTPException(
                    status_code=500, 
                    detail="Host IP not configured for this enterprise"
                )
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ SSH CLI
            success, message = ssh_originate_call(host_ip, code, phone)
            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –≤ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã call_logs
                    table_exists = await conn.fetchval("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables 
                            WHERE table_schema = 'public' 
                            AND table_name = 'call_logs'
                        )
                    """)
                    
                    if table_exists:
                        log_query = """
                        INSERT INTO call_logs (enterprise_number, from_ext, to_phone, status, created_at)
                        VALUES ($1, $2, $3, $4, $5)
                        """
                        await conn.execute(
                            log_query,
                            enterprise_info['enterprise_number'],
                            code,
                            phone,
                            'initiated',
                            datetime.now()
                        )
                    else:
                        logger.info("–¢–∞–±–ª–∏—Ü–∞ call_logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
                        
                except Exception as log_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {log_error}")
                
                response_time = round((time.time() - start_time) * 1000, 2)
                
                return JSONResponse(
                    status_code=200,
                    content={
                        "success": True,
                        "message": message,
                        "enterprise": enterprise_info['name'],
                        "enterprise_number": enterprise_info['enterprise_number'],
                        "from_ext": code,
                        "to_phone": phone,
                        "host_ip": host_ip,
                        "response_time_ms": response_time
                    }
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {message}")
                raise HTTPException(
                    status_code=500,
                    detail=f"Call initiation failed: {message}"
                )
                
        finally:
            await conn.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )

@app.get("/api/status")
async def api_status():
    """–°—Ç–∞—Ç—É—Å API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = await get_db_connection()
        db_status = "connected"
        await conn.close()
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    return {
        "service": "asterisk-call-management",
        "version": "1.0.0",
        "database": db_status,
        "asterisk_config": {
            "method": "SSH CLI",
            "ssh_port": ASTERISK_CONFIG["ssh_port"],
            "ssh_user": ASTERISK_CONFIG["ssh_user"]
        }
    }

if __name__ == "__main__":
    uvicorn.run(
        "asterisk:app",
        host="0.0.0.0",
        port=8018,
        reload=True,
        log_level="info"
    )