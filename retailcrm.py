#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üè™ RetailCRM Integration Service
================================

–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —Å RetailCRM.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ API v5.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 03.08.2025
–í–µ—Ä—Å–∏—è: 1.0 (–§–∞–∑–∞ 1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API)
"""

import asyncio
import os
import json
import logging
import sys
import time
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple

import aiohttp
import uvicorn
from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import asyncpg

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# RetailCRM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
RETAILCRM_CONFIG = {
    "base_url": "https://evgenybaevski.retailcrm.ru",
    "api_key": "NsX6ZE1W6C8vOkkcNm2NBNLzwVJxLNvl",
    "client_id": "8bc4e63e-4fb2-4e6b-a78f-1dbbc96f6ad4",
    "api_version": "v5",
    "timeout": 30
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/asterisk-webhook/logs/retailcrm.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("RetailCRM")

# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

class RetailCRMResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RetailCRM API"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    response_time: float
    endpoint: str


class PhoneData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    number: str

class CustomerData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    phone: Optional[str] = None  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    phones: Optional[List[PhoneData]] = None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    email: Optional[str] = None
    managerId: Optional[int] = None  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏


class CallEventData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    phone: str
    type: str  # incoming, outgoing
    duration: Optional[int] = None
    status: str  # answered, busy, failed, etc.
    customer_id: Optional[int] = None  # ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ RetailCRM
    manager_name: Optional[str] = None  # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    recording_url: Optional[str] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å


# =============================================================================
# RETAILCRM API CLIENT
# =============================================================================

class RetailCRMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RetailCRM API v5"""
    
    def __init__(self, config: Dict[str, Any]):
        self.base_url = config["base_url"]
        self.api_key = config["api_key"] 
        self.api_version = config["api_version"]
        self.timeout = config["timeout"]
        self.session: Optional[aiohttp.ClientSession] = None
        
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=self.timeout)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
    
    def _build_url(self, endpoint: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –¥–ª—è API endpoint"""
        base = f"{self.base_url}/api/{self.api_version}"
        endpoint = endpoint.lstrip('/')
        return f"{base}/{endpoint}"
    
    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict] = None,
        data: Optional[Dict] = None
    ) -> RetailCRMResponse:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ RetailCRM API"""
        
        start_time = time.time()
        url = self._build_url(endpoint)
        
        # –î–æ–±–∞–≤–ª—è–µ–º API key –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if params is None:
            params = {}
        params['apiKey'] = self.api_key
        
        logger.info(f"üîÑ {method.upper()} {endpoint}")
        logger.info(f"üì° URL: {url}")
        logger.info(f"üìã Params: {params}")
        if data:
            logger.info(f"üì¶ Data: {data}")
        
        try:
            if not self.session:
                raise RuntimeError("Client session not initialized")
                
            # –î–ª—è telephony endpoints –∏—Å–ø–æ–ª—å–∑—É–µ–º form-data —Å JSON —Å—Ç—Ä–æ–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if endpoint.startswith("/telephony/") and method == "POST":
                # Telephony endpoints —Ç—Ä–µ–±—É—é—Ç form-data —Å JSON —Å—Ç—Ä–æ–∫–∞–º–∏
                from aiohttp import FormData
                form_data = FormData()
                
                for key, value in data.items():
                    form_data.add_field(key, str(value))
                
                async with self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    data=form_data
                ) as response:
                    response_time = time.time() - start_time
                    response_text = await response.text()
                    
                    logger.info(f"‚è±Ô∏è Response time: {response_time:.3f}s")
                    logger.info(f"üìä Status: {response.status}")
                    logger.info(f"üìÑ Response: {response_text[:500]}...")
                    
                    if response.status in [200, 201]:
                        try:
                            response_data = json.loads(response_text) if response_text else {}
                            return RetailCRMResponse(
                                success=response_data.get("success", True),
                                data=response_data,
                                response_time=response_time,
                                endpoint=endpoint
                            )
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå JSON decode error: {e}")
                            return RetailCRMResponse(
                                success=False,
                                error=f"Invalid JSON response: {e}",
                                response_time=response_time,
                                endpoint=endpoint
                            )
                    else:
                        return RetailCRMResponse(
                            success=False,
                            error=f"HTTP {response.status}: {response_text}",
                            response_time=response_time,
                            endpoint=endpoint
                        )
            elif method == "POST" and data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º form-data –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
                from aiohttp import FormData
                form_data = FormData()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è form-data
                def add_to_form(form_obj, key_prefix, value):
                    if isinstance(value, dict):
                        for sub_key, sub_value in value.items():
                            add_to_form(form_obj, f"{key_prefix}[{sub_key}]", sub_value)
                    else:
                        form_obj.add_field(key_prefix, str(value))
                
                for key, value in data.items():
                    add_to_form(form_data, key, value)
                
                async with self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    data=form_data
                ) as response:
                    response_time = time.time() - start_time
                    response_text = await response.text()
                    
                    logger.info(f"‚è±Ô∏è Response time: {response_time:.3f}s")
                    logger.info(f"üìä Status: {response.status}")
                    logger.info(f"üìÑ Response: {response_text[:500]}...")
                    
                    if response.status in [200, 201]:
                        try:
                            response_data = json.loads(response_text)
                            return RetailCRMResponse(
                                success=True,
                                data=response_data,
                                response_time=response_time,
                                endpoint=endpoint
                            )
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå JSON decode error: {e}")
                            return RetailCRMResponse(
                                success=False,
                                error=f"Invalid JSON response: {e}",
                                response_time=response_time,
                                endpoint=endpoint
                            )
                    else:
                        return RetailCRMResponse(
                            success=False,
                            error=f"HTTP {response.status}: {response_text}",
                            response_time=response_time,
                            endpoint=endpoint
                        )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
                async with self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    json=data if data else None
                ) as response:
                    response_time = time.time() - start_time
                    response_text = await response.text()
                    
                    logger.info(f"‚è±Ô∏è Response time: {response_time:.3f}s")
                    logger.info(f"üìä Status: {response.status}")
                    logger.info(f"üìÑ Response: {response_text[:500]}...")
                    
                    if response.status in [200, 201]:
                        try:
                            response_data = json.loads(response_text)
                            return RetailCRMResponse(
                                success=True,
                                data=response_data,
                                response_time=response_time,
                                endpoint=endpoint
                            )
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå JSON decode error: {e}")
                            return RetailCRMResponse(
                                success=False,
                                error=f"Invalid JSON response: {e}",
                                response_time=response_time,
                                endpoint=endpoint
                            )
                    else:
                        return RetailCRMResponse(
                            success=False,
                            error=f"HTTP {response.status}: {response_text}",
                            response_time=response_time,
                            endpoint=endpoint
                        )
                    
        except asyncio.TimeoutError:
            response_time = time.time() - start_time
            logger.error(f"‚è∞ Request timeout after {response_time:.3f}s")
            return RetailCRMResponse(
                success=False,
                error="Request timeout",
                response_time=response_time,
                endpoint=endpoint
            )
        except Exception as e:
            response_time = time.time() - start_time
            logger.error(f"üí• Request error: {e}")
            return RetailCRMResponse(
                success=False,
                error=str(e),
                response_time=response_time,
                endpoint=endpoint
            )
    
    # =========================================================================
    # 1. –ë–ê–ó–û–í–´–ï API –ú–ï–¢–û–î–´
    # =========================================================================
    
    async def test_credentials(self) -> RetailCRMResponse:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞"""
        return await self._make_request("GET", "/credentials")
    
    async def get_sites(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ (—Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
        return await self._make_request("GET", "/reference/sites")
    
    # =========================================================================
    # 2. –†–ê–ë–û–¢–ê –° –ú–ï–ù–ï–î–ñ–ï–†–ê–ú–ò
    # =========================================================================
    
    async def get_users(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
        return await self._make_request("GET", "/users")
    
    async def get_user(self, user_id: int) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return await self._make_request("GET", f"/users/{user_id}")
    
    async def get_user_groups(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return await self._make_request("GET", "/user-groups")
    
    # =========================================================================
    # 3. –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò  
    # =========================================================================
    
    async def search_customer_by_phone(self, phone: str) -> RetailCRMResponse:
        """–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        params = {"filter[phone]": phone}
        return await self._make_request("GET", "/customers", params=params)
    
    async def get_customer(self, customer_id: int) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ ID"""
        return await self._make_request("GET", f"/customers/{customer_id}")
    
    async def create_customer(self, customer_data: CustomerData) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        # RetailCRM API v5 —Ç—Ä–µ–±—É–µ—Ç JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        customer_dict = customer_data.dict(exclude_none=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ phone, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ phones –º–∞—Å—Å–∏–≤
        if customer_dict.get("phone") and not customer_dict.get("phones"):
            customer_dict["phones"] = [{"number": customer_dict["phone"]}]
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ phone –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            customer_dict.pop("phone", None)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM API v5
        data = {
            "customer": json.dumps(customer_dict),  # JSON —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ form-data
            "site": "evgenybaevski"
        }
            
        return await self._make_request("POST", "/customers/create", data=data)
    
    async def edit_customer(self, customer_id: int, customer_data: CustomerData) -> RetailCRMResponse:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        data = customer_data.dict(exclude_none=True)
        return await self._make_request("POST", f"/customers/{customer_id}/edit", data=data)
    
    # =========================================================================
    # 4. –°–û–ë–´–¢–ò–Ø –¢–ï–õ–ï–§–û–ù–ò–ò
    # =========================================================================
    
    async def create_call_task(self, call_data: CallEventData) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –æ –∑–≤–æ–Ω–∫–µ –≤ RetailCRM"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        duration_text = ""
        if call_data.duration:
            minutes = call_data.duration // 60
            seconds = call_data.duration % 60
            duration_text = f" –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
        
        call_type_text = "üìû –í—Ö–æ–¥—è—â–∏–π" if call_data.type == "incoming" else "üìû –ò—Å—Ö–æ–¥—è—â–∏–π" 
        status_text = {
            "answered": "–æ—Ç–≤–µ—á–µ–Ω",
            "busy": "–∑–∞–Ω—è—Ç–æ", 
            "failed": "–Ω–µ –æ—Ç–≤–µ—á–µ–Ω",
            "no_answer": "–Ω–µ –æ—Ç–≤–µ—á–µ–Ω"
        }.get(call_data.status, call_data.status)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        task_title = f"{call_type_text} –∑–≤–æ–Ω–æ–∫"
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å HTML-–∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        commentary_parts = [f"–ó–≤–æ–Ω–æ–∫ –æ—Ç {call_data.phone}.{duration_text}"]
        commentary_parts.append(f"–°—Ç–∞—Ç—É—Å: {status_text}.")
        
        if call_data.manager_name:
            commentary_parts.append(f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {call_data.manager_name}.")
            
        if call_data.recording_url:
            # –°–æ–∑–¥–∞–µ–º HTML-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ RetailCRM
            recording_button = f"""
            
üéß –ó–ê–ü–ò–°–¨ –†–ê–ó–ì–û–í–û–†–ê:
<a href="{call_data.recording_url}" target="_blank" style="display: inline-block; background-color: #007bff; color: white; padding: 8px 15px; text-decoration: none; border-radius: 4px; font-weight: bold;">‚ñ∂Ô∏è –ü–†–û–°–õ–£–®–ê–¢–¨ –ó–ê–ü–ò–°–¨</a>

–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {call_data.recording_url}
            """.strip()
            commentary_parts.append(recording_button)
        
        commentary = " ".join(commentary_parts)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏
        data = {
            "task": json.dumps({
                "text": task_title,
                "commentary": commentary,
                "customer": {"id": call_data.customer_id},
                "performerId": 16  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ï–≤–≥–µ–Ω–∏–π –ë–∞–µ–≤—Å–∫–∏–π
            }),
            "site": "evgenybaevski"
        }
        
        return await self._make_request("POST", "/tasks/create", data=data)
    
    async def get_telephony_settings(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏"""
        return await self._make_request("GET", "/telephony/setting")
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –ü–û –û–§–ò–¶–ò–ê–õ–¨–ù–û–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò =====
    
    async def upload_calls_history(self, calls_data: list) -> RetailCRMResponse:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM"""
        # –î–ª—è /telephony/calls/upload –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å calls –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É –≤ form-data
        data = {
            "calls": json.dumps(calls_data),
            "clientId": RETAILCRM_CONFIG["client_id"]
        }
        return await self._make_request("POST", "/telephony/calls/upload", data=data)
    
    async def send_call_event(self, event_data: dict) -> RetailCRMResponse:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM"""
        # –î–ª—è /telephony/call/event –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å event –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É –≤ form-data
        data = {
            "event": json.dumps(event_data),
            "clientId": RETAILCRM_CONFIG["client_id"]
        }
        return await self._make_request("POST", "/telephony/call/event", data=data)
    
    async def get_responsible_manager(self, phone: str) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        params = {
            "phone": phone,
            "clientId": RETAILCRM_CONFIG["client_id"]
        }
        return await self._make_request("GET", "/telephony/manager", params=params)
    
    # =========================================================================
    # 5. –†–ê–ë–û–¢–ê –° –ó–ê–ö–ê–ó–ê–ú–ò
    # =========================================================================
    
    async def get_customer_orders(self, customer_id: int) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞"""
        params = {"filter[customerId]": customer_id}
        return await self._make_request("GET", "/orders", params=params)
    
    async def create_order(self, order_data: Dict[str, Any]) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        return await self._make_request("POST", "/orders/create", data=order_data)


# =============================================================================
# FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# =============================================================================

app = FastAPI(
    title="RetailCRM Integration Service",
    description="–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RetailCRM –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏",
    version="1.0.0"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
retailcrm_client = None

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ app.config)
PG_HOST = os.environ.get("POSTGRES_HOST", "127.0.0.1")
PG_PORT = int(os.environ.get("POSTGRES_PORT", 5432))
PG_USER = os.environ.get("POSTGRES_USER", "postgres")
PG_PASSWORD = os.environ.get("POSTGRES_PASSWORD", "r/Yskqh/ZbZuvjb2b3ahfg==")
PG_DB = os.environ.get("POSTGRES_DB", "postgres")

pg_pool: Optional[asyncpg.pool.Pool] = None

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏
STATS: Dict[str, int] = {
    "db_reads": 0,
    "db_writes": 0,
}

async def init_pg_pool() -> None:
    global pg_pool
    if pg_pool is None:
        pg_pool = await asyncpg.create_pool(
            host=PG_HOST,
            port=PG_PORT,
            user=PG_USER,
            password=PG_PASSWORD,
            database=PG_DB,
            min_size=1,
            max_size=10,
        )
        logger.info("‚úÖ PostgreSQL pool initialized for retailcrm service")

async def close_pg_pool() -> None:
    global pg_pool
    if pg_pool is not None:
        await pg_pool.close()
        pg_pool = None
        logger.info("‚úÖ PostgreSQL pool closed for retailcrm service")

async def fetch_retailcrm_config(enterprise_number: str) -> Dict[str, Any]:
    """–ß–∏—Ç–∞–µ—Ç –∏–∑ enterprises.integrations_config JSONB -> 'retailcrm' –¥–ª—è —é–Ω–∏—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π dict, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
    """
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    query = (
        "SELECT integrations_config -> 'retailcrm' AS cfg "
        "FROM enterprises WHERE number = $1"
    )
    async with pg_pool.acquire() as conn:
        row = await conn.fetchrow(query, enterprise_number)
        STATS["db_reads"] += 1
    if not row or row["cfg"] is None:
        return {}
    return dict(row["cfg"])  # asyncpg –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSONB –∫–∞–∫ dict

async def upsert_retailcrm_config(enterprise_number: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª—é—á retailcrm –≤ integrations_config —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ (merge)."""
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á retailcrm, –Ω–µ –∑–∞—Ç–∏—Ä–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–π JSONB
    query = (
        "UPDATE enterprises "
        "SET integrations_config = COALESCE(integrations_config, '{}'::jsonb) || jsonb_build_object('retailcrm', $2::jsonb) "
        "WHERE number = $1 "
        "RETURNING integrations_config -> 'retailcrm' AS cfg"
    )
    async with pg_pool.acquire() as conn:
        row = await conn.fetchrow(query, enterprise_number, config)
        STATS["db_writes"] += 1
    if not row:
        raise HTTPException(status_code=404, detail="Enterprise not found")
    return dict(row["cfg"]) if row["cfg"] is not None else {}

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞"""
    global retailcrm_client
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RetailCRM Integration Service")
    logger.info(f"üè™ RetailCRM URL: {RETAILCRM_CONFIG['base_url']}")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª PostgreSQL
    try:
        await init_pg_pool()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PostgreSQL pool: {e}")
    

@app.on_event("shutdown") 
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RetailCRM Integration Service")
    try:
        await close_pg_pool()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è PostgreSQL pool: {e}")


# =============================================================================
# API ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "RetailCRM Integration",
        "version": "1.0.0",
        "status": "running",
        "phase": "1 - API Testing",
        "retailcrm_url": RETAILCRM_CONFIG["base_url"]
    }


# =============================================================================
# –°–ò–°–¢–ï–ú–ù–´–ï ENDPOINTS: health, stats
# =============================================================================

@app.get("/health")
async def health() -> Dict[str, Any]:
    """–ü—Ä–æ—Å—Ç–æ–π healthcheck —Å–µ—Ä–≤–∏—Å–∞ retailcrm."""
    return {"status": "ok"}


@app.get("/stats")
async def stats() -> Dict[str, Any]:
    """–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ retailcrm."""
    pool_status: Dict[str, Any] = {"initialized": pg_pool is not None}
    return {
        "db": pool_status,
        "counters": STATS,
        "service": "retailcrm",
    }


# =============================================================================
# –ë–ê–ó–û–í–´–ï API –î–õ–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô (namespace /api/config)
# =============================================================================

@app.get("/api/config/{enterprise_number}")
async def api_get_config(enterprise_number: str) -> Dict[str, Any]:
    cfg = await fetch_retailcrm_config(enterprise_number)
    return {"enterprise_number": enterprise_number, "config": cfg}


class RetailCRMConfigBody(BaseModel):
    config: Dict[str, Any]


@app.put("/api/config/{enterprise_number}")
async def api_put_config(enterprise_number: str, body: RetailCRMConfigBody) -> Dict[str, Any]:
    updated = await upsert_retailcrm_config(enterprise_number, body.config)
    return {"enterprise_number": enterprise_number, "config": updated}


@app.get("/test/credentials")
async def test_credentials():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RetailCRM"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.test_credentials()
        return result.dict()


@app.get("/test/sites")
async def test_sites():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_sites()
        return result.dict()


@app.get("/test/users")
async def test_users():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_users()
        return result.dict()


@app.get("/test/user/{user_id}")
async def test_user(user_id: int):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_user(user_id)
        return result.dict()


@app.get("/test/search-customer")
async def test_search_customer(phone: str):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.search_customer_by_phone(phone)
        return result.dict()


@app.post("/test/create-customer")
async def test_create_customer(customer: CustomerData):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.create_customer(customer)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_create_customer: {e}")
        return {"success": False, "error": str(e)}


@app.post("/test/call-task")
async def test_call_task(call_data: CallEventData):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ –∑–≤–æ–Ω–∫–µ"""
    try:
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.create_call_task(call_data)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_call_task: {e}")
        return {"success": False, "error": str(e)}

# ===== –ù–û–í–´–ï ENDPOINTS –ü–û –û–§–ò–¶–ò–ê–õ–¨–ù–û–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò =====

@app.post("/test/upload-calls")
async def test_upload_calls():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        # –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        test_calls = [{
            "date": "2025-01-08 15:30:00",
            "type": "in",
            "phone": "375296254070",  # –ë–µ–∑ –ø–ª—é—Å–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            "code": "151",  # –û–¥–∏–Ω –∫–æ–¥, –Ω–µ –º–∞—Å—Å–∏–≤
            "duration": 120,  # –ß–∏—Å–ª–æ, –Ω–µ —Å—Ç—Ä–æ–∫–∞
            "result": "answered",  # result –≤–º–µ—Å—Ç–æ status
            "externalId": "test-call-001",  # externalId –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            "recordUrl": "https://bot.vochi.by/retailcrm/call-recording/27596e3c-1481-406f-a1b9-ffcaa6c737cc",
            "externalPhone": "375296254070"  # –ë–µ–∑ –ø–ª—é—Å–∞
        }]
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.upload_calls_history(test_calls)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_upload_calls: {e}")
        return {"success": False, "error": str(e)}

@app.post("/test/call-event")  
async def test_call_event():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ RetailCRM
        test_event = {
            "phone": "375296254070",  # –ë–µ–∑ –ø–ª—é—Å–∞
            "type": "in",
            "codes": ["151"],  # –ö–æ–¥ –ï–≤–≥–µ–Ω–∏—è –ë–∞–µ–≤—Å–∫–æ–≥–æ (ID 16) –∏–∑ RetailCRM users API
            "callExternalId": "test-call-event-002",  # callExternalId –¥–ª—è —Å–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
            "externalPhone": "375296254070"  # –ë–µ–∑ –ø–ª—é—Å–∞
        }
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.send_call_event(test_event)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_call_event: {e}")
        return {"success": False, "error": str(e)}

@app.get("/test/manager/{phone}")
async def test_get_manager(phone: str):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø–ª—é—Å –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
        clean_phone = phone.lstrip('+')
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.get_responsible_manager(clean_phone)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_get_manager: {e}")
        return {"success": False, "error": str(e)}

@app.post("/test/real-call")
async def test_real_call():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –∏–∑ –Ω–∞—à–µ–π –ë–î"""
    try:
        import uuid
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID 
        unique_id = str(uuid.uuid4())
        test_call = {
                "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "type": "in",
                "phone": "375296254070",
                "code": "151",
                "duration": 90,
                "result": "answered",
                "externalId": unique_id,
                "recordUrl": f"https://bot.vochi.by/retailcrm/call-recording/01777e5e-0a53-4dfd-8df9-14f3fd6fc000",
                "externalPhone": "375296254070"
            }
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.upload_calls_history([test_call])
            if result:
                return {
                    "success": True,
                    "call_data": test_call,
                    "result": result.dict()
                }
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_real_call: {e}")
        return {"success": False, "error": str(e)}


# ===== WEBHOOKS –î–õ–Ø RETAILCRM =====

@app.get("/retailcrm/make-call")
async def make_call_webhook(
    clientId: str,
    code: str, 
    phone: str,
    userId: int,
    externalPhone: str = None
):
    """Webhook –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞ –∏–∑ RetailCRM"""
    logger.info(f"üî• –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫: code={code}, phone={phone}, userId={userId}")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Asterisk
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
        logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: {phone}")
        return Response(status_code=200, content="OK")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
        return Response(status_code=500, content="Error")

@app.get("/retailcrm/status")  
async def status_change_webhook(
    clientId: str,
    userId: int,
    code: str,
    status: str
):
    """Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üìä –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞: userId={userId}, code={code}, status={status}")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
        return Response(status_code=200, content="OK")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return Response(status_code=500, content="Error")

@app.get("/retailcrm/config")
async def telephony_config_webhook():
    """Webhook –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info(f"üìû –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏")
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–¥–æ–≤
        config = {
            "users": [
                {"id": 16, "code": "151", "name": "–ï–≤–≥–µ–Ω–∏–π –ë–∞–µ–≤—Å–∫–∏–π"},
                {"id": 18, "code": "152", "name": "–î–∂—É–ª–∞–π –î–∂—É–Ω–æ–≤—ã–π"},
                {"id": 19, "code": "150", "name": "–ê–≤–≥—É—Å—Ç –¢–∏–º–ª–∏–¥–æ–≤—ã–π"}
            ],
            "success": True
        }
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {config}")
        return config
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": str(e)}

@app.get("/retailcrm/call-recording/{call_id}")
async def get_call_recording_proxy(call_id: str):
    """–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç RetailCRM –∫ –Ω–∞—à–∏–º —Ñ–∞–π–ª–∞–º"""
    logger.info(f"üéß –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞: {call_id}")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –∑–∞–ø–∏—Å–µ–π
        from fastapi.responses import RedirectResponse
        
        # –ò—â–µ–º UUID –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ call_id –∏–ª–∏ external_id
        real_recording_url = f"https://bot.vochi.by/recordings/file/{call_id}"
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {real_recording_url}")
        return RedirectResponse(url=real_recording_url)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        from fastapi.responses import JSONResponse
        return JSONResponse(
            status_code=404,
            content={"error": "Recording not found", "call_id": call_id}
        )

@app.get("/test/telephony-settings")
async def test_telephony_settings():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_telephony_settings()
        return result.dict()


# =============================================================================
# –ü–û–õ–ù–´–ô –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô
# =============================================================================

@app.get("/test/full-scenario")
async def test_full_scenario():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å RetailCRM"""
    
    results = {}
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        
        # 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("üî∏ 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        results["credentials"] = await client.test_credentials()
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logger.info("üî∏ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        results["sites"] = await client.get_sites()
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üî∏ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        results["users"] = await client.get_users()
        
        # 4. –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üî∏ 4. –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É...")
        test_phone = "+375296254070"
        results["search_customer"] = await client.search_customer_by_phone(test_phone)
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üî∏ 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        test_customer = CustomerData(
            firstName="–¢–µ—Å—Ç–æ–≤—ã–π",
            lastName="–ö–ª–∏–µ–Ω—Ç",
            phones=[PhoneData(number=test_phone)],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            email="test@example.com",
            managerId=16  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ï–≤–≥–µ–Ω–∏—é –ë–∞–µ–≤—Å–∫–æ–º—É
        )
        results["create_customer"] = await client.create_customer(test_customer)
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ –∑–≤–æ–Ω–∫–µ —Å –∑–∞–ø–∏—Å—å—é
        logger.info("üî∏ 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ –∑–≤–æ–Ω–∫–µ...")
        test_call = CallEventData(
            phone=test_phone,
            type="incoming", 
            duration=135,  # 2 –º–∏–Ω 15 —Å–µ–∫
            status="answered",
            customer_id=69,  # –ê–Ω–Ω–∞ –°–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            manager_name="–ï–≤–≥–µ–Ω–∏–π –ë–∞–µ–≤—Å–∫–∏–π",
                                recording_url="https://bot.vochi.by/recordings/file/27596e3c-1481-406f-a1b9-ffcaa6c737cc"
        )
        results["call_task"] = await client.create_call_task(test_call)
        
        # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
        logger.info("üî∏ 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏...")
        results["telephony_settings"] = await client.get_telephony_settings()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    summary = {
        "test_completed_at": datetime.now().isoformat(),
        "total_tests": len(results),
        "successful_tests": sum(1 for r in results.values() if r.success),
        "failed_tests": sum(1 for r in results.values() if not r.success),
        "average_response_time": sum(r.response_time for r in results.values()) / len(results),
        "results": {k: v.dict() for k, v in results.items()}
    }
    
    logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['successful_tests']}/{summary['total_tests']} —É—Å–ø–µ—à–Ω–æ")
    return summary


# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê
# =============================================================================

if __name__ == "__main__":
    logger.info("üè™ –ó–∞–ø—É—Å–∫ RetailCRM Integration Service...")
    logger.info(f"üîß –§–∞–∑–∞ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
    logger.info(f"üåê RetailCRM: {RETAILCRM_CONFIG['base_url']}")
    
    uvicorn.run(
        "retailcrm:app",
        host="0.0.0.0",
        port=8019,
        log_level="info"
    )