#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üè™ RetailCRM Integration Service
================================

–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —Å RetailCRM.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ API v5.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 03.08.2025
–í–µ—Ä—Å–∏—è: 1.0 (–§–∞–∑–∞ 1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API)
"""

import asyncio
import os
import json
import logging
import sys
import time
import jwt
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple

import aiohttp
import uvicorn
from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import asyncpg

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# RetailCRM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
RETAILCRM_CONFIG = {
    "base_url": "https://evgenybaevski.retailcrm.ru",
    "api_key": "NsX6ZE1W6C8vOkkcNm2NBNLzwVJxLNvl",
    "client_id": "8bc4e63e-4fb2-4e6b-a78f-1dbbc96f6ad4",
    "api_version": "v5",
    "timeout": 30
}

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ RetailCRM
JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY", "vochi-retailcrm-secret-key-2025")
JWT_ALGORITHM = "HS256"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/asterisk-webhook/logs/retailcrm.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("RetailCRM")

# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

class RetailCRMResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RetailCRM API"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    response_time: float
    endpoint: str


class PhoneData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    number: str

class CustomerData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    phone: Optional[str] = None  # –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    phones: Optional[List[PhoneData]] = None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    email: Optional[str] = None
    managerId: Optional[int] = None  # ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏


class CallEventData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    phone: str
    type: str  # incoming, outgoing
    duration: Optional[int] = None
    status: str  # answered, busy, failed, etc.
    customer_id: Optional[int] = None  # ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ RetailCRM
    manager_name: Optional[str] = None  # –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    recording_url: Optional[str] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å


# =============================================================================
# RETAILCRM API CLIENT
# =============================================================================

class RetailCRMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RetailCRM API v5"""
    
    def __init__(self, config: Dict[str, Any]):
        self.base_url = config["base_url"]
        self.api_key = config["api_key"] 
        self.api_version = config["api_version"]
        self.timeout = config["timeout"]
        self.session: Optional[aiohttp.ClientSession] = None
        
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=self.timeout)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
    
    def _build_url(self, endpoint: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –¥–ª—è API endpoint"""
        base = f"{self.base_url}/api/{self.api_version}"
        endpoint = endpoint.lstrip('/')
        return f"{base}/{endpoint}"
    
    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict] = None,
        data: Optional[Dict] = None
    ) -> RetailCRMResponse:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ RetailCRM API"""
        
        start_time = time.time()
        url = self._build_url(endpoint)
        
        # –î–æ–±–∞–≤–ª—è–µ–º API key –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if params is None:
            params = {}
        params['apiKey'] = self.api_key
        
        logger.info(f"üîÑ {method.upper()} {endpoint}")
        logger.info(f"üì° URL: {url}")
        logger.info(f"üìã Params: {params}")
        if data:
            logger.info(f"üì¶ Data: {data}")
        
        try:
            if not self.session:
                raise RuntimeError("Client session not initialized")
                
            # –î–ª—è telephony endpoints –∏—Å–ø–æ–ª—å–∑—É–µ–º form-data —Å JSON —Å—Ç—Ä–æ–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if endpoint.startswith("/telephony/") and method == "POST":
                # Telephony endpoints —Ç—Ä–µ–±—É—é—Ç form-data —Å JSON —Å—Ç—Ä–æ–∫–∞–º–∏
                from aiohttp import FormData
                form_data = FormData()
                
                for key, value in data.items():
                    form_data.add_field(key, str(value))
                
                async with self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    data=form_data
                ) as response:
                    response_time = time.time() - start_time
                    response_text = await response.text()
                    
                    logger.info(f"‚è±Ô∏è Response time: {response_time:.3f}s")
                    logger.info(f"üìä Status: {response.status}")
                    logger.info(f"üìÑ Response: {response_text[:500]}...")
                    
                    if response.status in [200, 201]:
                        try:
                            response_data = json.loads(response_text) if response_text else {}
                            return RetailCRMResponse(
                                success=response_data.get("success", True),
                                data=response_data,
                                response_time=response_time,
                                endpoint=endpoint
                            )
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå JSON decode error: {e}")
                            return RetailCRMResponse(
                                success=False,
                                error=f"Invalid JSON response: {e}",
                                response_time=response_time,
                                endpoint=endpoint
                            )
                    else:
                        return RetailCRMResponse(
                            success=False,
                            error=f"HTTP {response.status}: {response_text}",
                            response_time=response_time,
                            endpoint=endpoint
                        )
            elif method == "POST" and data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º form-data –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
                from aiohttp import FormData
                form_data = FormData()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è form-data
                def add_to_form(form_obj, key_prefix, value):
                    if isinstance(value, dict):
                        for sub_key, sub_value in value.items():
                            add_to_form(form_obj, f"{key_prefix}[{sub_key}]", sub_value)
                    else:
                        form_obj.add_field(key_prefix, str(value))
                
                for key, value in data.items():
                    add_to_form(form_data, key, value)
                
                async with self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    data=form_data
                ) as response:
                    response_time = time.time() - start_time
                    response_text = await response.text()
                    
                    logger.info(f"‚è±Ô∏è Response time: {response_time:.3f}s")
                    logger.info(f"üìä Status: {response.status}")
                    logger.info(f"üìÑ Response: {response_text[:500]}...")
                    
                    if response.status in [200, 201]:
                        try:
                            response_data = json.loads(response_text)
                            return RetailCRMResponse(
                                success=True,
                                data=response_data,
                                response_time=response_time,
                                endpoint=endpoint
                            )
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå JSON decode error: {e}")
                            return RetailCRMResponse(
                                success=False,
                                error=f"Invalid JSON response: {e}",
                                response_time=response_time,
                                endpoint=endpoint
                            )
                    else:
                        return RetailCRMResponse(
                            success=False,
                            error=f"HTTP {response.status}: {response_text}",
                            response_time=response_time,
                            endpoint=endpoint
                        )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
                async with self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    json=data if data else None
                ) as response:
                    response_time = time.time() - start_time
                    response_text = await response.text()
                    
                    logger.info(f"‚è±Ô∏è Response time: {response_time:.3f}s")
                    logger.info(f"üìä Status: {response.status}")
                    logger.info(f"üìÑ Response: {response_text[:500]}...")
                    
                    if response.status in [200, 201]:
                        try:
                            response_data = json.loads(response_text)
                            return RetailCRMResponse(
                                success=True,
                                data=response_data,
                                response_time=response_time,
                                endpoint=endpoint
                            )
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå JSON decode error: {e}")
                            return RetailCRMResponse(
                                success=False,
                                error=f"Invalid JSON response: {e}",
                                response_time=response_time,
                                endpoint=endpoint
                            )
                    else:
                        return RetailCRMResponse(
                            success=False,
                            error=f"HTTP {response.status}: {response_text}",
                            response_time=response_time,
                            endpoint=endpoint
                        )

        except asyncio.TimeoutError:
            response_time = time.time() - start_time
            logger.error(f"‚è∞ Request timeout after {response_time:.3f}s")
            return RetailCRMResponse(
                success=False,
                error="Request timeout",
                response_time=response_time,
                endpoint=endpoint
            )
        except Exception as e:
            response_time = time.time() - start_time
            logger.error(f"üí• Request error: {e}")
            return RetailCRMResponse(
                success=False,
                error=str(e),
                response_time=response_time,
                endpoint=endpoint
            )

    # =========================================================================
    # 0. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —á–µ—Ä–µ–∑ Integration Modules API
    # =========================================================================

    async def upsert_integration_module(self, code: str, integration_module: Dict[str, Any]) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω–∏—é). POST /integration-modules/{code}/edit"""
        endpoint = f"/integration-modules/{code}/edit"
        # RetailCRM –æ–∂–∏–¥–∞–µ—Ç scalar field, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π JSON —Å—Ç—Ä–æ–∫—É
        data = {"integrationModule": json.dumps(integration_module)}
        return await self._make_request("POST", endpoint, data=data)
    
    async def deactivate_integration_module(self, code: str, integration_module: Dict[str, Any]) -> RetailCRMResponse:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å active: false). POST /integration-modules/{code}/edit"""
        # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º active: false
        deactivated_module = integration_module.copy()
        deactivated_module["active"] = False
        
        endpoint = f"/integration-modules/{code}/edit"
        data = {"integrationModule": json.dumps(deactivated_module)}
        return await self._make_request("POST", endpoint, data=data)
    
    async def get_integration_module(self, code: str) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É. GET /integration-modules/{code}"""
        endpoint = f"/integration-modules/{code}"
        return await self._make_request("GET", endpoint)
    
    # =========================================================================
    # 1. –ë–ê–ó–û–í–´–ï API –ú–ï–¢–û–î–´
    # =========================================================================
    
    async def test_credentials(self) -> RetailCRMResponse:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞"""
        return await self._make_request("GET", "/credentials")
    
    async def get_sites(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ (—Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
        return await self._make_request("GET", "/reference/sites")
    
    # =========================================================================
    # 2. –†–ê–ë–û–¢–ê –° –ú–ï–ù–ï–î–ñ–ï–†–ê–ú–ò
    # =========================================================================
    
    async def get_users(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
        return await self._make_request("GET", "/users")
    
    async def get_user(self, user_id: int) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return await self._make_request("GET", f"/users/{user_id}")
    
    async def get_user_groups(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return await self._make_request("GET", "/user-groups")
    
    # =========================================================================
    # 3. –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò  
    # =========================================================================
    
    async def search_customer_by_phone(self, phone: str) -> RetailCRMResponse:
        """–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        params = {"filter[phone]": phone}
        return await self._make_request("GET", "/customers", params=params)
    
    async def get_customer(self, customer_id: int) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ ID"""
        return await self._make_request("GET", f"/customers/{customer_id}")
    
    async def create_customer(self, customer_data: CustomerData) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        # RetailCRM API v5 —Ç—Ä–µ–±—É–µ—Ç JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        customer_dict = customer_data.dict(exclude_none=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ phone, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ phones –º–∞—Å—Å–∏–≤
        if customer_dict.get("phone") and not customer_dict.get("phones"):
            customer_dict["phones"] = [{"number": customer_dict["phone"]}]
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ phone –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            customer_dict.pop("phone", None)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM API v5
        data = {
            "customer": json.dumps(customer_dict),  # JSON —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ form-data
            "site": "evgenybaevski"
        }
            
        return await self._make_request("POST", "/customers/create", data=data)
    
    async def edit_customer(self, customer_id: int, customer_data: CustomerData) -> RetailCRMResponse:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        data = customer_data.dict(exclude_none=True)
        return await self._make_request("POST", f"/customers/{customer_id}/edit", data=data)
    
    # =========================================================================
    # 4. –°–û–ë–´–¢–ò–Ø –¢–ï–õ–ï–§–û–ù–ò–ò
    # =========================================================================
    
    async def create_call_task(self, call_data: CallEventData) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –æ –∑–≤–æ–Ω–∫–µ –≤ RetailCRM"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        duration_text = ""
        if call_data.duration:
            minutes = call_data.duration // 60
            seconds = call_data.duration % 60
            duration_text = f" –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
        
        call_type_text = "üìû –í—Ö–æ–¥—è—â–∏–π" if call_data.type == "incoming" else "üìû –ò—Å—Ö–æ–¥—è—â–∏–π" 
        status_text = {
            "answered": "–æ—Ç–≤–µ—á–µ–Ω",
            "busy": "–∑–∞–Ω—è—Ç–æ", 
            "failed": "–Ω–µ –æ—Ç–≤–µ—á–µ–Ω",
            "no_answer": "–Ω–µ –æ—Ç–≤–µ—á–µ–Ω"
        }.get(call_data.status, call_data.status)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        task_title = f"{call_type_text} –∑–≤–æ–Ω–æ–∫"
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å HTML-–∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        commentary_parts = [f"–ó–≤–æ–Ω–æ–∫ –æ—Ç {call_data.phone}.{duration_text}"]
        commentary_parts.append(f"–°—Ç–∞—Ç—É—Å: {status_text}.")
        
        if call_data.manager_name:
            commentary_parts.append(f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {call_data.manager_name}.")
            
        if call_data.recording_url:
            # –°–æ–∑–¥–∞–µ–º HTML-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ RetailCRM
            recording_button = f"""
            
üéß –ó–ê–ü–ò–°–¨ –†–ê–ó–ì–û–í–û–†–ê:
<a href="{call_data.recording_url}" target="_blank" style="display: inline-block; background-color: #007bff; color: white; padding: 8px 15px; text-decoration: none; border-radius: 4px; font-weight: bold;">‚ñ∂Ô∏è –ü–†–û–°–õ–£–®–ê–¢–¨ –ó–ê–ü–ò–°–¨</a>

–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {call_data.recording_url}
            """.strip()
            commentary_parts.append(recording_button)
        
        commentary = " ".join(commentary_parts)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏
        data = {
            "task": json.dumps({
                "text": task_title,
                "commentary": commentary,
                "customer": {"id": call_data.customer_id},
                "performerId": 16  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ï–≤–≥–µ–Ω–∏–π –ë–∞–µ–≤—Å–∫–∏–π
            }),
            "site": "evgenybaevski"
        }
        
        return await self._make_request("POST", "/tasks/create", data=data)
    
    async def get_telephony_settings(self) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏"""
        return await self._make_request("GET", "/telephony/setting")
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –ü–û –û–§–ò–¶–ò–ê–õ–¨–ù–û–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò =====
    
    async def upload_calls_history(self, calls_data: list) -> RetailCRMResponse:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM"""
        # –î–ª—è /telephony/calls/upload –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å calls –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É –≤ form-data
        data = {
            "calls": json.dumps(calls_data),
            "clientId": RETAILCRM_CONFIG["client_id"]
        }
        return await self._make_request("POST", "/telephony/calls/upload", data=data)
    
    async def send_call_event(self, event_data: dict) -> RetailCRMResponse:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM"""
        # –î–ª—è /telephony/call/event –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å event –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É –≤ form-data
        data = {
            "event": json.dumps(event_data),
            "clientId": RETAILCRM_CONFIG["client_id"]
        }
        return await self._make_request("POST", "/telephony/call/event", data=data)
    
    async def get_responsible_manager(self, phone: str) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        params = {
            "phone": phone,
            "clientId": RETAILCRM_CONFIG["client_id"]
        }
        return await self._make_request("GET", "/telephony/manager", params=params)
    
    # =========================================================================
    # 5. –†–ê–ë–û–¢–ê –° –ó–ê–ö–ê–ó–ê–ú–ò
    # =========================================================================
    
    async def get_customer_orders(self, customer_id: int) -> RetailCRMResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞"""
        params = {"filter[customerId]": customer_id}
        return await self._make_request("GET", "/orders", params=params)
    
    async def create_order(self, order_data: Dict[str, Any]) -> RetailCRMResponse:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        return await self._make_request("POST", "/orders/create", data=order_data)


# =============================================================================
# FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# =============================================================================

app = FastAPI(
    title="RetailCRM Integration Service",
    description="–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RetailCRM –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏",
    version="1.0.0"
)

# –°—Ç–∞—Ç–∏–∫–∞ (favicon, –ª–æ–≥–æ—Ç–∏–ø—ã) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
STATIC_DIR = "/root/asterisk-webhook/static"
if os.path.isdir(STATIC_DIR):
    app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")

# –°—Ç–∞—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ RetailCRM
APP_STATIC_DIR = "/root/asterisk-webhook/app/static"
if os.path.isdir(APP_STATIC_DIR):
    app.mount("/retailcrm-static", StaticFiles(directory=APP_STATIC_DIR), name="retailcrm_static")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
retailcrm_client = None

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ app.config)
PG_HOST = os.environ.get("POSTGRES_HOST", "127.0.0.1")
PG_PORT = int(os.environ.get("POSTGRES_PORT", 5432))
PG_USER = os.environ.get("POSTGRES_USER", "postgres")
PG_PASSWORD = os.environ.get("POSTGRES_PASSWORD", "r/Yskqh/ZbZuvjb2b3ahfg==")
PG_DB = os.environ.get("POSTGRES_DB", "postgres")

pg_pool: Optional[asyncpg.pool.Pool] = None

# –ö–æ–Ω—Ñ–∏–≥ –∫—ç—à–∞
CACHE_TTL_SECONDS: int = int(os.environ.get("RETAILCRM_CACHE_TTL", 120))
CACHE_REFRESH_INTERVAL_SECONDS: int = int(os.environ.get("RETAILCRM_CACHE_REFRESH", 300))

# –ö—ç—à –∫–æ–Ω—Ñ–∏–≥–æ–≤: enterprise_number -> (config_dict, expires_at_epoch)
CONFIG_CACHE: Dict[str, Tuple[Dict[str, Any], float]] = {}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞
_cache_refresher_task: Optional[asyncio.Task] = None
_cache_refresher_stop_event: Optional[asyncio.Event] = None

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏
STATS: Dict[str, int] = {
    "db_reads": 0,
    "db_writes": 0,
    "cache_hits": 0,
    "cache_misses": 0,
    "cache_refreshes": 0,
}

# === –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ ===
def _map_call_type(call_type: Optional[int]) -> Optional[str]:
    if call_type == 0:
        return "in"
    if call_type == 1:
        return "out"
    return None

def _is_internal(num: str) -> bool:
    try:
        return bool(num) and str(num).isdigit() and 2 <= len(str(num)) <= 5
    except Exception:
        return False

def _guess_direction_and_phone(raw: dict, fallback: str = "") -> tuple[str, str]:
    ct = raw.get("CallType")
    if isinstance(ct, (int, str)) and str(ct).isdigit():
        kind = _map_call_type(int(ct))
        if kind in {"in", "out"}:
            phone = raw.get("Phone") or raw.get("CallerIDNum") or raw.get("ConnectedLineNum") or fallback
            return kind, str(phone)
    caller = str(raw.get("CallerIDNum") or "")
    phone_field = str(raw.get("Phone") or "")
    exts = list(raw.get("Extensions") or [])
    caller_internal = _is_internal(caller)
    any_external_ext = any((not _is_internal(e)) and e for e in exts)
    if caller_internal and (any_external_ext or (phone_field and not _is_internal(phone_field))):
        external = next((e for e in exts if e and not _is_internal(e)), None) or phone_field
        return "out", external
    if (not caller_internal) and any(_is_internal(e) for e in exts):
        return "in", caller or phone_field
    return ("in", phone_field or caller or fallback)

def _normalize_json(value: Any) -> Dict[str, Any]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç JSON/JSONB –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î –∫ dict.
    –î–æ–ø—É—Å–∫–∞–µ—Ç —Ç–∏–ø—ã: dict (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å), str (–ø–∞—Ä—Å–∏—Ç—Å—è –∫–∞–∫ JSON),
    None (–ø—É—Å—Ç–æ–π dict). –î–ª—è –ø—Ä–æ—á–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π dict.
    """
    if value is None:
        return {}
    if isinstance(value, dict):
        return value
    if isinstance(value, str):
        try:
            parsed = json.loads(value)
            return parsed if isinstance(parsed, dict) else {}
        except Exception:
            return {}
    return {}

async def init_pg_pool() -> None:
    global pg_pool
    if pg_pool is None:
        pg_pool = await asyncpg.create_pool(
            host=PG_HOST,
            port=PG_PORT,
            user=PG_USER,
            password=PG_PASSWORD,
            database=PG_DB,
            min_size=1,
            max_size=10,
        )
        logger.info("‚úÖ PostgreSQL pool initialized for retailcrm service")

async def close_pg_pool() -> None:
    global pg_pool
    if pg_pool is not None:
        await pg_pool.close()
        pg_pool = None
        logger.info("‚úÖ PostgreSQL pool closed for retailcrm service")


async def ensure_integration_logs_table() -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.

    –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ (–µ–¥–∏–Ω–∞—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π):
      - enterprise_number TEXT
      - integration_type TEXT
      - event_type TEXT
      - request_data JSONB
      - response_data JSONB
      - status TEXT ('success' | 'error')
      - error_message TEXT
      - created_at TIMESTAMPTZ DEFAULT now()
    """
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    sql = (
        """
        CREATE TABLE IF NOT EXISTS integration_logs (
            id SERIAL PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            enterprise_number TEXT NOT NULL,
            integration_type TEXT NOT NULL,
            event_type TEXT NOT NULL,
            request_data JSONB,
            response_data JSONB,
            status TEXT NOT NULL,
            error_message TEXT
        );
        """
    )
    async with pg_pool.acquire() as conn:
        await conn.execute(sql)


async def write_integration_log(
    enterprise_number: str,
    event_type: str,
    request_data: Dict[str, Any],
    response_data: Optional[Dict[str, Any]],
    status_ok: bool,
    error_message: Optional[str] = None,
    integration_type: str = "retailcrm",
) -> None:
    """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–µ–∏—Ö —Å—Ö–µ–º.

    –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ (event_type/request_data/response_data/status/error_message).
    –§–æ–ª–±—ç–∫ ‚Äî —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ (action/payload/response/success/error), –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ.
    """
    assert pg_pool is not None
    status_str = "success" if status_ok else "error"
    try:
        sql_new = (
            "INSERT INTO integration_logs(enterprise_number, integration_type, event_type, request_data, response_data, status, error_message) "
            "VALUES($1, $2, $3, $4::jsonb, $5::jsonb, $6, $7)"
        )
        async with pg_pool.acquire() as conn:
            await conn.execute(
                sql_new,
                enterprise_number,
                integration_type,
                event_type,
                json.dumps(request_data),
                json.dumps(response_data or {}),
                status_str,
                error_message,
            )
    except Exception as e_new:
        try:
            sql_old = (
                "INSERT INTO integration_logs(enterprise_number, integration_type, action, payload, response, success, error) "
                "VALUES($1, $2, $3, $4::jsonb, $5::jsonb, $6::boolean, $7)"
            )
            async with pg_pool.acquire() as conn:
                await conn.execute(
                    sql_old,
                    enterprise_number,
                    integration_type,
                    event_type,
                    json.dumps(request_data),
                    json.dumps(response_data or {}),
                    status_ok,
                    error_message,
                )
        except Exception as e_old:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (new='{e_new}', old='{e_old}')")

async def fetch_retailcrm_config(enterprise_number: str) -> Dict[str, Any]:
    """–ß–∏—Ç–∞–µ—Ç –∏–∑ enterprises.integrations_config JSONB -> 'retailcrm' –¥–ª—è —é–Ω–∏—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π dict, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
    """
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    query = (
        "SELECT integrations_config -> 'retailcrm' AS cfg "
        "FROM enterprises WHERE number = $1"
    )
    async with pg_pool.acquire() as conn:
        row = await conn.fetchrow(query, enterprise_number)
        STATS["db_reads"] += 1
    if not row:
        return {}
    return _normalize_json(row["cfg"])  

async def delete_retailcrm_config(enterprise_number: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é RetailCRM –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç integrations_config->retailcrm –≤ NULL)"""
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    
    query = """
        UPDATE enterprises 
        SET integrations_config = 
            CASE 
                WHEN integrations_config IS NULL THEN NULL
                ELSE integrations_config - 'retailcrm'
            END
        WHERE number = $1
        RETURNING integrations_config
    """
    
    try:
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow(query, enterprise_number)
            if row is not None:
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                if enterprise_number in CONFIG_CACHE:
                    del CONFIG_CACHE[enterprise_number]
                return True
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ RetailCRM –¥–ª—è {enterprise_number}: {e}")
        return False

async def upsert_retailcrm_config(enterprise_number: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª—é—á retailcrm –≤ integrations_config —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ (merge)."""
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á retailcrm, –Ω–µ –∑–∞—Ç–∏—Ä–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–π JSONB
    query = (
        "UPDATE enterprises "
        "SET integrations_config = COALESCE(integrations_config, '{}'::jsonb) || jsonb_build_object('retailcrm', $2::jsonb) "
        "WHERE number = $1 "
        "RETURNING integrations_config -> 'retailcrm' AS cfg"
    )
    async with pg_pool.acquire() as conn:
        row = await conn.fetchrow(query, enterprise_number, json.dumps(config))
        STATS["db_writes"] += 1
    if not row:
        raise HTTPException(status_code=404, detail="Enterprise not found")
    updated_cfg = _normalize_json(row["cfg"]) 
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è)
    try:
        CONFIG_CACHE[enterprise_number] = (updated_cfg, time.time() + CACHE_TTL_SECONDS)
        STATS["cache_refreshes"] += 1
    except Exception:
        pass
    
    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"http://localhost:8020/cache/invalidate/{enterprise_number}") as cache_response:
                if cache_response.status == 200:
                    logger.info(f"‚úÖ Integration cache invalidated for {enterprise_number}")
                else:
                    logger.warning(f"‚ö†Ô∏è Failed to invalidate cache for {enterprise_number}: {cache_response.status}")
    except Exception as cache_error:
        logger.warning(f"‚ö†Ô∏è Cache invalidation error for {enterprise_number}: {cache_error}")
    return updated_cfg

async def save_user_extensions_to_db(enterprise_number: str, user_extensions: Dict[str, str]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π RetailCRM –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î"""
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        current_config = await fetch_retailcrm_config(enterprise_number)
        if not current_config:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            current_config = {
                "enabled": False,
                "domain": "",
                "api_key": ""
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º user_extensions
        current_config["user_extensions"] = user_extensions
        current_config["last_sync"] = datetime.utcnow().isoformat() + "Z"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        query = (
            "UPDATE enterprises "
            "SET integrations_config = COALESCE(integrations_config, '{}'::jsonb) || jsonb_build_object('retailcrm', $2::jsonb) "
            "WHERE number = $1"
        )
        async with pg_pool.acquire() as conn:
            await conn.execute(query, enterprise_number, json.dumps(current_config))
            STATS["db_writes"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        try:
            CONFIG_CACHE[enterprise_number] = (current_config, time.time() + CACHE_TTL_SECONDS)
            STATS["cache_refreshes"] += 1
        except Exception:
            pass
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"http://localhost:8020/cache/invalidate/{enterprise_number}") as cache_response:
                    if cache_response.status == 200:
                        logger.info(f"‚úÖ Integration cache invalidated for {enterprise_number}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to invalidate cache for {enterprise_number}: {cache_response.status}")
        except Exception as cache_error:
            logger.warning(f"‚ö†Ô∏è Cache invalidation error for {enterprise_number}: {cache_error}")
        
        logger.info(f"‚úÖ Saved {len(user_extensions)} user extensions to DB for enterprise {enterprise_number}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error saving user extensions to DB for enterprise {enterprise_number}: {e}")
        return False

async def load_user_extensions_from_db(enterprise_number: str) -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π RetailCRM –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    try:
        config = await fetch_retailcrm_config(enterprise_number)
        return config.get("user_extensions", {})
    except Exception as e:
        logger.error(f"‚ùå Error loading user extensions from DB for enterprise {enterprise_number}: {e}")
        return {}

async def _get_enterprise_by_token(token: str) -> Optional[str]:
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    q = "SELECT number FROM enterprises WHERE name2 = $1 OR secret = $1 LIMIT 1"
    async with pg_pool.acquire() as conn:
        row = await conn.fetchrow(q, token)
        return row["number"] if row else None

def _invert_user_extensions(cfg: Dict[str, Any]) -> Dict[str, int]:
    mapping: Dict[str, int] = {}
    user_ext = (cfg or {}).get("user_extensions") or {}
    if isinstance(user_ext, dict):
        for uid_str, code in user_ext.items():
            if code:
                try:
                    mapping[str(code)] = int(uid_str)
                except Exception:
                    mapping[str(code)] = uid_str
    return mapping

# –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –¥–∞–Ω–Ω—ã—Ö dial –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∑–≤–æ–Ω–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ hangup
_last_dial_cache: Dict[str, Dict[str, Any]] = {}
_DIAL_CACHE_TTL_SEC = 600

def _cache_put_dial(unique_id: str, code: Optional[str], user_id: Optional[int]) -> None:
    try:
        from datetime import datetime
        _last_dial_cache[unique_id] = {
            "code": str(code) if code else None,
            "user_id": int(user_id) if isinstance(user_id, int) else user_id,
            "ts": datetime.utcnow().timestamp(),
        }
    except Exception:
        pass

def _cache_get_dial(unique_id: str) -> Optional[Dict[str, Any]]:
    try:
        from datetime import datetime
        entry = _last_dial_cache.get(unique_id)
        if not entry:
            return None
        if datetime.utcnow().timestamp() - float(entry.get("ts", 0)) > _DIAL_CACHE_TTL_SEC:
            _last_dial_cache.pop(unique_id, None)
            return None
        return entry
    except Exception:
        return None

@app.post("/internal/retailcrm/call-event")
async def internal_retailcrm_call_event(request: Request):
    if request.client and request.client.host not in {"127.0.0.1", "localhost"}:
        return JSONResponse(status_code=403, content={"success": False, "error": "forbidden"})

    try:
        body = await request.json()
    except Exception:
        return JSONResponse(status_code=400, content={"success": False, "error": "invalid json"})

    token = body.get("token")
    unique_id = body.get("uniqueId")
    event_type = body.get("event_type")  # dial|hangup
    raw = body.get("raw", {}) or {}
    record_url = body.get("record_url")

    if not token or not unique_id or event_type not in {"dial", "hangup"}:
        return JSONResponse(status_code=400, content={"success": False, "error": "invalid payload"})

    enterprise_number = await _get_enterprise_by_token(token)
    if not enterprise_number:
        return JSONResponse(status_code=404, content={"success": False, "error": "enterprise not found"})

    cfg = await fetch_retailcrm_config(enterprise_number)
    cfg = cfg if cfg and cfg.get("enabled") and cfg.get("domain") and cfg.get("api_key") else None
    if not cfg:
        return JSONResponse(status_code=400, content={"success": False, "error": "retailcrm disabled or config invalid"})

    base_url = cfg["domain"] if str(cfg["domain"]).startswith("http") else f"https://{cfg['domain']}"
    api_key = cfg["api_key"]

    if event_type == "dial":
        kind, phone = _guess_direction_and_phone(raw, fallback="")
    else:
        _, phone = _guess_direction_and_phone(raw, fallback="")
        kind = "hangup"

    # code / userId
    code = None
    exts = list(raw.get("Extensions") or [])
    cand = str(raw.get("CallerIDNum") or "")
    if _is_internal(cand):
        code = cand
    else:
        for e in exts:
            if _is_internal(str(e)):
                code = str(e)
                break
    code_to_uid = _invert_user_extensions(cfg)
    user_id = code_to_uid.get(str(code)) if code else None

    # –î–ª—è hangup –ø–æ–¥—Ç—è–Ω–µ–º code/user_id –∏–∑ –∫—ç—à–∞ dial, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    if event_type == "hangup":
        cache_entry = _cache_get_dial(unique_id)
        if cache_entry:
            if user_id is None and cache_entry.get("user_id") is not None:
                user_id = cache_entry.get("user_id")
            if not code and cache_entry.get("code"):
                code = str(cache_entry.get("code"))

    event_payload: Dict[str, Any] = {
        "phone": phone if phone.startswith("+") else ("+" + phone.lstrip("+")) if phone else "+000",
        "type": kind if kind in {"in", "out", "hangup"} else "in",
        "callExternalId": unique_id,
    }
    if code:
        event_payload["codes"] = [str(code)]
    if user_id is not None:
        event_payload["userIds"] = [user_id]

    async with RetailCRMClient({
        "base_url": base_url,
        "api_key": api_key,
        "api_version": "v5",
        "timeout": 5,
    }) as client:
        # 1) –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º codes/userIds –∏ –Ω–∞ hangup (–¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º API)
        #    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–µ–º hangupStatus –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –≤ CRM
        if event_type == "hangup":
            try:
                call_status_int = int(raw.get("CallStatus", 0))
            except Exception:
                call_status_int = 0
            if call_status_int == 2:
                event_payload["hangupStatus"] = "answered"
            else:
                # –î–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏" —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ "no answered"
                event_payload["hangupStatus"] = "no answered"
        ev = await client._make_request("POST", "/telephony/call/event", data={
            "clientId": enterprise_number,
            "event": json.dumps(event_payload, ensure_ascii=False),
        })
        logger.info(f"[internal call-event] sent: {event_payload} resp={ev.success}")

        # –ö—ç—à–∏—Ä—É–µ–º dial –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ hangup
        if event_type == "dial":
            _cache_put_dial(unique_id, code, user_id)

        if event_type == "hangup":
            from datetime import datetime
            start_time = raw.get("StartTime") or datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            end_time = raw.get("EndTime") or start_time
            duration = 0
            try:
                dt_s = datetime.fromisoformat(start_time.replace("Z", ""))
                dt_e = datetime.fromisoformat(end_time.replace("Z", ""))
                duration = max(0, int((dt_e - dt_s).total_seconds()))
            except Exception:
                duration = 0
            # Map result –≤ –∂—É—Ä–Ω–∞–ª: answered / failed
            # –î–ª—è "–Ω–µ–æ—Ç–≤–µ—Ç–∞" —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ failed (–≤ RetailCRM –≤–∞–ª–∏–¥–Ω–æ –¥–ª—è upload)
            answered = int(raw.get("CallStatus", 0)) == 2
            result = "answered" if answered else "failed"
            upload_payload = [{
                "date": start_time.replace("T", " ")[:19],
                "type": _map_call_type(int(raw.get("CallType", 0))) or "in",
                "phone": (phone or "").lstrip("+"),
                "duration": duration,
                "result": result,
                "externalId": unique_id,
            }]
            # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ hangup –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ—Ç—è–Ω–µ–º –∏–∑ –∫—ç—à–∞ dial
            cache_entry = _cache_get_dial(unique_id)
            eff_user_id = user_id if user_id is not None else (cache_entry.get("user_id") if cache_entry else None)
            eff_code = str(code) if code else (str(cache_entry.get("code")) if cache_entry and cache_entry.get("code") else None)
            if eff_user_id is not None:
                upload_payload[0]["userId"] = eff_user_id
            elif eff_code:
                upload_payload[0]["code"] = eff_code
            if record_url:
                upload_payload[0]["recordUrl"] = record_url

            up = await client._make_request("POST", "/telephony/calls/upload", data={
                "clientId": enterprise_number,
                "calls": json.dumps(upload_payload, ensure_ascii=False),
            })
            logger.info(f"[internal calls/upload] sent: {upload_payload} resp={up.success}")

    return JSONResponse({"success": True})

async def find_enterprise_by_integration_token(client_id: str) -> Optional[Dict[str, Any]]:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RetailCRM
    
    RetailCRM –ø–µ—Ä–µ–¥–∞–µ—Ç clientId –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è.
    –ú—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º clientId = enterprise_number, –ø–æ—ç—Ç–æ–º—É –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.
    """
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    
    try:
        # RetailCRM –ø–µ—Ä–µ–¥–∞–µ—Ç clientId = enterprise_number, –ø–æ—ç—Ç–æ–º—É –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        query = "SELECT number, name, ip, secret FROM enterprises WHERE number = $1 AND active = true"
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow(query, client_id)
            if row:
                return {
                    "number": row["number"],
                    "name": row["name"], 
                    "ip": row["ip"],
                    "secret": row["secret"]
                }
        return None
    except Exception as e:
        logger.error(f"‚ùå Error finding enterprise by token {client_id}: {e}")
        return None

async def call_asterisk_api(code: str, phone: str, client_id: str) -> Dict[str, Any]:
    """–í—ã–∑—ã–≤–∞–µ—Ç asterisk.py API –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞"""
    try:
        asterisk_url = "http://localhost:8018/api/makecallexternal"
        params = {
            "code": code,
            "phone": phone,
            "clientId": client_id
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(asterisk_url, params=params) as response:
                response_text = await response.text()
                
                if response.status == 200:
                    try:
                        result = json.loads(response_text)
                        logger.info(f"‚úÖ Asterisk API success: {result}")
                        return {"success": True, "data": result}
                    except json.JSONDecodeError:
                        logger.info(f"‚úÖ Asterisk API success (non-JSON): {response_text}")
                        return {"success": True, "message": response_text}
                else:
                    logger.error(f"‚ùå Asterisk API error {response.status}: {response_text}")
                    return {"success": False, "error": f"HTTP {response.status}: {response_text}"}
                    
    except Exception as e:
        logger.error(f"‚ùå Error calling asterisk API: {e}")
        return {"success": False, "error": str(e)}

# =============================================================================
# –ö–≠–®: —É—Ç–∏–ª–∏—Ç—ã –∏ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ—Ñ—Ä–µ—à
# =============================================================================

def _is_cache_entry_valid(entry: Tuple[Dict[str, Any], float]) -> bool:
    if not entry:
        return False
    _, expires_at = entry
    return time.time() < expires_at

async def get_config_cached(enterprise_number: str) -> Dict[str, Any]:
    entry = CONFIG_CACHE.get(enterprise_number)
    if entry and _is_cache_entry_valid(entry):
        STATS["cache_hits"] += 1
        return entry[0]
    STATS["cache_misses"] += 1
    cfg = await fetch_retailcrm_config(enterprise_number)
    CONFIG_CACHE[enterprise_number] = (cfg, time.time() + CACHE_TTL_SECONDS)
    return cfg

async def list_active_enterprises() -> List[str]:
    """–°–ø–∏—Å–æ–∫ enterprise_number, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω retailcrm.enabled=true."""
    if pg_pool is None:
        await init_pg_pool()
    assert pg_pool is not None
    query = (
        "SELECT number FROM enterprises "
        "WHERE integrations_config ? 'retailcrm' "
        "AND (integrations_config->'retailcrm'->>'enabled') = 'true'"
    )
    async with pg_pool.acquire() as conn:
        rows = await conn.fetch(query)
        STATS["db_reads"] += 1
    return [r["number"] for r in rows]

async def refresh_cache_for(enterprise_number: str) -> Dict[str, Any]:
    cfg = await fetch_retailcrm_config(enterprise_number)
    CONFIG_CACHE[enterprise_number] = (cfg, time.time() + CACHE_TTL_SECONDS)
    STATS["cache_refreshes"] += 1
    return cfg

async def refresh_cache_full() -> Dict[str, Any]:
    """–ü–æ–ª–Ω—ã–π —Ä–µ—Ñ—Ä–µ—à –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤."""
    result: Dict[str, Any] = {"refreshed": [], "skipped": []}
    try:
        active = await list_active_enterprises()
        for num in active:
            await refresh_cache_for(num)
            result["refreshed"].append(num)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ—Ä–µ—à–∞ –∫—ç—à–∞: {e}")
    return result

async def _cache_refresher_loop(stop_event: asyncio.Event) -> None:
    logger.info(
        f"üåÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: every {CACHE_REFRESH_INTERVAL_SECONDS}s, TTL={CACHE_TTL_SECONDS}s"
    )
    try:
        while not stop_event.is_set():
            await refresh_cache_full()
            try:
                await asyncio.wait_for(stop_event.wait(), timeout=CACHE_REFRESH_INTERVAL_SECONDS)
            except asyncio.TimeoutError:
                pass
    except asyncio.CancelledError:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
        raise

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞"""
    global retailcrm_client
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RetailCRM Integration Service")
    logger.info(f"üè™ RetailCRM URL: {RETAILCRM_CONFIG['base_url']}")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª PostgreSQL
    try:
        await init_pg_pool()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PostgreSQL pool: {e}")
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
    try:
        await ensure_integration_logs_table()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ—Ñ—Ä–µ—à–µ—Ä –∫—ç—à–∞
    try:
        global _cache_refresher_task, _cache_refresher_stop_event
        _cache_refresher_stop_event = asyncio.Event()
        _cache_refresher_task = asyncio.create_task(_cache_refresher_loop(_cache_refresher_stop_event))
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–π —Ä–µ—Ñ—Ä–µ—à–µ—Ä –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ—Ñ—Ä–µ—à–µ—Ä –∫—ç—à–∞: {e}")

@app.on_event("shutdown") 
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RetailCRM Integration Service")
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ—Ñ—Ä–µ—à–µ—Ä –∫—ç—à–∞
    try:
        global _cache_refresher_task, _cache_refresher_stop_event
        if _cache_refresher_stop_event is not None:
            _cache_refresher_stop_event.set()
        if _cache_refresher_task is not None:
            _cache_refresher_task.cancel()
            try:
                await _cache_refresher_task
            except asyncio.CancelledError:
                pass
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ—Ñ—Ä–µ—à–µ—Ä–∞ –∫—ç—à–∞: {e}")
    try:
        await close_pg_pool()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è PostgreSQL pool: {e}")


# =============================================================================
# API ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "RetailCRM Integration",
        "version": "1.0.0",
        "status": "running",
        "phase": "1 - API Testing",
        "retailcrm_url": RETAILCRM_CONFIG["base_url"]
    }


# =============================================================================
# –°–ò–°–¢–ï–ú–ù–´–ï ENDPOINTS: health, stats
# =============================================================================

@app.get("/health")
async def health() -> Dict[str, Any]:
    """–ü—Ä–æ—Å—Ç–æ–π healthcheck —Å–µ—Ä–≤–∏—Å–∞ retailcrm."""
    return {"status": "ok"}


@app.get("/stats")
async def stats() -> Dict[str, Any]:
    """–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ retailcrm."""
    pool_status: Dict[str, Any] = {"initialized": pg_pool is not None}
    # –°–≤–æ–¥–∫–∞ –ø–æ –∫—ç—à—É
    cache_size = len(CONFIG_CACHE)
    now_ts = time.time()
    cache_expiring = sum(1 for _, exp in CONFIG_CACHE.values() if exp <= now_ts)
    return {
        "db": pool_status,
        "counters": STATS,
        "cache": {"size": cache_size, "expiring": cache_expiring, "ttl": CACHE_TTL_SECONDS},
        "service": "retailcrm",
    }


# =============================================================================
# –ë–ê–ó–û–í–´–ï API –î–õ–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô (namespace /api/config)
# =============================================================================

@app.get("/api/config/{enterprise_number}")
async def api_get_config(enterprise_number: str) -> Dict[str, Any]:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞ (–ª–µ–Ω–∏–≤–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º)
    cfg = await get_config_cached(enterprise_number)
    return {"enterprise_number": enterprise_number, "config": cfg}


class RetailCRMConfigBody(BaseModel):
    config: Dict[str, Any]


@app.put("/api/config/{enterprise_number}")
async def api_put_config(enterprise_number: str, body: RetailCRMConfigBody) -> Dict[str, Any]:
    updated = await upsert_retailcrm_config(enterprise_number, body.config)
    return {"enterprise_number": enterprise_number, "config": updated}


# =============================================================================
# API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º (namespace /api/config-cache)
# =============================================================================

@app.post("/api/config-cache/refresh/{enterprise_number}")
async def api_refresh_cache_for(enterprise_number: str) -> Dict[str, Any]:
    cfg = await refresh_cache_for(enterprise_number)
    return {"enterprise_number": enterprise_number, "config": cfg, "refreshed": True}


@app.post("/api/config-cache/refresh-all")
async def api_refresh_cache_all() -> Dict[str, Any]:
    res = await refresh_cache_full()
    return {"result": res}


@app.get("/api/config-cache/active-enterprises")
async def api_active_enterprises() -> Dict[str, Any]:
    active = await list_active_enterprises()
    return {"active_enterprises": active, "count": len(active)}


# =============================================================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é (POST /api/register/{enterprise_number})
# =============================================================================

class RegisterBody(BaseModel):
    domain: str
    api_key: str
    enabled: bool = True


@app.post("/api/register/{enterprise_number}")
async def api_register_module(enterprise_number: str, body: RegisterBody) -> Dict[str, Any]:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–º–µ–Ω/API‚Äëkey –≤ –ë–î –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –≤ RetailCRM (integration-modules)."""
    domain = body.domain.rstrip('/')
    api_key = body.api_key
    enabled = body.enabled

    # 1) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
    saved_cfg = await upsert_retailcrm_config(enterprise_number, {
        "domain": domain,
        "api_key": api_key,
        "enabled": enabled,
    })

    # 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è RetailCRM
    code = "vochi-telephony"
    make_call_url = f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}/retailcrm/make-call"
    change_status_url = f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}/retailcrm/status"
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è RetailCRM
    access_token = generate_retailcrm_access_token(enterprise_number)
    
    # –°–æ–±–∏—Ä–∞–µ–º additionalCodes –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω—É–ª—è—Ç—å –∏—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_extensions = (saved_cfg or {}).get("user_extensions", {}) or {}
    additional_codes: list[dict] = []
    try:
        for uid, ext in user_extensions.items():
            if ext:
                try:
                    uid_int = int(uid)
                except Exception:
                    uid_int = uid
                additional_codes.append({"userId": uid_int, "code": str(ext)})
    except Exception:
        additional_codes = []

    integration_module = {
        "code": code,
        "active": enabled,
        "name": "Vochi-CRM",
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ RetailCRM: logo –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SVG
        "logo": "https://bot.vochi.by/static/img/vochi_logo.svg",
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ RetailCRM: baseUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        "baseUrl": f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}",
        "clientId": enterprise_number,
        "accountUrl": f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}/retailcrm-admin/?enterprise_number={enterprise_number}&token={access_token}",
        # –ü–æ–ª–µ actions —É–±–∏—Ä–∞–µ–º ‚Äî RetailCRM —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
        "allowEdit": False,
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ integrations.telephony
        "integrations": {
            "telephony": {
                "makeCallUrl": make_call_url,
                "changeUserStatusUrl": change_status_url,
                # –Ø–≤–Ω–æ –æ–±—ä—è–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã UI RetailCRM –ø–æ–∫–∞–∑—ã–≤–∞–ª "–î–∞"
                "inputEventSupported": True,
                "outputEventSupported": True,
                "hangupEventSupported": True,
                "additionalCodes": additional_codes,
                "externalPhones": [],
                "allowEdit": False
            }
        }
    }

    # 3) –í—ã–∑–≤–∞—Ç—å RetailCRM API –ø–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º –∏ –∫–ª—é—á–æ–º
    cfg = {
        "base_url": domain if domain.startswith("http") else f"https://{domain}",
        "api_key": api_key,
        "api_version": "v5",
        "timeout": 30,
    }
    try:
        async with RetailCRMClient(cfg) as client:
            resp = await client.upsert_integration_module(code, integration_module)
            await write_integration_log(
                enterprise_number,
                "register_module",
                {"domain": cfg["base_url"], "module": integration_module},
                (resp.data if resp and resp.data else None),
                resp.success,
                resp.error,
            )
            if not resp.success:
                raise HTTPException(status_code=400, detail=resp.error or "RetailCRM error")
            return {"success": True, "result": resp.data or {}}
    except HTTPException:
        raise
    except Exception as e:
        await write_integration_log(
            enterprise_number,
            "register_module",
            {"domain": cfg["base_url"], "module": integration_module},
            None,
            False,
            str(e),
        )
        raise HTTPException(status_code=500, detail=str(e))

async def api_delete_integration(enterprise_number: str) -> Dict[str, Any]:
    """–£–¥–∞–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é RetailCRM: –æ—á–∏—â–∞–µ—Ç –ë–î –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –≤ RetailCRM."""
    
    # 1) –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ RetailCRM
    current_config = await fetch_retailcrm_config(enterprise_number)
    
    # 2) –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ë–î
    deleted = await delete_retailcrm_config(enterprise_number)
    if not deleted:
        raise HTTPException(status_code=404, detail="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # 3) –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω –∏ API-–∫–ª—é—á, –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –≤ RetailCRM
    domain = current_config.get("domain")
    api_key = current_config.get("api_key")
    
    if domain and api_key:
        try:
            cfg = {
                "base_url": domain if domain.startswith("http") else f"https://{domain}",
                "api_key": api_key,
                "api_version": "v5",
                "timeout": 30,
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            code = "vochi-telephony"
            # –î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è
            integration_module = {
                "code": code,
                "active": False,  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                "name": "Vochi-CRM",
                "logo": "https://bot.vochi.by/static/img/vochi_logo.svg",
                "baseUrl": f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}",
                "clientId": enterprise_number,
                "accountUrl": f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}/retailcrm-admin/?enterprise_number={enterprise_number}",
                "allowEdit": False,
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ integrations.telephony
                "integrations": {
                    "telephony": {
                        "makeCallUrl": f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}/retailcrm/make-call",
                        "changeUserStatusUrl": f"https://{os.environ.get('VOCHI_PUBLIC_HOST', 'bot.vochi.by')}/retailcrm/status",
                        "additionalCodes": [],
                        "externalPhones": [],
                        "allowEdit": False
                    }
                }
            }
            
            async with RetailCRMClient(cfg) as client:
                resp = await client.deactivate_integration_module(code, integration_module)
                
                await write_integration_log(
                    enterprise_number,
                    "delete_module",
                    {"domain": cfg["base_url"], "module": integration_module},
                    (resp.data if resp and resp.data else None),
                    resp.success,
                    resp.error,
                )
                
                if not resp.success:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –≤ RetailCRM: {resp.error}")
                    # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î
                else:
                    logger.info(f"‚úÖ –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ RetailCRM –¥–ª—è {enterprise_number}")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –≤ RetailCRM: {e}")
            await write_integration_log(
                enterprise_number,
                "delete_module",
                {"domain": domain, "error": str(e)},
                None,
                False,
                str(e),
            )
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î
    
    return {"success": True, "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"}


# =============================================================================
# JWT –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø RETAILCRM
# =============================================================================

def generate_retailcrm_access_token(enterprise_number: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ RetailCRM –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    payload = {
        "enterprise_number": enterprise_number,
        "source": "retailcrm",
        "exp": datetime.utcnow() + timedelta(days=365),  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω
        "iat": datetime.utcnow()
    }
    return jwt.encode(payload, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)

def verify_retailcrm_access_token(token: str) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç enterprise_number –∏–ª–∏ None."""
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        if payload.get("source") == "retailcrm":
            return payload.get("enterprise_number")
    except jwt.ExpiredSignatureError:
        logger.warning("JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")
    except jwt.InvalidTokenError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {e}")
    return None


# =============================================================================
# DUPLICATE ROUTES UNDER /retailcrm-admin/ PREFIX FOR BROWSER RELATIVE CALLS
# =============================================================================

@app.get("/retailcrm-admin/api/config/{enterprise_number}")
async def admin_api_get_config(enterprise_number: str) -> Dict[str, Any]:
    return await api_get_config(enterprise_number)


@app.put("/retailcrm-admin/api/config/{enterprise_number}")
async def admin_api_put_config(enterprise_number: str, body: RetailCRMConfigBody) -> Dict[str, Any]:
    return await api_put_config(enterprise_number, body)


@app.delete("/retailcrm-admin/api/config/{enterprise_number}")
async def admin_api_delete_config(enterprise_number: str) -> Dict[str, Any]:
    return await api_delete_integration(enterprise_number)


@app.post("/retailcrm-admin/api/register/{enterprise_number}")
async def admin_api_register_module(enterprise_number: str, request: Request) -> Dict[str, Any]:
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è UI: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ JSON, —Ç–∞–∫ –∏ form-data; –∏–∑–±–µ–≥–∞–µ—Ç 422 –Ω–∞ –±–∏—Ç–æ–º JSON.

    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: domain (str), api_key (str), enabled (bool)
    """
    payload: Dict[str, Any] = {}
    # 1) –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ JSON
    try:
        payload = await request.json()
        if not isinstance(payload, dict):
            payload = {}
    except Exception:
        payload = {}
    # 2) –§–æ–ª–±—ç–∫: form-data (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç —Ñ–æ—Ä–º—É –∏–ª–∏ —Å–ª–æ–º–∞–Ω JSON)
    if not payload:
        try:
            form = await request.form()
            def _to_bool(v: Any) -> bool:
                if v is None:
                    return True
                s = str(v).strip().lower()
                return s in ("1", "true", "on", "yes")
            payload = {
                "domain": form.get("domain", ""),
                "api_key": form.get("api_key", ""),
                "enabled": _to_bool(form.get("enabled", "true")),
            }
        except Exception:
            payload = {}
    # 3) –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ pydantic
    try:
        body = RegisterBody(**payload)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Invalid body: {e}")
    return await api_register_module(enterprise_number, body)

@app.get("/retailcrm-admin/api/internal-phones/{enterprise_number}")
async def admin_api_get_internal_phones(enterprise_number: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö"""
    try:
        query = """
        SELECT 
            uip.phone_number,
            u.first_name,
            u.last_name,
            u.id as user_id
        FROM user_internal_phones uip
        LEFT JOIN users u ON uip.user_id = u.id
        WHERE uip.enterprise_number = $1
        ORDER BY uip.phone_number
        """
        
        async with pg_pool.acquire() as conn:
            rows = await conn.fetch(query, enterprise_number)
            
            internal_phones = []
            for row in rows:
                phone_info = {
                    "phone_number": row["phone_number"],
                    "user_id": row["user_id"],
                    "owner": None
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if row["user_id"] and row["first_name"] and row["last_name"]:
                    phone_info["owner"] = f"{row['first_name']} {row['last_name']}"
                
                internal_phones.append(phone_info)
            
            logger.info(f"‚úÖ Fetched {len(internal_phones)} internal phones for enterprise {enterprise_number}")
            
            return {
                "success": True,
                "phones": internal_phones,
                "total": len(internal_phones)
            }
            
    except Exception as e:
        logger.error(f"‚ùå Error fetching internal phones for enterprise {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

@app.get("/retailcrm-admin/api/user-extensions/{enterprise_number}")
async def admin_api_get_user_extensions(enterprise_number: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π RetailCRM –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    try:
        user_extensions = await load_user_extensions_from_db(enterprise_number)
        
        logger.info(f"‚úÖ Loaded {len(user_extensions)} user extensions from DB for enterprise {enterprise_number}")
        
        return {
            "success": True,
            "user_extensions": user_extensions,
            "total": len(user_extensions)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error loading user extensions for enterprise {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

@app.post("/retailcrm-admin/api/sync-extensions/{enterprise_number}")
async def admin_api_sync_extensions(enterprise_number: str) -> Dict[str, Any]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∏ RetailCRM"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_extensions = await load_user_extensions_from_db(enterprise_number)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config_dict = await fetch_retailcrm_config(enterprise_number)
        if not config_dict or not config_dict.get("enabled"):
            raise HTTPException(status_code=404, detail="RetailCRM integration not configured or disabled")
        
        api_url = config_dict.get("domain", "").strip()
        api_key = config_dict.get("api_key", "").strip()
        
        if not api_url or not api_key:
            raise HTTPException(status_code=400, detail="RetailCRM credentials not configured")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å RetailCRM
        client_config = {
            "base_url": api_url,
            "api_key": api_key,
            "api_version": "v5", 
            "timeout": 10
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç RetailCRM
        additional_codes = []
        for user_id, extension in local_extensions.items():
            if extension and extension.strip():
                additional_codes.append({
                    "userId": str(user_id),
                    "code": extension.strip()
                })
        
        async with RetailCRMClient(client_config) as client:
            integration_code = "vochi-telephony"
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RetailCRM...
            
            logger.info(f"‚úÖ Synced {len(additional_codes)} extensions between DB and RetailCRM for enterprise {enterprise_number}")
            
            return {
                "success": True,
                "synced_extensions": len(additional_codes),
                "local_extensions": local_extensions
            }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error syncing extensions for enterprise {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"Sync error: {str(e)}")

@app.post("/retailcrm-admin/api/refresh-managers/{enterprise_number}")
async def admin_api_refresh_managers(enterprise_number: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ RetailCRM –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config_dict = await fetch_retailcrm_config(enterprise_number)
        if not config_dict or not config_dict.get("enabled"):
            raise HTTPException(status_code=404, detail="RetailCRM integration not configured or disabled")
        
        api_url = config_dict.get("domain", "").strip()
        api_key = config_dict.get("api_key", "").strip()
        
        if not api_url or not api_key:
            raise HTTPException(status_code=400, detail="RetailCRM credentials not configured")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç RetailCRM
        client_config = {
            "base_url": api_url,
            "api_key": api_key,
            "api_version": "v5", 
            "timeout": 10
        }
        
        async with RetailCRMClient(client_config) as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            response = await client.get_users()
            
            if not response.success:
                logger.error(f"‚ùå Failed to fetch users from RetailCRM: {response.error}")
                raise HTTPException(status_code=400, detail=f"RetailCRM API error: {response.error}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            local_extensions = await load_user_extensions_from_db(enterprise_number)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–¥–ª—è —Å–≤–µ—Ä–∫–∏)
            integration_code = "vochi-telephony"
            integration_response = await client.get_integration_module(integration_code)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ RetailCRM
            retailcrm_extensions = {}
            if integration_response.success and integration_response.data:
                integration_data = integration_response.data.get("integrationModule", {})
                if integration_data:
                    # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if isinstance(integration_data, str):
                        try:
                            integration_data = json.loads(integration_data)
                        except json.JSONDecodeError:
                            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å integrationModule JSON")
                            integration_data = {}
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º additionalCodes (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞)
                    codes_list = integration_data.get("additionalCodes", [])
                    
                    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if not codes_list:
                        telephony_config = integration_data.get("integrations", {}).get("telephony", {})
                        codes_list = telephony_config.get("additionalCodes", [])
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å {userId: code}
                    for code_entry in codes_list:
                        if isinstance(code_entry, dict):
                            user_id = str(code_entry.get("userId", ""))
                            code = code_entry.get("code", "")
                            if user_id and code:
                                retailcrm_extensions[user_id] = code
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–∑ RetailCRM
            combined_extensions = {}
            combined_extensions.update(retailcrm_extensions)  # –°–Ω–∞—á–∞–ª–∞ RetailCRM
            combined_extensions.update(local_extensions)      # –ü–æ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç)
            
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤ RetailCRM - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
            if not local_extensions and retailcrm_extensions:
                await save_user_extensions_to_db(enterprise_number, retailcrm_extensions)
                logger.info(f"üì• Imported {len(retailcrm_extensions)} extensions from RetailCRM to local DB")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = response.data or {}
            users = users_data.get("users", [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è UI
            active_users = []
            for user in users:
                if user.get("active", False) and user.get("status", "") == "free":
                    user_id = str(user.get("id", ""))
                    extension = combined_extensions.get(user_id, "")  # –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    
                    active_users.append({
                        "id": user.get("id"),
                        "firstName": user.get("firstName", ""),
                        "lastName": user.get("lastName", ""), 
                        "email": user.get("email", ""),
                        "groups": user.get("groups", []),
                        "extension": extension  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
                    })
            
            logger.info(f"‚úÖ Fetched {len(active_users)} active managers from RetailCRM for enterprise {enterprise_number}")
            
            return {
                "success": True,
                "users": active_users,
                "total": len(active_users)
            }
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error refreshing managers for enterprise {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")

@app.post("/retailcrm-admin/api/save-extensions/{enterprise_number}")
async def admin_api_save_extensions(enterprise_number: str, assignments: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ RetailCRM"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        config_dict = await fetch_retailcrm_config(enterprise_number)
        if not config_dict or not config_dict.get("enabled"):
            raise HTTPException(status_code=404, detail="RetailCRM integration not configured or disabled")
        
        api_url = config_dict.get("domain", "").strip()
        api_key = config_dict.get("api_key", "").strip()
        
        if not api_url or not api_key:
            raise HTTPException(status_code=400, detail="RetailCRM credentials not configured")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        user_extensions = assignments.get("extensions", {})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
        await save_user_extensions_to_db(enterprise_number, user_extensions)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç RetailCRM additionalCodes
        additional_codes = []
        for user_id, extension in user_extensions.items():
            if extension and extension.strip():  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
                additional_codes.append({
                    "userId": str(user_id),
                    "code": extension.strip()
                })
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        client_config = {
            "base_url": api_url,
            "api_key": api_key,
            "api_version": "v5", 
            "timeout": 10
        }
        
        async with RetailCRMClient(client_config) as client:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            integration_code = "vochi-telephony"
            integration_response = await client.get_integration_module(integration_code)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            if integration_response.success and integration_response.data:
                integration_data = integration_response.data.get("integrationModule", {})
                if isinstance(integration_data, str):
                    try:
                        integration_data = json.loads(integration_data)
                    except json.JSONDecodeError:
                        integration_data = {}
            else:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                integration_data = {
                    "code": integration_code,
                    "active": True,
                    "name": "Vochi-CRM",
                    "logo": "https://bot.vochi.by/static/img/vochi_logo.svg",
                    "baseUrl": "https://bot.vochi.by",
                    "clientId": enterprise_number,
                    "integrations": {
                        "telephony": {
                            "additionalCodes": [],
                            "externalPhones": []
                        }
                    }
                }
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if "clientId" not in integration_data:
                integration_data["clientId"] = enterprise_number
            if "baseUrl" not in integration_data:
                integration_data["baseUrl"] = "https://bot.vochi.by"
            if "logo" not in integration_data:
                integration_data["logo"] = "https://bot.vochi.by/static/img/vochi_logo.svg"
            
            # –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RetailCRM - additionalCodes –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ
            integration_data["additionalCodes"] = additional_codes
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ integrations.telephony (–µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if "integrations" in integration_data and "telephony" in integration_data["integrations"]:
                integration_data["integrations"]["telephony"]["additionalCodes"] = additional_codes
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            save_response = await client.upsert_integration_module(integration_code, integration_data)
            
            if not save_response.success:
                logger.error(f"‚ùå Failed to save extensions in RetailCRM: {save_response.error}")
                raise HTTPException(status_code=400, detail=f"RetailCRM API error: {save_response.error}")
            
            logger.info(f"‚úÖ Saved {len(additional_codes)} extension assignments in RetailCRM for enterprise {enterprise_number}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            try:
                fresh_users_result = await admin_api_refresh_managers(enterprise_number)
                if fresh_users_result.get("success") and fresh_users_result.get("users"):
                    return {
                        "success": True,
                        "saved_extensions": len(additional_codes),
                        "assignments": additional_codes,
                        "users": fresh_users_result["users"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Failed to refresh users after saving extensions: {e}")
            
            return {
                "success": True,
                "saved_extensions": len(additional_codes),
                "assignments": additional_codes
            }
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error saving extensions for enterprise {enterprise_number}: {e}")
        raise HTTPException(status_code=500, detail=f"Unexpected error: {str(e)}")

# =============================================================================
# UI: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è RetailCRM (—Ñ–æ—Ä–º–∞ –¥–æ–º–µ–Ω–∞/API-–∫–ª—é—á–∞)
# =============================================================================

ADMIN_PAGE_HTML = """
<!doctype html>
<html lang=\"ru\">
<head>
  <meta charset=\"utf-8\">
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
  <title>{title}</title>
  <link rel=\"icon\" href=\"./favicon.ico\"> 
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; background:#0b1728; color:#e7eef8; }
    .wrap { max-width: 820px; margin: 0 auto; padding: 28px; }
    h1 { font-size: 24px; margin: 0 0 18px; }
    .card { background:#0f2233; border:1px solid #1b3350; border-radius:12px; padding:22px; }
    label { display:block; margin:12px 0 8px; color:#a8c0e0; font-size:14px; }
    input[type=text], input[type=url] { width:100%; padding:12px 14px; border-radius:10px; border:1px solid #2c4a6e; background:#0b1a2a; color:#e7eef8; font-size:16px; }
    .row { display:flex; gap:16px; flex-wrap: wrap; }
    .row > div { flex:1 1 320px; }
    .actions { margin-top:20px; display:flex; align-items:center; gap:16px; }
    .btn { background:#2563eb; color:#fff; border:none; padding:12px 18px; border-radius:10px; cursor:pointer; font-size:16px; }
    .btn:disabled { opacity:.6; cursor:not-allowed; }
    input[type=checkbox] { width:20px; height:20px; accent-color:#2563eb; }
    .hint { color:#8fb3da; font-size:13px; margin-top:6px; }
    .success { color:#4ade80; }
    .error { color:#f87171; }
  </style>
</head>
<body>
  <div class=\"wrap\">
    <div style=\"display:flex; align-items:center; margin-bottom:20px;\">
      <h1 style=\"margin:0; margin-right:15px;\">{header}</h1>
      <img src=\"/static/Retail-big.png\" alt=\"RetailCRM\" style=\"height:48px; width:auto; background:white; padding:4px; border-radius:4px; border:1px solid #ddd;\">
    </div>
    <div class=\"card\">
      <div class=\"row\">
        <div>
          <label>–ê–¥—Ä–µ—Å –¥–æ–º–µ–Ω–∞</label>
        <input id=\"domain\" type=\"url\" placeholder=\"demo.retailcrm.ru\" />
        </div>
        <div>
          <label>API Key</label>
          <input id=\"apiKey\" type=\"text\" placeholder=\"xxxxxxxx\" />
        </div>
      </div>
      <div class=\"actions\">
      <label><input id=\"enabled\" type=\"checkbox\" /> –ê–∫—Ç–∏–≤–µ–Ω?</label>
        <button id=\"saveBtn\" type=\"button\" class=\"btn\">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
        <button id=\"refreshBtn\" type=\"button\" class=\"btn\" style=\"background:#059669;\">–û–±–Ω–æ–≤–∏—Ç—å</button>
        <button id=\"deleteBtn\" type=\"button\" class=\"btn\" style=\"background:#dc2626; margin-left:auto;\">–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é</button>
        <span id=\"msg\" class=\"hint\"></span>
      </div>
    </div>
    
    <!-- –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π RetailCRM -->
    <div class=\"card\" id=\"usersCard\" style=\"display:none;\">
      <h2 style=\"margin:0 0 15px 0; font-size:24px; color:#1f2937;\">–ú–µ–Ω–µ–¥–∂–µ—Ä—ã</h2>
      <div id=\"usersList\"></div>
      <div id=\"usersLoading\" style=\"display:none; color:#8fb3da; font-style:italic;\">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>
  </div>
  </div>
  <script src="./app.js?v=202508091915"></script>
</body>
</html>
"""


# JS –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–Ω–µ—Å–µ–Ω –≤–æ –≤–Ω–µ—à–Ω–∏–π —Ñ–∞–π–ª –Ω–∞ —Å–ª—É—á–∞–π CSP)
ADMIN_PAGE_JS = r"""
  (function(){
  try {
    const qs = new URLSearchParams(location.search);
    const enterprise = qs.get('enterprise_number');
    const titleBase = document.title;

    async function load() {
      try {
        const r = await fetch(`./api/config/${enterprise}`);
        const j = await r.json();
        const cfg = (j.config||{});
        const domainEl = document.getElementById('domain');
        const apiKeyEl = document.getElementById('apiKey');
        const enabledEl = document.getElementById('enabled');
        if (domainEl) domainEl.value = cfg.domain || '';
        if (apiKeyEl) apiKeyEl.value = cfg.api_key || '';
        if (enabledEl) enabledEl.checked = !!cfg.enabled;
      } catch(e) { console.warn('load() error', e); }
    }

    async function save() {
      const domain = (document.getElementById('domain')||{}).value?.trim?.() || '';
      const apiKey = (document.getElementById('apiKey')||{}).value?.trim?.() || '';
      const enabled = !!((document.getElementById('enabled')||{}).checked);
      const btn = document.getElementById('saveBtn');
      const msg = document.getElementById('msg');
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        let r = await fetch(`./api/config/${enterprise}`, { method:'PUT', headers:{'Content-Type':'application/json'}, body: JSON.stringify({config: {domain, api_key: apiKey, enabled}}) });
        if(!r.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞');
        r = await fetch(`./api/register/${enterprise}`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({domain, api_key: apiKey, enabled}) });
        const jr = await r.json();
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        if (msg) { msg.textContent='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'; msg.className='hint success'; }
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }

    async function deleteIntegration() {
      const btn = document.getElementById('deleteBtn');
      const msg = document.getElementById('msg');
      if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      try {
        const r = await fetch(`./api/config/${enterprise}`, { method:'DELETE', headers:{'Content-Type':'application/json'} });
        const jr = await r.json();
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        if (msg) { msg.textContent='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'; msg.className='hint success'; }
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const domainEl = document.getElementById('domain');
        const apiKeyEl = document.getElementById('apiKey');
        const enabledEl = document.getElementById('enabled');
        if (domainEl) domainEl.value = '';
        if (apiKeyEl) apiKeyEl.value = '';
        if (enabledEl) enabledEl.checked = false;
      } catch(e) {
        if (msg) { msg.textContent= '–û—à–∏–±–∫–∞: '+ e.message; msg.className='hint error'; }
      } finally {
        if (btn) btn.disabled=false;
      }
    }



    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –±–ª–æ–∫–µ
    function displayUsers(users) {
      const usersCard = document.getElementById('usersCard');
      const usersList = document.getElementById('usersList');
      
      if (!users || users.length === 0) {
        if (usersCard) usersCard.style.display = 'none';
        return;
      }
      
      let html = '';
      users.forEach(user => {
        const groups = user.groups ? user.groups.map(g => g.name).join(', ') : '';
        const extension = user.extension ? `üìû ${user.extension}` : 'üìû –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
        html += `
          <div style="border:1px solid #e5e7eb; border-radius:8px; padding:15px; margin-bottom:10px; background:#f9fafb;">
            <div style="display:flex; align-items:flex-start; justify-content:space-between;">
              <div style="flex:1;">
                <div style="font-size:18px; font-weight:600; color:#1f2937; margin-bottom:5px;">
                  ${user.firstName} ${user.lastName}
                </div>
                <div style="color:#6b7280; margin-bottom:3px;">ID: ${user.id} ‚Ä¢ ${user.email}</div>
                <div style="color:#059669; font-weight:500; margin-bottom:3px;">${extension}</div>
                ${groups ? `<div style="color:#6b7280; font-size:14px;">–ì—Ä—É–ø–ø—ã: ${groups}</div>` : ''}
              </div>
              <div style="display:flex; align-items:center; gap:10px;">
                <select id="extension_${user.id}" style="padding:8px; border:1px solid #d1d5db; border-radius:4px; font-size:14px; min-width:160px; background:white;">
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä...</option>
                </select>
                <button id="save_${user.id}" type="button" style="display:none; padding:8px 12px; background:#059669; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer; white-space:nowrap;" data-user-id="${user.id}">
                  üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        `;
      });
      
      if (usersList) usersList.innerHTML = html;
      if (usersCard) usersCard.style.display = 'block';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
      const saveButtons = document.querySelectorAll('[id^="save_"]');
      saveButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          const userId = this.getAttribute('data-user-id');
          saveExtension(userId);
        });
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DOM
      setTimeout(() => {
        loadInternalPhones(users);
      }, 100);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
    async function loadInternalPhones(users = []) {
      try {
        console.log('loadInternalPhones called');
        const enterpriseNumber = enterprise;
        console.log('Enterprise number:', enterpriseNumber);
        
        const response = await fetch(`./api/internal-phones/${enterpriseNumber}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        console.log('Response status:', response.status);
        
        if (response.ok) {
          const data = await response.json();
          console.log('Response data:', data);
          if (data.success && data.phones) {
            populateExtensionDropdowns(data.phones, users);
          } else {
            console.log('Data success or phones missing:', data);
          }
        } else {
          console.error('Response not ok:', response.status);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤:', error);
      }
    }
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–æ–º–µ—Ä–∞–º–∏
    function populateExtensionDropdowns(phones, users = []) {
      console.log('populateExtensionDropdowns called with phones:', phones);
      const selects = document.querySelectorAll('[id^="extension_"]');
      console.log('Found selects:', selects.length);
      
      selects.forEach((select, index) => {
        console.log(`Processing select ${index}:`, select.id);
        const userId = select.id.replace('extension_', '');
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = users.find(u => u.id == userId);
        const currentExtension = user ? user.extension : '';
        
        // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –æ–ø—Ü–∏—é
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä...</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        const removeOption = document.createElement('option');
        removeOption.value = 'REMOVE';
        removeOption.textContent = '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞';
        select.appendChild(removeOption);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞
        phones.forEach(phone => {
          const option = document.createElement('option');
          option.value = phone.phone_number;
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
          let optionText = phone.phone_number;
          if (phone.owner) {
            optionText += ` (${phone.owner})`;
          }
          // –£–±–∏—Ä–∞–µ–º "(—Å–≤–æ–±–æ–¥–µ–Ω)" - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
          
          option.textContent = optionText;
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
          if (currentExtension && phone.phone_number === currentExtension) {
            option.selected = true;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            const saveBtn = document.getElementById(`save_${userId}`);
            if (saveBtn) {
              saveBtn.style.display = 'block';
            }
          }
          
          select.appendChild(option);
        });
        
        console.log(`Added ${phones.length} options to select ${select.id}, current: ${currentExtension}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        select.addEventListener('change', function() {
          console.log('Select changed:', this.id, this.value);
          const userId = this.id.replace('extension_', '');
          const saveBtn = document.getElementById(`save_${userId}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          if (this.value && this.value !== '' && this.value !== 'REMOVE') {
            const allSelects = document.querySelectorAll('[id^="extension_"]');
            let conflictFound = false;
            
            allSelects.forEach(otherSelect => {
              if (otherSelect !== this && otherSelect.value === this.value) {
                const otherUserId = otherSelect.id.replace('extension_', '');
                console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –Ω–æ–º–µ—Ä ${this.value} —É–∂–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${otherUserId}`);
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                conflictFound = true;
              }
            });
            
            if (conflictFound) {
              console.log('–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω');
            }
          }
          
          if (saveBtn) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –∏–ª–∏ "REMOVE"
            saveBtn.style.display = (this.value && this.value !== '') ? 'block' : 'none';
          }
        });
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–±–∞–≤–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    async function saveExtension(userId) {
      try {
        const select = document.getElementById(`extension_${userId}`);
        const saveBtn = document.getElementById(`save_${userId}`);
        
        if (!select || !select.value) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"');
          return;
        }
        
        const enterpriseNumber = enterprise;
        const selectedNumber = select.value.trim();
        
        // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const extensions = {};
        const allSelects = document.querySelectorAll('[id^="extension_"]');
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allSelects.forEach(sel => {
          const uid = sel.id.replace('extension_', '');
          if (uid !== userId && sel.value && sel.value.trim() && sel.value.trim() !== 'REMOVE') {
            const number = sel.value.trim();
            
            // –ï—Å–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —É–±–∏—Ä–∞–µ–º –µ–≥–æ —É –¥—Ä—É–≥–æ–≥–æ
            if (number === selectedNumber && selectedNumber !== 'REMOVE') {
              console.log(`üîÑ –ù–æ–º–µ—Ä ${selectedNumber} –æ—Ç–±–∏—Ä–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${uid} –¥–ª—è ${userId}`);
              sel.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ
              // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const otherSaveBtn = document.getElementById(`save_${uid}`);
              if (otherSaveBtn) {
                otherSaveBtn.style.display = 'none';
              }
            } else {
              extensions[uid] = number;
            }
          }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞")
        if (selectedNumber && selectedNumber !== 'REMOVE') {
          extensions[userId] = selectedNumber;
        }
        
        console.log('–°–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', extensions);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (saveBtn) {
          saveBtn.textContent = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
          saveBtn.disabled = true;
        }
        
        const response = await fetch(`./api/save-extensions/${enterpriseNumber}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            extensions: extensions
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (data.users && Array.isArray(data.users)) {
              console.log('üìã Updating UI with fresh user data:', data.users);
              displayUsers(data.users);
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
              setTimeout(() => {
                loadInternalPhones(data.users);
              }, 100);
            } else {
              // Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
              await loadUsers();
            }
            console.log('‚úÖ –î–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ RetailCRM');
          } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
          }
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞:', error);
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const saveBtn = document.getElementById(`save_${userId}`);
        if (saveBtn) {
          saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
          saveBtn.disabled = false;
        }
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
    async function loadUsers() {
      const usersLoading = document.getElementById('usersLoading');
      const msg = document.getElementById('msg');
      
      if (usersLoading) usersLoading.style.display = 'block';
      
      try {
        const r = await fetch(`./api/refresh-managers/${enterprise}`, { 
          method:'POST', 
          headers:{'Content-Type':'application/json'} 
        });
        const jr = await r.json();
        
        if (usersLoading) usersLoading.style.display = 'none';
        
        if(!jr.success) throw new Error(jr.error||'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
        
        const users = jr.users || [];
        displayUsers(users);
        
        console.log('RetailCRM managers loaded:', users);
        
      } catch(e) {
        if (usersLoading) usersLoading.style.display = 'none';
        console.error('Error loading users:', e);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (e.message && !e.message.includes('not configured')) {
          if (msg) { 
            msg.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + e.message; 
            msg.className = 'hint error'; 
          }
        }
      }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è refreshManagers - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    async function refreshManagers() {
      const btn = document.getElementById('refreshBtn');
      const msg = document.getElementById('msg');
      
      if (msg) { msg.textContent=''; msg.className='hint'; }
      if (btn) btn.disabled = true;
      
      try {
        await loadUsers();
        if (msg) { 
          msg.textContent = '–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω'; 
          msg.className = 'hint success'; 
        }
      } catch(e) {
        if (msg) { 
          msg.textContent = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + e.message; 
          msg.className = 'hint error'; 
        }
      } finally {
        if (btn) btn.disabled = false;
      }
    }

    const saveBtn = document.getElementById('saveBtn');
    const deleteBtn = document.getElementById('deleteBtn');
    const refreshBtn = document.getElementById('refreshBtn');
    if (saveBtn) saveBtn.addEventListener('click', (e) => { e.preventDefault(); save(); });
    if (deleteBtn) deleteBtn.addEventListener('click', (e) => { e.preventDefault(); deleteIntegration(); });
    if (refreshBtn) refreshBtn.addEventListener('click', (e) => { e.preventDefault(); refreshManagers(); });
    load();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
      loadUsers();
    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  } catch (e) { console.error('Admin JS init error', e); }
  })();
"""


@app.get("/retailcrm-admin/", response_class=HTMLResponse)
@app.post("/retailcrm-admin/", response_class=HTMLResponse)
async def retailcrm_admin_page(enterprise_number: str, token: str = None) -> HTMLResponse:
    """–ü—Ä–æ—Å—Ç–∞—è UI‚Äë—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–º–µ–Ω–∞ –∏ API‚Äë–∫–ª—é—á–∞.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω –∏–∑ RetailCRM.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if token:
        verified_enterprise = verify_retailcrm_access_token(token)
        if not verified_enterprise:
            raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
        if verified_enterprise != enterprise_number:
            raise HTTPException(status_code=403, detail="–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")
        logger.info(f"üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ RetailCRM —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {enterprise_number}")
    
    # –ü–æ–ª—É—á–∏–º –∏–º—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    name = enterprise_number
    try:
        if pg_pool is None:
            await init_pg_pool()
        async with pg_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT name FROM enterprises WHERE number=$1", enterprise_number)
            if row:
                name = row["name"]
    except Exception:
        pass
    title = f"{name} RetailCRM"
    # –ò–∑–±–µ–≥–∞–µ–º .format() –∏–∑-–∑–∞ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ CSS/JS ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    html = (
        ADMIN_PAGE_HTML
        .replace("{title}", title)
        .replace("{header}", title)
    )
    return HTMLResponse(content=html)


@app.get("/retailcrm-admin/favicon.ico")
async def retailcrm_admin_favicon():
    """–û—Ç–¥–∞—ë—Ç favicon –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –∏–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∏–Ω–∞—á–µ –æ—Ç–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.
    """
    try:
        candidate_paths = []
        if os.path.isdir(STATIC_DIR):
            candidate_paths.append(os.path.join(STATIC_DIR, "favicon.ico"))
            candidate_paths.append(os.path.join(STATIC_DIR, "img", "favicon.ico"))
        for p in candidate_paths:
            if os.path.isfile(p):
                return FileResponse(p, media_type="image/x-icon")
    except Exception:
        pass
    return Response(status_code=204)


@app.get("/retailcrm-admin/app.js")
async def retailcrm_admin_js():
    return Response(content=ADMIN_PAGE_JS, media_type="application/javascript")

@app.get("/test/credentials")
async def test_credentials():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RetailCRM"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.test_credentials()
        return result.dict()


@app.get("/test/sites")
async def test_sites():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_sites()
        return result.dict()


@app.get("/test/users")
async def test_users():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_users()
        return result.dict()


@app.get("/test/user/{user_id}")
async def test_user(user_id: int):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_user(user_id)
        return result.dict()


@app.get("/test/search-customer")
async def test_search_customer(phone: str):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.search_customer_by_phone(phone)
        return result.dict()


@app.post("/test/create-customer")
async def test_create_customer(customer: CustomerData):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.create_customer(customer)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_create_customer: {e}")
        return {"success": False, "error": str(e)}


@app.post("/test/call-task")
async def test_call_task(call_data: CallEventData):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ –∑–≤–æ–Ω–∫–µ"""
    try:
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.create_call_task(call_data)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_call_task: {e}")
        return {"success": False, "error": str(e)}

# ===== –ù–û–í–´–ï ENDPOINTS –ü–û –û–§–ò–¶–ò–ê–õ–¨–ù–û–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò =====

@app.post("/test/upload-calls")
async def test_upload_calls():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        # –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        test_calls = [{
            "date": "2025-01-08 15:30:00",
            "type": "in",
            "phone": "375296254070",  # –ë–µ–∑ –ø–ª—é—Å–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            "code": "151",  # –û–¥–∏–Ω –∫–æ–¥, –Ω–µ –º–∞—Å—Å–∏–≤
            "duration": 120,  # –ß–∏—Å–ª–æ, –Ω–µ —Å—Ç—Ä–æ–∫–∞
            "result": "answered",  # result –≤–º–µ—Å—Ç–æ status
            "externalId": "test-call-001",  # externalId –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            "recordUrl": "https://bot.vochi.by/retailcrm/call-recording/27596e3c-1481-406f-a1b9-ffcaa6c737cc",
            "externalPhone": "375296254070"  # –ë–µ–∑ –ø–ª—é—Å–∞
        }]
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.upload_calls_history(test_calls)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_upload_calls: {e}")
        return {"success": False, "error": str(e)}

@app.post("/test/call-event")  
async def test_call_event():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ RetailCRM
        test_event = {
            "phone": "375296254070",  # –ë–µ–∑ –ø–ª—é—Å–∞
            "type": "in",
            "codes": ["151"],  # –ö–æ–¥ –ï–≤–≥–µ–Ω–∏—è –ë–∞–µ–≤—Å–∫–æ–≥–æ (ID 16) –∏–∑ RetailCRM users API
            "callExternalId": "test-call-event-002",  # callExternalId –¥–ª—è —Å–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
            "externalPhone": "375296254070"  # –ë–µ–∑ –ø–ª—é—Å–∞
        }
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.send_call_event(test_event)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_call_event: {e}")
        return {"success": False, "error": str(e)}

@app.get("/test/manager/{phone}")
async def test_get_manager(phone: str):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø–ª—é—Å –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
        clean_phone = phone.lstrip('+')
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.get_responsible_manager(clean_phone)
            if result:
                return result.dict()
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_get_manager: {e}")
        return {"success": False, "error": str(e)}

@app.post("/test/real-call")
async def test_real_call():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –∏–∑ –Ω–∞—à–µ–π –ë–î"""
    try:
        import uuid
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID 
        unique_id = str(uuid.uuid4())
        test_call = {
                "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "type": "in",
                "phone": "375296254070",
                "code": "151",
                "duration": 90,
                "result": "answered",
                "externalId": unique_id,
                "recordUrl": f"https://bot.vochi.by/retailcrm/call-recording/01777e5e-0a53-4dfd-8df9-14f3fd6fc000",
                "externalPhone": "375296254070"
            }
        
        async with RetailCRMClient(RETAILCRM_CONFIG) as client:
            result = await client.upload_calls_history([test_call])
            if result:
                return {
                    "success": True,
                    "call_data": test_call,
                    "result": result.dict()
                }
            else:
                return {"success": False, "error": "No result returned"}
    except Exception as e:
        logger.error(f"‚ùå Error in test_real_call: {e}")
        return {"success": False, "error": str(e)}


# ===== WEBHOOKS –î–õ–Ø RETAILCRM =====

@app.get("/retailcrm/make-call")
async def make_call_webhook(
    clientId: str,
    phone: str,
    userId: int,
    code: str = None,
    externalPhone: str = None
):
    """Webhook –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞ –∏–∑ RetailCRM
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - clientId: —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RetailCRM
    - phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞
    - userId: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ RetailCRM
    - code: –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø–æ userId)
    - externalPhone: –≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    logger.info(f"üî• RetailCRM Click-to-Call: userId={userId}, phone={phone}, code={code}")
    
    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –ø–æ clientId
        enterprise = await find_enterprise_by_integration_token(clientId)
        if not enterprise:
            logger.error(f"‚ùå Enterprise not found for clientId: {clientId}")
            return Response(status_code=401, content="Unauthorized: Invalid clientId")
        
        logger.info(f"üè¢ Found enterprise: {enterprise['name']} ({enterprise['number']})")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_extensions = await load_user_extensions_from_db(enterprise["number"])
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä
        internal_extension = None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–∞—Ä–∞–º–µ—Ç—Ä code, –∑–∞—Ç–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ userId
        if code and code.strip():
            internal_extension = code.strip()
            logger.info(f"üìû Using provided code: {internal_extension}")
        else:
            # –ò—â–µ–º –ø–æ userId –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            internal_extension = user_extensions.get(str(userId))
            if internal_extension:
                logger.info(f"üìû Found extension by userId {userId}: {internal_extension}")
            else:
                logger.error(f"‚ùå No extension found for userId {userId}")
                return Response(status_code=400, content=f"No extension configured for user {userId}")
        
        # 4. –í—ã–∑—ã–≤–∞–µ–º asterisk.py –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞
        asterisk_result = await call_asterisk_api(
            code=internal_extension,
            phone=phone,
            client_id=enterprise["secret"]
        )
        
        if asterisk_result["success"]:
            logger.info(f"‚úÖ Call initiated successfully: {internal_extension} -> {phone}")
            return Response(status_code=200, content="OK")
        else:
            logger.error(f"‚ùå Asterisk API failed: {asterisk_result.get('error', 'Unknown error')}")
            return Response(status_code=500, content=f"Call initiation failed: {asterisk_result.get('error', 'Unknown error')}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in make_call_webhook: {e}")
        return Response(status_code=500, content=f"Internal error: {str(e)}")

@app.get("/retailcrm/status")  
async def status_change_webhook(
    clientId: str,
    userId: int,
    code: str,
    status: str
):
    """Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üìä –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞: userId={userId}, code={code}, status={status}")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
        return Response(status_code=200, content="OK")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return Response(status_code=500, content="Error")

@app.get("/retailcrm/config")
async def telephony_config_webhook():
    """Webhook –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info(f"üìû –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏")
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–¥–æ–≤
        config = {
            "users": [
                {"id": 16, "code": "151", "name": "–ï–≤–≥–µ–Ω–∏–π –ë–∞–µ–≤—Å–∫–∏–π"},
                {"id": 18, "code": "152", "name": "–î–∂—É–ª–∞–π –î–∂—É–Ω–æ–≤—ã–π"},
                {"id": 19, "code": "150", "name": "–ê–≤–≥—É—Å—Ç –¢–∏–º–ª–∏–¥–æ–≤—ã–π"}
            ],
            "success": True
        }
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {config}")
        return config
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": str(e)}

@app.get("/retailcrm/call-recording/{call_id}")
async def get_call_recording_proxy(call_id: str):
    """–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø–∏—Å–µ–π –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç RetailCRM –∫ –Ω–∞—à–∏–º —Ñ–∞–π–ª–∞–º"""
    logger.info(f"üéß –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∫–∞: {call_id}")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –∑–∞–ø–∏—Å–µ–π
        from fastapi.responses import RedirectResponse
        
        # –ò—â–µ–º UUID –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ call_id –∏–ª–∏ external_id
        real_recording_url = f"https://bot.vochi.by/recordings/file/{call_id}"
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞: {real_recording_url}")
        return RedirectResponse(url=real_recording_url)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        from fastapi.responses import JSONResponse
        return JSONResponse(
            status_code=404,
            content={"error": "Recording not found", "call_id": call_id}
        )

@app.get("/test/telephony-settings")
async def test_telephony_settings():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏"""
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        result = await client.get_telephony_settings()
        return result.dict()


# =============================================================================
# –ü–û–õ–ù–´–ô –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô
# =============================================================================

@app.get("/test/full-scenario")
async def test_full_scenario():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å RetailCRM"""
    
    results = {}
    async with RetailCRMClient(RETAILCRM_CONFIG) as client:
        
        # 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("üî∏ 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        results["credentials"] = await client.test_credentials()
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        logger.info("üî∏ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        results["sites"] = await client.get_sites()
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üî∏ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        results["users"] = await client.get_users()
        
        # 4. –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üî∏ 4. –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É...")
        test_phone = "+375296254070"
        results["search_customer"] = await client.search_customer_by_phone(test_phone)
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üî∏ 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        test_customer = CustomerData(
            firstName="–¢–µ—Å—Ç–æ–≤—ã–π",
            lastName="–ö–ª–∏–µ–Ω—Ç",
            phones=[PhoneData(number=test_phone)],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            email="test@example.com",
            managerId=16  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ï–≤–≥–µ–Ω–∏—é –ë–∞–µ–≤—Å–∫–æ–º—É
        )
        results["create_customer"] = await client.create_customer(test_customer)
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ –∑–≤–æ–Ω–∫–µ —Å –∑–∞–ø–∏—Å—å—é
        logger.info("üî∏ 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ –∑–≤–æ–Ω–∫–µ...")
        test_call = CallEventData(
            phone=test_phone,
            type="incoming", 
            duration=135,  # 2 –º–∏–Ω 15 —Å–µ–∫
            status="answered",
            customer_id=69,  # –ê–Ω–Ω–∞ –°–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            manager_name="–ï–≤–≥–µ–Ω–∏–π –ë–∞–µ–≤—Å–∫–∏–π",
                                recording_url="https://bot.vochi.by/recordings/file/27596e3c-1481-406f-a1b9-ffcaa6c737cc"
        )
        results["call_task"] = await client.create_call_task(test_call)
        
        # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
        logger.info("üî∏ 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏...")
        results["telephony_settings"] = await client.get_telephony_settings()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    summary = {
        "test_completed_at": datetime.now().isoformat(),
        "total_tests": len(results),
        "successful_tests": sum(1 for r in results.values() if r.success),
        "failed_tests": sum(1 for r in results.values() if not r.success),
        "average_response_time": sum(r.response_time for r in results.values()) / len(results),
        "results": {k: v.dict() for k, v in results.items()}
    }
    
    logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['successful_tests']}/{summary['total_tests']} —É—Å–ø–µ—à–Ω–æ")
    return summary


# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê
# =============================================================================

if __name__ == "__main__":
    logger.info("üè™ –ó–∞–ø—É—Å–∫ RetailCRM Integration Service...")
    logger.info(f"üîß –§–∞–∑–∞ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
    logger.info(f"üåê RetailCRM: {RETAILCRM_CONFIG['base_url']}")
    
    uvicorn.run(
        "retailcrm:app",
        host="0.0.0.0",
        port=8019,
        log_level="info"
    )