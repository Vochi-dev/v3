GOIP МИКРОСЕРВИС - ОПИСАНИЕ ФУНКЦИЙ
=====================================

ОСНОВНАЯ ИНФОРМАЦИЯ:
- Порт: 8008
- Файл сервиса: goip_service.py
- Управляющий скрипт: goip.sh
- Логи: /var/log/goip_service.log

ФУНКЦИИ СЕРВИСА:

1. АВТОМАТИЧЕСКОЕ СКАНИРОВАНИЕ ПОРТОВ
   - Каждые 5 минут сканирует mftp.vochi.by:8086
   - Ищет устройства с кнопкой RADMIN
   - Извлекает порты из ссылок (например, :38000)
   - Обновляет информацию в таблице goip

2. ПОЛУЧЕНИЕ ИНФОРМАЦИИ ОБ УСТРОЙСТВЕ
   - Подключается к веб-интерфейсу GoIP по найденному порту
   - Извлекает модель устройства из <title>
   - Получает серийный номер и последние 4 цифры
   - Определяет версию прошивки и модуля

3. МОНИТОРИНГ ЛИНИЙ УСТРОЙСТВА
   - Authentication ID из Basic VoIP конфигурации
   - RSSI (уровень сигнала) из Status Summary
   - Busy Status из SIM Call Forward
   - Поддерживает до 32 линий на устройство

4. УПРАВЛЕНИЕ УСТРОЙСТВАМИ
   - Перезагрузка через веб-интерфейс tools.html
   - Отправка POST запроса на reboot.html
   - Проверка успешности операции

5. REST API ENDPOINTS
   GET /                    - Информация о сервисе
   GET /health             - Проверка здоровья (подключение к БД)
   GET /devices            - Список всех устройств
   GET /devices/{name}     - Информация о конкретном устройстве
   GET /devices/{name}/lines - Статус линий устройства
   POST /devices/{name}/reboot - Перезагрузка устройства
   POST /scan              - Ручное сканирование портов

6. РАБОТА С БАЗОЙ ДАННЫХ
   - Использует таблицу goip с расширенными полями
   - Получает креды из таблицы enterprises
   - Обновляет статус портов и информацию об устройствах
   - Записывает время последнего сканирования

СТАТУСЫ УСТРОЙСТВ:
- active    - устройство найдено и доступно
- inactive  - устройство не найдено на mftp
- error     - ошибка при получении информации
- unknown   - статус неизвестен (по умолчанию)

ПОЛЯ ТАБЛИЦЫ GOIP:
- port                - текущий порт устройства
- last_port_scan      - время последнего сканирования
- port_scan_status    - статус сканирования
- device_model        - модель (GoIP4, GoIP8, GoIP16, GoIP32)
- serial_last4        - последние 4 цифры серийного номера

ИНТЕГРАЦИЯ С MFTP:
- Подключение к mftp.vochi.by:8086
- Поиск устройств по имени gateway_name
- Извлечение портов из ссылок RADMIN
- Обработка HTML таблицы устройств

БЕЗОПАСНОСТЬ:
- Креды устройств из таблицы enterprises
- Basic Auth для подключения к GoIP
- Таймауты для предотвращения зависания
- Логирование без паролей

ФОНОВЫЕ ЗАДАЧИ:
- periodic_port_scan() - периодическое сканирование
- Запуск при старте сервиса
- Обработка ошибок и продолжение работы
- Интервал настраивается через GOIP_SCAN_INTERVAL

ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:
curl http://127.0.0.1:8008/devices
curl http://127.0.0.1:8008/devices/Vochi-Main/lines
curl -X POST http://127.0.0.1:8008/devices/Vochi-Main/reboot
curl -X POST http://127.0.0.1:8008/scan

УПРАВЛЕНИЕ СЕРВИСОМ:
./goip.sh start    - Запуск сервиса
./goip.sh stop     - Остановка сервиса
./goip.sh restart  - Перезапуск сервиса
./goip.sh status   - Проверка статуса

ЗАВИСИМОСТИ:
- FastAPI - веб-фреймворк
- aiohttp - HTTP клиент
- asyncpg - PostgreSQL драйвер
- beautifulsoup4 - парсинг HTML
- uvicorn - ASGI сервер

КОНФИГУРАЦИЯ:
Все настройки жестко заданы в коде goip_service.py:
- GOIP_SERVICE_PORT=8008
- GOIP_SCAN_INTERVAL=300 (5 минут)
- GOIP_SCAN_TIMEOUT=30
- MFTP_HOST=mftp.vochi.by
- MFTP_PORT=8086
- MFTP_USERNAME=admin
- MFTP_PASSWORD=cdjkjxbdct4070+37529AAA
- GOIP_DEFAULT_USERNAME=admin
- GOIP_DEFAULT_PASSWORD=admin

ПРИМЕЧАНИЕ: Креды mftp.vochi.by хранятся жестко в коде 
для избежания конфликтов с основным приложением.

ЛОГИРОВАНИЕ:
- Все операции записываются в /var/log/goip_service.log
- Уровень INFO для обычных операций
- Уровень ERROR для ошибок
- Время выполнения операций

ПРОИЗВОДИТЕЛЬНОСТЬ:
- Параллельные запросы к устройствам
- Кэширование информации в БД
- Таймауты для быстрого отказа
- Оптимизированные SQL запросы

МОНИТОРИНГ:
- Health check endpoint
- Логи операций
- Статистика по устройствам
- Отслеживание времени сканирования 