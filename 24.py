#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë–∏—Ç—Ä–∏–∫—Å24 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - Webhook —Å–µ—Ä–≤–∏—Å
–ü–æ—Ä—Ç: 8024
"""

import asyncio
import json
import time
import uuid
from datetime import datetime
from typing import Optional, Dict, Any

import asyncpg
import httpx
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse, Response
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bitrix24.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Bitrix24 Integration Service", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bitrix24_config_cache = {}
BITRIX24_CONFIG_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Bitrix24 Integration Service starting on port 8024")

@app.on_event("shutdown") 
async def shutdown_event():
    logger.info("üõë Bitrix24 Integration Service shutting down")

@app.get("/")
async def root():
    return {
        "service": "Bitrix24 Integration",
        "version": "1.0.0",
        "port": 8024,
        "status": "running",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/bitrix24-crm/{webhook_uuid}")
async def uuid_webhook_handler(webhook_uuid: str, request: Request):
    """UUID-based –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        content_type = request.headers.get("content-type", "")
        
        if "application/json" in content_type:
            data = await request.json()
        else:
            # –î–ª—è form-data
            form_data = await request.form()
            data = dict(form_data)
        
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è UUID: {webhook_uuid}")
        logger.info(f"Event: {data.get('event')}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –ø–æ UUID
        enterprise_number = await find_enterprise_by_webhook_uuid(webhook_uuid)
        if not enterprise_number:
            logger.warning(f"‚ùå –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å UUID {webhook_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            raise HTTPException(status_code=404, detail="Webhook UUID not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–∏—Ç—Ä–∏–∫—Å24
        b24_config = await get_bitrix24_config(enterprise_number)
        if not b24_config:
            logger.warning(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è {enterprise_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise HTTPException(status_code=404, detail="Bitrix24 configuration not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        expected_token = b24_config.get('webhook_token')
        received_token = data.get('auth', {}).get('application_token')
        
        if not expected_token or expected_token != received_token:
            logger.warning(f"üîí –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è UUID {webhook_uuid}")
            raise HTTPException(status_code=401, detail="Invalid application token")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
        event_type = data.get('event')
        logger.info(f"üéØ Processing Bitrix24 event: {event_type} for enterprise {enterprise_number}")
        
        if event_type == 'OnExternalCallStart':
            result = await handle_external_call_start(enterprise_number, data)
        elif event_type == 'OnExternalCallBackStart':
            result = await handle_callback_start(enterprise_number, data)
        else:
            logger.warning(f"‚ö†Ô∏è Unknown Bitrix24 event type: {event_type}")
            result = {"status": "unknown_event", "event_type": event_type}
        
        return {"status": "success", "result": result}
        
    except Exception as e:
        logger.error(f"üí• Error processing UUID webhook: {e}")
        raise HTTPException(status_code=500, detail=f"Webhook processing failed: {str(e)}")

@app.post("/bitrix24/webhook/test")
async def test_webhook_handler(request: Request):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        content_type = request.headers.get("content-type", "")
        
        if "application/json" in content_type:
            data = await request.json()
        else:
            # –î–ª—è form-data
            form_data = await request.form()
            data = dict(form_data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üî• –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24:")
        logger.info(f"Headers: {dict(request.headers)}")
        logger.info(f"Data: {json.dumps(data, ensure_ascii=False, indent=2)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        with open(f"/tmp/bitrix24_webhook_test_{timestamp}.json", "w", encoding="utf-8") as f:
            json.dump({
                "headers": dict(request.headers),
                "data": data,
                "timestamp": timestamp
            }, f, ensure_ascii=False, indent=2)
        
        # –ò—â–µ–º application_token
        app_token = None
        if isinstance(data, dict):
            auth_data = data.get("auth", {})
            if isinstance(auth_data, dict):
                app_token = auth_data.get("application_token")
        
        if app_token:
            logger.info(f"üéØ APPLICATION_TOKEN –Ω–∞–π–¥–µ–Ω: {app_token}")
        else:
            logger.warning("‚ö†Ô∏è APPLICATION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        
        return {"status": "ok", "received": True, "app_token": app_token}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "bitrix24",
        "port": 8024,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/24-admin/favicon.ico")
async def serve_favicon():
    """–û—Ç–¥–∞—á–∞ favicon –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    from fastapi.responses import FileResponse
    import os
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π favicon —Å–∏—Å—Ç–µ–º—ã
    favicon_path = "/root/asterisk-webhook/app/static/favicon.ico"
    if os.path.exists(favicon_path):
        return FileResponse(favicon_path, media_type="image/x-icon")
    else:
        raise HTTPException(status_code=404, detail="Favicon not found")

@app.get("/24-admin/logo.png")
async def serve_logo():
    """–û—Ç–¥–∞—á–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    from fastapi.responses import FileResponse
    import os
    
    logo_path = "/root/asterisk-webhook/24.png"
    if os.path.exists(logo_path):
        return FileResponse(logo_path, media_type="image/png")
    else:
        raise HTTPException(status_code=404, detail="Logo not found")

@app.get("/24-admin/app.js")
async def get_bitrix24_admin_js():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JavaScript –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –ë–∏—Ç—Ä–∏–∫—Å24"""
    js_content = '''
// –ë–∏—Ç—Ä–∏–∫—Å24 –∞–¥–º–∏–Ω–∫–∞ JavaScript
(function() {
    const enterprise = window.location.pathname.split('/')[2];
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    window.copyToClipboard = function(elementId) {
        const element = document.getElementById(elementId);
        const text = element.value;
        
        navigator.clipboard.writeText(text).then(function() {
            const button = element.nextElementSibling;
            const originalText = button.textContent;
            button.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            button.style.background = '#28a745';
            
            setTimeout(function() {
                button.textContent = originalText;
                button.style.background = '#1b3350';
            }, 2000);
        }).catch(function(err) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
            element.select();
            document.execCommand('copy');
        });
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async function save() {
        const incoming_webhook = (document.getElementById('incoming-webhook') || {}).value?.trim() || '';
        const webhook_token = (document.getElementById('webhook-token') || {}).value?.trim() || '';
        const enabled = !!(document.getElementById('enabled') || {}).checked;
        const btn = document.getElementById('saveBtn');
        const msg = document.getElementById('msg');
        
        if (msg) { msg.textContent = ''; msg.className = 'form-text'; }
        if (btn) btn.disabled = true;
        
        try {
            const formData = new FormData();
            formData.append('incoming_webhook', incoming_webhook);
            formData.append('webhook_token', webhook_token);
            formData.append('enabled', enabled);
            
            const r = await fetch(`/24-admin/${enterprise}/save`, {
                method: 'POST',
                body: formData
            });
            
            const jr = await r.json();
            if (!jr.success) throw new Error(jr.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            if (msg) { msg.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'; msg.className = 'form-text success'; }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            if (incoming_webhook && webhook_token) {
                loadUsers();
            }
        } catch(e) {
            if (msg) { msg.textContent = '–û—à–∏–±–∫–∞: ' + e.message; msg.className = 'form-text error'; }
        } finally {
            if (btn) btn.disabled = false;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    async function deleteIntegration() {
        const btn = document.getElementById('deleteBtn');
        const msg = document.getElementById('msg');
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
        
        if (msg) { msg.textContent = ''; msg.className = 'form-text'; }
        if (btn) btn.disabled = true;
        
        try {
            const r = await fetch(`/24-admin/${enterprise}/delete`, { method: 'POST' });
            const jr = await r.json();
            if (!jr.success) throw new Error(jr.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            if (msg) { msg.textContent = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'; msg.className = 'form-text success'; }
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            const incomingEl = document.getElementById('incoming-webhook');
            const tokenEl = document.getElementById('webhook-token');
            const enabledEl = document.getElementById('enabled');
            if (incomingEl) incomingEl.value = '';
            if (tokenEl) tokenEl.value = '';
            if (enabledEl) enabledEl.checked = false;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const usersCard = document.getElementById('usersCard');
            if (usersCard) usersCard.style.display = 'none';
        } catch(e) {
            if (msg) { msg.textContent = '–û—à–∏–±–∫–∞: ' + e.message; msg.className = 'form-text error'; }
        } finally {
            if (btn) btn.disabled = false;
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    function displayUsers(users) {
        const usersCard = document.getElementById('usersCard');
        const usersList = document.getElementById('usersList');
        
        if (!users || users.length === 0) {
            if (usersCard) usersCard.style.display = 'none';
            return;
        }
        
        let html = '';
        users.forEach(user => {
            html += `
                <div style="background: #162332; border: 1px solid #1b3350; border-radius: 8px; padding: 16px; margin-bottom: 12px;">
                    <div style="display: flex; align-items: center; justify-content: space-between;">
                        <div>
                            <div style="font-weight: 500; color: #e7eef8; margin-bottom: 4px;">${user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
                            <div style="font-size: 12px; color: #a8b3c7;">ID: ${user.id} ‚Ä¢ ${user.email || 'email –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                            ${user.current_extension ? `<div style="font-size: 12px; color: #00b4db; margin-top: 2px;">üìû ${user.current_extension}</div>` : ''}
                        </div>
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <select id="extension-${user.id}" style="padding: 6px 8px; border: 1px solid #1b3350; border-radius: 4px; background: #0b1728; color: #e7eef8; font-size: 12px;">
                                <option value="">–ë–µ–∑ –Ω–æ–º–µ—Ä–∞</option>
                            </select>
                            <button onclick="saveExtension('${user.id}')" style="padding: 6px 12px; background: #059669; color: white; border: none; border-radius: 4px; font-size: 12px; cursor: pointer;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            `;
        });
        
        usersList.innerHTML = html;
        usersCard.style.display = 'block';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º dropdown'—ã
        loadInternalPhones(users);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    async function loadInternalPhones(users) {
        try {
            const r = await fetch(`/24-admin/api/internal-phones/${enterprise}`);
            const phones = await r.json();
            populateExtensionDropdowns(phones, users);
        } catch(e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–æ–≤:', e);
        }
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ dropdown'–æ–≤ –Ω–æ–º–µ—Ä–∞–º–∏
    function populateExtensionDropdowns(phones, users) {
        users.forEach(user => {
            const select = document.getElementById(`extension-${user.id}`);
            if (!select) return;
            
            // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
            select.innerHTML = '<option value="">–ë–µ–∑ –Ω–æ–º–µ—Ä–∞</option>';
            
            phones.forEach(phone => {
                const option = document.createElement('option');
                option.value = phone.extension;
                option.textContent = phone.extension;
                
                // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–æ–º–µ—á–∞–µ–º
                if (phone.assigned_user_id && phone.assigned_user_id !== user.id) {
                    option.textContent += ` (–∑–∞–Ω—è—Ç)`;
                    option.style.color = '#f87171';
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (phone.assigned_user_id === user.id) {
                    option.selected = true;
                }
                
                select.appendChild(option);
            });
        });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    window.saveExtension = async function(userId) {
        const select = document.getElementById(`extension-${userId}`);
        if (!select) return;
        
        const selectedExtension = select.value;
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const allAssignments = {};
        document.querySelectorAll('[id^="extension-"]').forEach(sel => {
            const uid = sel.id.replace('extension-', '');
            const ext = sel.value;
            if (ext) {
                allAssignments[uid] = ext;
            }
        });
        
        try {
            const r = await fetch(`/24-admin/api/save-extensions/${enterprise}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(allAssignments)
            });
            
            const result = await r.json();
            if (!result.success) throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            loadUsers();
        } catch(e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞:', e);
            alert('–û—à–∏–±–∫–∞: ' + e.message);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async function loadUsers() {
        const usersLoading = document.getElementById('usersLoading');
        const usersCard = document.getElementById('usersCard');
        
        if (usersLoading) usersLoading.style.display = 'block';
        
        try {
            const r = await fetch(`/24-admin/api/refresh-managers/${enterprise}`, { method: 'POST' });
            const result = await r.json();
            if (!result.success) throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            displayUsers(result.users || []);
        } catch(e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
            if (usersCard) usersCard.style.display = 'none';
        } finally {
            if (usersLoading) usersLoading.style.display = 'none';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    function refreshManagers() {
        loadUsers();
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('DOMContentLoaded', function() {
        const saveBtn = document.getElementById('saveBtn');
        const refreshBtn = document.getElementById('refreshBtn');
        const deleteBtn = document.getElementById('deleteBtn');
        
        if (saveBtn) saveBtn.addEventListener('click', save);
        if (refreshBtn) refreshBtn.addEventListener('click', refreshManagers);
        if (deleteBtn) deleteBtn.addEventListener('click', deleteIntegration);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const incomingWebhook = document.getElementById('incoming-webhook');
        const webhookToken = document.getElementById('webhook-token');
        if (incomingWebhook && webhookToken && incomingWebhook.value && webhookToken.value) {
            loadUsers();
        }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.loadUsers = loadUsers;
    window.refreshManagers = refreshManagers;
})();
    '''
    
    return Response(content=js_content, media_type="application/javascript")

@app.post("/bitrix24/webhook/{enterprise_number}")
async def bitrix24_webhook(enterprise_number: str, request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook'–æ–≤ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    try:
        body = await request.json()
        logger.info(f"üì• Bitrix24 webhook from {enterprise_number}: {body}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        b24_config = await get_bitrix24_config(enterprise_number)
        if not b24_config or not b24_config.get('enabled'):
            logger.warning(f"‚ùå Bitrix24 integration not enabled for {enterprise_number}")
            raise HTTPException(status_code=404, detail="–ë–∏—Ç—Ä–∏–∫—Å24 integration not found")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è webhook'–∞
        if not await authenticate_bitrix24_webhook(b24_config, body, request.headers):
            logger.warning(f"üîí Unauthorized Bitrix24 webhook from {enterprise_number}")
            raise HTTPException(status_code=401, detail="Unauthorized webhook")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
        event_type = body.get('event')
        logger.info(f"üéØ Processing Bitrix24 event: {event_type}")
        
        if event_type == 'OnExternalCallStart':
            result = await handle_external_call_start(enterprise_number, body)
        elif event_type == 'OnExternalCallBackStart':
            result = await handle_callback_start(enterprise_number, body)
        else:
            logger.warning(f"‚ö†Ô∏è Unknown Bitrix24 event type: {event_type}")
            result = {"status": "unknown_event", "event_type": event_type}
        
        return {"status": "success", "result": result}
        
    except Exception as e:
        logger.error(f"üí• Error processing Bitrix24 webhook: {e}")
        raise HTTPException(status_code=500, detail=f"Webhook processing failed: {str(e)}")

async def find_enterprise_by_webhook_uuid(webhook_uuid: str) -> Optional[str]:
    """–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø–æ UUID –≤–µ–±—Ö—É–∫–∞"""
    try:
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            # –ò—â–µ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –≥–¥–µ –≤ integrations_config.bitrix24.webhook_uuid = webhook_uuid
            row = await conn.fetchrow("""
                SELECT number FROM enterprises 
                WHERE integrations_config->'bitrix24'->>'webhook_uuid' = $1
            """, webhook_uuid)
            
            if row:
                return row['number']
            else:
                return None
                
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø–æ UUID {webhook_uuid}: {e}")
        return None

async def get_bitrix24_config(enterprise_number: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24 —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∫–µ—à–∞"""
    
    current_time = time.time()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
    if enterprise_number in bitrix24_config_cache:
        cached_entry = bitrix24_config_cache[enterprise_number]
        if cached_entry["expires"] > current_time:
            logger.debug(f"üéØ Bitrix24 config from LOCAL cache for {enterprise_number}")
            return cached_entry["config"]
        else:
            del bitrix24_config_cache[enterprise_number]
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à (integration_cache.py)
    try:
        async with httpx.AsyncClient(timeout=3.0) as client:
            response = await client.get(f"http://127.0.0.1:8020/config/{enterprise_number}/bitrix24")
            if response.status_code == 200:
                data = response.json()
                b24_config = data.get("config", {})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                bitrix24_config_cache[enterprise_number] = {
                    "config": b24_config, 
                    "expires": current_time + BITRIX24_CONFIG_CACHE_TTL
                }
                
                logger.info(f"‚úÖ Bitrix24 config from CACHE service for {enterprise_number}: enabled={b24_config.get('enabled', False)}")
                return b24_config
            elif response.status_code == 404:
                logger.warning(f"‚ö†Ô∏è Bitrix24 integration not configured for {enterprise_number}")
                return None
            else:
                logger.warning(f"‚ö†Ô∏è Cache service error {response.status_code} for {enterprise_number}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Cache service unavailable for {enterprise_number}: {e}")
    
    # 3. Fallback –∫ –ë–î
    return await get_bitrix24_config_from_database(enterprise_number)

async def get_bitrix24_config_from_database(enterprise_number: str) -> Optional[Dict[str, Any]]:
    """Fallback –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î"""
    
    try:
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if row and row['integrations_config']:
                integrations = row['integrations_config']
                if isinstance(integrations, str):
                    integrations = json.loads(integrations)
                
                b24_config = integrations.get('bitrix24', {})
                logger.info(f"üìÅ Bitrix24 config from DATABASE for {enterprise_number}: enabled={b24_config.get('enabled', False)}")
                return b24_config
                
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"üí• Database error for {enterprise_number}: {e}")
    
    return {}

async def authenticate_bitrix24_webhook(config: Dict[str, Any], payload: Dict[str, Any], headers: Dict[str, str]) -> bool:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ webhook'–∞ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É
    expected_token = config.get('webhook_incoming_token')
    if not expected_token:
        logger.warning("‚ö†Ô∏è No webhook_incoming_token configured")
        return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ headers –∏–ª–∏ payload
    auth_token = headers.get('X-Auth-Token') or payload.get('auth_token')
    
    if auth_token == expected_token:
        logger.debug("‚úÖ Webhook authentication successful")
        return True
    else:
        logger.warning(f"‚ùå Webhook authentication failed: expected {expected_token}, got {auth_token}")
        return False

async def handle_external_call_start(enterprise_number: str, event_data: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è OnExternalCallStart (–∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∏–∑ CRM)"""
    
    user_id = event_data.get('USER_ID')
    phone_number = event_data.get('PHONE_NUMBER')
    crm_entity_type = event_data.get('CRM_ENTITY_TYPE')
    crm_entity_id = event_data.get('CRM_ENTITY_ID')
    call_id = event_data.get('CALL_ID')
    
    logger.info(f"üìû External call start: USER_ID={user_id}, PHONE={phone_number}, CRM={crm_entity_type}:{crm_entity_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    b24_config = await get_bitrix24_config(enterprise_number)
    user_mapping = b24_config.get('user_mapping', {})
    
    # –ù–∞—Ö–æ–¥–∏–º extension –ø–æ USER_ID
    extension = None
    for ext, uid in user_mapping.items():
        if str(uid) == str(user_id):
            extension = ext
            break
    
    if not extension:
        logger.warning(f"‚ö†Ô∏è No extension found for USER_ID {user_id}")
        return {"error": "Extension not found for user", "user_id": user_id}
    
    logger.info(f"üéØ Mapped USER_ID {user_id} ‚Üí extension {extension}")
    
    # TODO: –í—ã–∑–æ–≤ Asterisk API –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞
    # await call_asterisk_api(extension, phone_number, call_id)
    
    return {
        "status": "processed",
        "user_id": user_id,
        "extension": extension,
        "phone_number": phone_number,
        "call_id": call_id,
        "action": "initiate_call"
    }

async def handle_callback_start(enterprise_number: str, event_data: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è OnExternalCallBackStart (–æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫)"""
    
    logger.info(f"üîÑ Callback start: {event_data}")
    
    # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    
    return {
        "status": "processed",
        "event": "callback_start",
        "data": event_data
    }

@app.post("/internal/bitrix24/send-call-event")
async def send_call_event_to_bitrix24(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 webhook"""
    
    try:
        body = await request.json()
        enterprise_number = body.get('enterprise_number')
        event_data = body.get('event_data', {})
        
        if not enterprise_number:
            raise HTTPException(status_code=400, detail="enterprise_number required")
        
        logger.info(f"üì§ Sending call event to Bitrix24 for {enterprise_number}: {event_data}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        b24_config = await get_bitrix24_config(enterprise_number)
        if not b24_config or not b24_config.get('webhook_outgoing_url'):
            logger.warning(f"‚ö†Ô∏è No outgoing webhook URL for {enterprise_number}")
            return {"status": "no_webhook_url", "enterprise_number": enterprise_number}
        
        webhook_url = b24_config['webhook_outgoing_url']
        auth_token = b24_config.get('webhook_outgoing_token')
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload
        payload = {
            "timestamp": datetime.now().isoformat(),
            **event_data
        }
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ headers
        headers = {"Content-Type": "application/json"}
        if auth_token:
            headers["X-Auth-Token"] = auth_token
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ webhook'–∞
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(webhook_url, json=payload, headers=headers)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Successfully sent webhook to Bitrix24 for {enterprise_number}")
                return {
                    "status": "success",
                    "webhook_url": webhook_url,
                    "response_status": response.status_code
                }
            else:
                logger.error(f"‚ùå Failed to send webhook to Bitrix24: {response.status_code} {response.text}")
                return {
                    "status": "error",
                    "webhook_url": webhook_url,
                    "response_status": response.status_code,
                    "response_text": response.text
                }
                
    except Exception as e:
        logger.error(f"üí• Error sending webhook to Bitrix24: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to send webhook: {str(e)}")

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    
    return {
        "service": "bitrix24",
        "port": 8024,
        "config_cache_size": len(bitrix24_config_cache),
        "uptime": time.time(),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/24-admin/{enterprise_number}")
async def bitrix24_admin_page(enterprise_number: str):
    """–ê–¥–º–∏–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏ –∏–∑ –ë–î
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            row = await conn.fetchrow(
                "SELECT name, integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if not row:
                raise HTTPException(status_code=404, detail="–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            enterprise_name = row['name'] or f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {enterprise_number}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞
            integrations_config = row['integrations_config'] or {}
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            bitrix24_config = integrations_config.get('bitrix24', {})
            
            # –ï—Å–ª–∏ UUID –µ—â–µ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            webhook_uuid = bitrix24_config.get('webhook_uuid')
            if not webhook_uuid:
                webhook_uuid = str(uuid.uuid4())
                
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
            incoming_webhook = bitrix24_config.get('incoming_webhook', '')
            webhook_token = bitrix24_config.get('webhook_token', '')
            enabled = bitrix24_config.get('enabled', False)
            
        finally:
            await conn.close()
        
        
        # HTML —à–∞–±–ª–æ–Ω –∞–¥–º–∏–Ω–∫–∏
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{enterprise_name} Bitrix24</title>
    <link rel="icon" href="/24-admin/favicon.ico">
    <style>
        body {{ 
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; 
            margin: 0; 
            padding: 0; 
            background: #0b1728; 
            color: #e7eef8; 
        }}
        .wrap {{ 
            max-width: 820px; 
            margin: 0 auto; 
            padding: 28px; 
        }}
        h1 {{ 
            font-size: 24px; 
            margin: 0 0 18px; 
        }}
        .header {{ 
            display: flex; 
            align-items: center; 
            margin-bottom: 20px; 
        }}
        .header h1 {{ 
            margin: 0; 
            margin-right: 15px; 
        }}
        .logo {{ 
            height: 48px; 
            width: auto; 
            max-width: 200px;
        }}
        .card {{ 
            background: #0f2233; 
            border: 1px solid #1b3350; 
            border-radius: 12px; 
            padding: 22px; 
        }}
        h3 {{
            color: #e7eef8;
            margin: 0 0 20px 0;
            font-size: 20px;
        }}
        .form-group {{
            margin-bottom: 20px;
        }}
        label {{
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #e7eef8;
        }}
        .form-control {{
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #1b3350;
            border-radius: 6px;
            background: #0b1728;
            color: #e7eef8;
            font-size: 14px;
            box-sizing: border-box;
        }}
        .form-control:focus {{
            outline: none;
            border-color: #00b4db;
            box-shadow: 0 0 0 2px rgba(0, 180, 219, 0.2);
        }}
        .form-control[readonly] {{
            background: #162332;
            color: #a8b3c7;
        }}
        .input-group {{
            display: flex;
            gap: 8px;
            align-items: stretch;
        }}
        .input-group .form-control {{
            flex: 1;
        }}
        .btn {{
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }}
        .btn-primary {{
            background: #00b4db;
            color: white;
        }}
        .btn-primary:hover {{
            background: #0083b0;
        }}
        .btn-secondary {{
            background: #1b3350;
            color: #e7eef8;
            white-space: nowrap;
        }}
        .btn-secondary:hover {{
            background: #2a4a6b;
        }}
        .form-text {{
            display: block;
            margin-top: 5px;
            font-size: 12px;
            color: #a8b3c7;
        }}
        .form-actions {{
            margin-top: 30px;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="wrap">
        <div class="header">
            <h1>{enterprise_name} Bitrix24</h1>
            <img src="/24-admin/logo.png" alt="Bitrix24" class="logo">
        </div>
        <div class="card">
            <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bitrix24</h3>
            
            <form id="bitrix24-config-form">
                <div class="form-group">
                    <label for="incoming-webhook">–í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫</label>
                    <input type="url" id="incoming-webhook" name="incoming_webhook" 
                           value="{incoming_webhook}"
                           placeholder="https://your-portal.bitrix24.ru/rest/1/your_token/" 
                           class="form-control">
                    <small class="form-text">URL –≤–µ–±—Ö—É–∫–∞ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö</small>
                </div>


                <div class="form-group">
                    <label for="outgoing-webhook">–ò—Å—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫</label>
                    <div class="input-group">
                        <input type="text" id="outgoing-webhook" name="outgoing_webhook" 
                               value="https://bot.vochi.by/api/bitrix24-crm/{webhook_uuid}" 
                               class="form-control" readonly>
                        <button type="button" class="btn btn-secondary" onclick="copyToClipboard('outgoing-webhook')">
                            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                    </div>
                    <small class="form-text">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24</small>
                </div>

                <div class="form-group">
                    <label for="webhook-token">–¢–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24</label>
                    <input type="text" id="webhook-token" name="webhook_token" 
                           value="{webhook_token}"
                           placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ application_token –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24" 
                           class="form-control">
                    <small class="form-text">–¢–æ–∫–µ–Ω application_token, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ë–∏—Ç—Ä–∏–∫—Å24 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞</small>
                </div>

                <div class="form-group">
                    <label>
                        <input type="checkbox" id="enabled" name="enabled" style="margin-right: 8px; width: 18px; height: 18px; accent-color: #00b4db;" {"checked" if enabled else ""}>
                        –ê–∫—Ç–∏–≤–µ–Ω?
                    </label>
                </div>

                <div class="form-actions" style="display: flex; align-items: center; gap: 16px;">
                    <button type="button" id="saveBtn" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button type="button" id="refreshBtn" class="btn" style="background: #059669;">–û–±–Ω–æ–≤–∏—Ç—å</button>
                    <button type="button" id="deleteBtn" class="btn" style="background: #dc2626; margin-left: auto;">–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é</button>
                    <span id="msg" class="form-text"></span>
                </div>
            </form>
        </div>
        
        <!-- –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix24 -->
        <div class="card" id="usersCard" style="display: none; margin-top: 20px;">
            <h3 style="margin: 0 0 20px 0;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
            <div id="usersList"></div>
            <div id="usersLoading" style="display: none; color: #a8b3c7; font-style: italic;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>
        </div>
        
    </div>
    
    <script src="/24-admin/app.js?v=202509121100"></script>
</body>
</html>
        """
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∫–∏ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/24-admin/{enterprise_number}/save")
async def save_bitrix24_config(enterprise_number: str, request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        form_data = await request.form()
        incoming_webhook = form_data.get('incoming_webhook', '').strip()
        webhook_token = form_data.get('webhook_token', '').strip()
        enabled = form_data.get('enabled') == 'on'
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è {enterprise_number}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if not row:
                raise HTTPException(status_code=404, detail="–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            integrations_config = row['integrations_config'] or {}
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            bitrix24_config = integrations_config.get('bitrix24', {})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if not bitrix24_config.get('webhook_uuid'):
                bitrix24_config['webhook_uuid'] = str(uuid.uuid4())
                logger.info(f"üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π UUID –¥–ª—è {enterprise_number}: {bitrix24_config['webhook_uuid']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            bitrix24_config['incoming_webhook'] = incoming_webhook
            bitrix24_config['webhook_token'] = webhook_token
            bitrix24_config['enabled'] = enabled
            bitrix24_config['updated_at'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            integrations_config['bitrix24'] = bitrix24_config
            
            await conn.execute(
                "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
                json.dumps(integrations_config), enterprise_number
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            if enterprise_number in bitrix24_config_cache:
                del bitrix24_config_cache[enterprise_number]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
            try:
                async with httpx.AsyncClient(timeout=5.0) as client:
                    response = await client.put(
                        f"http://127.0.0.1:8020/config/{enterprise_number}/bitrix24",
                        json=bitrix24_config
                    )
                    if response.status_code == 200:
                        logger.info(f"üîÑ Bitrix24 config sent to global cache for {enterprise_number}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to update global cache: {response.status_code}")
            except Exception as e:
                logger.error(f"‚ùå Error updating global cache for {enterprise_number}: {e}")
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–∏—Ç—Ä–∏–∫—Å24 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {enterprise_number}")
            
            return {"success": True, "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

@app.post("/24-admin/{enterprise_number}/delete")
async def delete_bitrix24_config(enterprise_number: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24"""
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è {enterprise_number}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if not row:
                raise HTTPException(status_code=404, detail="–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –£–¥–∞–ª—è–µ–º bitrix24 —Å–µ–∫—Ü–∏—é
            integrations_config = row['integrations_config'] or {}
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é bitrix24
            if 'bitrix24' in integrations_config:
                del integrations_config['bitrix24']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await conn.execute(
                "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
                json.dumps(integrations_config), enterprise_number
            )
            
            return {"success": True, "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"}
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"}

@app.post("/24-admin/api/refresh-managers/{enterprise_number}")
async def refresh_bitrix24_managers(enterprise_number: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24"""
    try:
        logger.info(f"üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è {enterprise_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if not row:
                return {"success": False, "error": "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
            
            integrations_config = row['integrations_config'] or {}
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            
            bitrix24_config = integrations_config.get('bitrix24', {})
            incoming_webhook = bitrix24_config.get('incoming_webhook')
            
            if not incoming_webhook:
                return {"success": False, "error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤—Ö–æ–¥—è—â–∏–π webhook"}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
            import httpx
            async with httpx.AsyncClient() as client:
                response = await client.post(f"{incoming_webhook}user.get", json={
                    "filter": {"ACTIVE": "Y"},
                    "select": ["ID", "NAME", "LAST_NAME", "EMAIL", "UF_PHONE_INNER"]
                })
                
                if response.status_code == 200:
                    data = response.json()
                    users = []
                    
                    if data.get('result'):
                        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                        user_extensions = bitrix24_config.get('user_extensions', {})
                        
                        for user_data in data['result']:
                            users.append({
                                "id": user_data.get('ID'),
                                "name": f"{user_data.get('NAME', '')} {user_data.get('LAST_NAME', '')}".strip(),
                                "email": user_data.get('EMAIL', ''),
                                "current_extension": user_extensions.get(user_data.get('ID')),
                                "bitrix_extension": user_data.get('UF_PHONE_INNER')
                            })
                    
                    return {"success": True, "users": users}
                else:
                    return {"success": False, "error": f"–û—à–∏–±–∫–∞ API –ë–∏—Ç—Ä–∏–∫—Å24: {response.status_code}"}
        
        finally:
            await conn.close()
    
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞: {str(e)}"}

@app.get("/24-admin/api/internal-phones/{enterprise_number}")
async def get_internal_phones(enterprise_number: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
    try:
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_internal_phones
            rows = await conn.fetch("""
                SELECT 
                    uip.extension,
                    u.enterprise_number,
                    u.bitrix24_user_id,
                    CASE 
                        WHEN u.bitrix24_user_id IS NOT NULL THEN u.bitrix24_user_id::text
                        ELSE NULL 
                    END as assigned_user_id
                FROM user_internal_phones uip
                LEFT JOIN users u ON u.internal_phone = uip.extension 
                    AND u.enterprise_number = $1 
                    AND u.bitrix24_user_id IS NOT NULL
                WHERE uip.enterprise_number = $1
                ORDER BY uip.extension::int
            """, enterprise_number)
            
            phones = []
            for row in rows:
                phones.append({
                    "extension": row['extension'],
                    "assigned_user_id": row['assigned_user_id']
                })
            
            return phones
        
        finally:
            await conn.close()
    
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: {e}")
        return []

@app.post("/24-admin/api/save-extensions/{enterprise_number}")
async def save_bitrix24_extensions(enterprise_number: str, request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ë–∏—Ç—Ä–∏–∫—Å24"""
    try:
        assignments = await request.json()
        logger.info(f"üìû –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {enterprise_number}: {assignments}")
        
        conn = await asyncpg.connect(
            host="localhost", port=5432, user="postgres", 
            password="r/Yskqh/ZbZuvjb2b3ahfg==", database="postgres"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–∏—Ç—Ä–∏–∫—Å24
            row = await conn.fetchrow(
                "SELECT integrations_config FROM enterprises WHERE number = $1", 
                enterprise_number
            )
            
            if not row:
                return {"success": False, "error": "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
            
            integrations_config = row['integrations_config'] or {}
            if isinstance(integrations_config, str):
                integrations_config = json.loads(integrations_config)
            
            bitrix24_config = integrations_config.get('bitrix24', {})
            incoming_webhook = bitrix24_config.get('incoming_webhook')
            
            if not incoming_webhook:
                return {"success": False, "error": "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤—Ö–æ–¥—è—â–∏–π webhook"}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            bitrix24_config['user_extensions'] = assignments
            integrations_config['bitrix24'] = bitrix24_config
            
            await conn.execute(
                "UPDATE enterprises SET integrations_config = $1 WHERE number = $2",
                json.dumps(integrations_config), enterprise_number
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
            await conn.execute(
                "UPDATE users SET internal_phone = NULL, bitrix24_user_id = NULL WHERE enterprise_number = $1 AND bitrix24_user_id IS NOT NULL",
                enterprise_number
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            for user_id, extension in assignments.items():
                await conn.execute("""
                    INSERT INTO users (enterprise_number, bitrix24_user_id, internal_phone, created_at)
                    VALUES ($1, $2, $3, NOW())
                    ON CONFLICT (enterprise_number, bitrix24_user_id) 
                    DO UPDATE SET internal_phone = $3, updated_at = NOW()
                """, enterprise_number, int(user_id), extension)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UF_PHONE_INNER –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            import httpx
            async with httpx.AsyncClient() as client:
                for user_id, extension in assignments.items():
                    try:
                        response = await client.post(f"{incoming_webhook}user.update", json={
                            "ID": user_id,
                            "UF_PHONE_INNER": extension
                        })
                        
                        if response.status_code != 200:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å UF_PHONE_INNER –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            return {"success": True, "message": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
        
        finally:
            await conn.close()
    
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞: {str(e)}"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8024, log_level="info")
