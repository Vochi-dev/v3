#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EventCache —Å bridge.py

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
"""

import json
import asyncio
from datetime import datetime
from app.services.calls.event_cache import EventCache
from app.services.calls.event_filter import Event


class CachedWebhookHandler:
    """
    –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    """
    
    def __init__(self):
        self.event_cache = EventCache()
    
    async def handle_ami_event(self, ami_data: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ AMI —Å–æ–±—ã—Ç–∏–µ
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º AMI –¥–∞–Ω–Ω—ã–µ –≤ Event –æ–±—ä–µ–∫—Ç
        event = Event(
            event=ami_data.get('Event', '').lower(),
            uniqueid=ami_data.get('Uniqueid', ''),
            timestamp=datetime.now(),
            data=ami_data
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã)
        self.event_cache.add_event(event)
        
        print(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event.event} –¥–ª—è –∑–≤–æ–Ω–∫–∞ {event.uniqueid}")
    
    async def send_to_bitrix24(self, call_id: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ Bitrix24
        """
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫—ç—à–∞
        events = self.event_cache.get_filtered_events(call_id, 'bitrix24')
        metadata = self.event_cache.get_call_metadata(call_id)
        
        if not events:
            return
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Bitrix24 –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}:")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {metadata.get('complexity', 'UNKNOWN')}")
        print(f"   –°–æ–±—ã—Ç–∏—è: {len(events)}")
        
        for event in events:
            # –¢—É—Ç –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Bitrix24
            print(f"   ‚Üí {event['event']} ({event['uniqueid']})")
    
    async def send_to_telegram(self, call_id: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        """
        events = self.event_cache.get_filtered_events(call_id, 'telegram')
        metadata = self.event_cache.get_call_metadata(call_id)
        
        if not events:
            return
        
        print(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}:")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {metadata.get('complexity', 'UNKNOWN')}")
        print(f"   –°–æ–±—ã—Ç–∏—è: {len(events)}")
        
        # Telegram –æ–±—ã—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ start/hangup
        for event in events:
            print(f"   ‚Üí {event['event']} ({event['uniqueid']})")


async def demo_cached_filtering():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = CachedWebhookHandler()
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —Å FollowMe –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π
    call_id = "1757843259.138"
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2-23)
    ami_events = [
        {
            'Event': 'Start',
            'Uniqueid': call_id,
            'CallType': 0,
            'Phone': '375447034448',
            'Trunk': '0001363'
        },
        {
            'Event': 'Dial', 
            'Uniqueid': call_id,
            'Extensions': ['150', '151', '152']
        },
        {
            'Event': 'Bridge',
            'Uniqueid': call_id,
            'CallerIDNum': '375447034448',
            'ConnectedLineNum': '151',
            'BridgeUniqueid': 'main-bridge-123'
        },
        # FollowMe –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è (–±—É–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞)
        {
            'Event': 'Start',
            'Uniqueid': '1757843283.147',  # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
            'CallType': 1,  # –ò—Å—Ö–æ–¥—è—â–∏–π
            'Phone': '375296254070'
        },
        {
            'Event': 'Hangup',
            'Uniqueid': '1757843283.147',  # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
            'CallStatus': '2'
        },
        # –§–∏–Ω–∞–ª—å–Ω—ã–π hangup –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        {
            'Event': 'Hangup',
            'Uniqueid': call_id,
            'CallStatus': '2',
            'Phone': '375447034448'
        }
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    print("\nüì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö AMI —Å–æ–±—ã—Ç–∏–π:")
    for ami_event in ami_events:
        await handler.handle_ami_event(ami_event)
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    
    print("\n" + "=" * 60)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    await handler.send_to_bitrix24(call_id)
    print()
    await handler.send_to_telegram(call_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    print("\n" + "=" * 60)
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    stats = handler.event_cache.get_cache_stats()
    for key, value in stats.items():
        print(f"   {key}: {value}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(demo_cached_filtering())
