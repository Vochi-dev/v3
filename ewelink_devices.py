#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ eWeLink
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç access token –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import json
import time
import requests
import hmac
import hashlib
import base64
import os
import random
import string
from datetime import datetime, timedelta

class EWeLinkDevices:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ eWeLink"""
    
    def __init__(self):
        self.app_id = 'yjbs7ZRaIgNiqJ9uINiXjKcX01czdTdB'
        self.app_secret = 'tSK3T1tlnb2iNDGx31hhpyIeP34HFdQI'
        self.token_file = 'ewelink_token.json'
        self.devices_file = 'ewelink_devices.json'
        self.access_token = None
        self.refresh_token = None
        self.region = 'eu'
        
    def save_tokens(self, access_token, refresh_token, expires_in=7200):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª"""
        token_data = {
            'access_token': access_token,
            'refresh_token': refresh_token,
            'expires_at': (datetime.now() + timedelta(seconds=expires_in)).isoformat(),
            'region': self.region
        }
        
        with open(self.token_file, 'w') as f:
            json.dump(token_data, f, indent=2)
            
        print(f"üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.token_file}")
        
    def load_tokens(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.token_file):
            return False
            
        try:
            with open(self.token_file, 'r') as f:
                token_data = json.load(f)
                
            expires_at = datetime.fromisoformat(token_data['expires_at'])
            
            if datetime.now() < expires_at:
                self.access_token = token_data['access_token']
                self.refresh_token = token_data['refresh_token']
                self.region = token_data.get('region', 'eu')
                print(f"‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {self.token_file}")
                print(f"‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –¥–æ: {expires_at}")
                return True
            else:
                print("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –∏—Å—Ç–µ–∫–ª–∏, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return False
    
    def calculate_signature(self, data_string):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è eWeLink API"""
        signature = base64.b64encode(
            hmac.new(
                self.app_secret.encode(),
                data_string.encode(),
                digestmod=hashlib.sha256
            ).digest()
        ).decode()
        return f"Sign {signature}"
    
    def generate_oauth_url(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç OAuth2 URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        nonce = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
        state = ''.join(random.choices(string.ascii_letters + string.digits, k=6)) 
        seq = str(int(time.time() * 1000))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è OAuth2 URL
        message = f"{self.app_id}_{seq}"
        signature = base64.b64encode(
            hmac.new(
                self.app_secret.encode(),
                message.encode(),
                digestmod=hashlib.sha256
            ).digest()
        ).decode()
        
        # –°–æ–∑–¥–∞–µ–º OAuth2 URL
        oauth_url = (
            f"https://c2ccdn.coolkit.cc/oauth/index.html"
            f"?clientId={self.app_id}"
            f"&seq={seq}"
            f"&authorization={signature}"
            f"&redirectUrl=https://httpbin.org/get"
            f"&grantType=authorization_code"
            f"&state={state}"
            f"&nonce={nonce}"
            f"&showQRCode=false"
        )
        
        print("üîó –ù–æ–≤–∞—è OAuth2 —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print(oauth_url)
        print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   State: {state}")
        print(f"   Nonce: {nonce}")
        print(f"   Seq: {seq}")
        print(f"\n‚è∞ –ö–æ–¥ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        print("üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
        
        return oauth_url
    
    def exchange_oauth_code(self, code, region='eu'):
        """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç OAuth2 –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã"""
        self.region = region
        token_url = f"https://{region}-apia.coolkit.cc/v2/user/oauth/token"
        
        data = {
            'code': code,
            'redirectUrl': 'https://httpbin.org/get',
            'grantType': 'authorization_code'
        }
        
        data_json = json.dumps(data, separators=(',', ':'))
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'eWeLink/4.9.2',
            'X-CK-Appid': self.app_id,
            'X-CK-Nonce': str(int(time.time() * 1000000))[:8],
            'X-CK-Timestamp': str(int(time.time())),
            'Authorization': self.calculate_signature(data_json)
        }
        
        try:
            response = requests.post(token_url, data=data_json, headers=headers, timeout=30)
            print(f"üîÑ –û–±–º–µ–Ω OAuth2 –∫–æ–¥–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                if result.get('error') == 0:
                    data = result.get('data', {})
                    access_token = data.get('accessToken')
                    refresh_token = data.get('refreshToken')
                    expires_in = data.get('atExpiredTime', 7200)
                    
                    print(f"üîç Debug: API –æ—Ç–≤–µ—Ç - {result}")
                    print(f"üîç Debug: expires_in = {expires_in}")
                    
                    if access_token:
                        self.access_token = access_token
                        self.refresh_token = refresh_token
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                        try:
                            # atExpiredTime –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                            if expires_in > 100000000000:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 100 –º–ª—Ä–¥, —Ç–æ —ç—Ç–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                                expires_in = expires_in // 1000
                            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç
                            if expires_in > 86400 * 365:  # –ë–æ–ª—å—à–µ –≥–æ–¥–∞
                                expires_in = 7200  # 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        except:
                            expires_in = 7200
                            
                        self.save_tokens(access_token, refresh_token, expires_in)
                        print("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        return True
                        
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: {response.text}")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def get_devices(self, save_to_file=True):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.access_token:
            print("‚ùå –ù–µ—Ç access token. –ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return None
            
        device_url = f"https://{self.region}-apia.coolkit.cc/v2/device/thing"
        
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json',
            'User-Agent': 'eWeLink/4.9.2',
            'X-CK-Appid': self.app_id
        }
        
        try:
            print(f"üì± –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ {self.region}...")
            response = requests.get(device_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('error') == 0:
                    devices = result.get('data', {}).get('thingList', [])
                    
                    if save_to_file:
                        with open(self.devices_file, 'w', encoding='utf-8') as f:
                            json.dump(devices, f, ensure_ascii=False, indent=2)
                        print(f"üíæ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.devices_file}")
                    
                    self.print_device_summary(devices)
                    return devices
                else:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {result}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            
        return None
    
    def print_device_summary(self, devices):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not devices:
            print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        online_count = 0
        offline_count = 0
        
        print(f"\nüéâ –ù–ê–ô–î–ï–ù–û –£–°–¢–†–û–ô–°–¢–í: {len(devices)}")
        print("="*60)
        
        for i, device_item in enumerate(devices, 1):
            item_data = device_item.get('itemData', {})
            name = item_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            device_id = item_data.get('deviceid', 'Unknown')
            online = item_data.get('online', False)
            brand = item_data.get('brandName', 'Unknown')
            
            if online:
                online_count += 1
            else:
                offline_count += 1
            
            status = "üü¢ –û–Ω–ª–∞–π–Ω" if online else "üî¥ –û—Ñ–ª–∞–π–Ω"
            print(f"{i:2d}. {name:<20} ({brand}) - {status}")
        
        print("="*60)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üü¢ {online_count} –æ–Ω–ª–∞–π–Ω, üî¥ {offline_count} –æ—Ñ–ª–∞–π–Ω")
    
    def load_saved_devices(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.devices_file):
            try:
                with open(self.devices_file, 'r', encoding='utf-8') as f:
                    devices = json.load(f)
                print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ {self.devices_file}")
                self.print_device_summary(devices)
                return devices
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª {self.devices_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return None
    
    def get_device_status(self, device_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if not self.access_token:
            print("‚ùå –ù–µ—Ç access token. –ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return None
            
        status_url = f"https://{self.region}-apia.coolkit.cc/v2/device/thing"
        
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json',
            'User-Agent': 'eWeLink/4.9.2',
            'X-CK-Appid': self.app_id
        }
        
        try:
            print(f"üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}...")
            response = requests.get(status_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('error') == 0:
                    devices = result.get('data', {}).get('thingList', [])
                    
                    # –ò—â–µ–º –Ω—É–∂–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ device_id
                    for device_item in devices:
                        item_data = device_item.get('itemData', {})
                        if item_data.get('deviceid') == device_id:
                            return item_data
                    
                    print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    return None
                else:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {result}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
        return None
    
    def toggle_device(self, device_id, state):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        if not self.access_token:
            print("‚ùå –ù–µ—Ç access token. –ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return False
            
        control_url = f"https://{self.region}-apia.coolkit.cc/v2/device/thing/status"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        data = {
            'type': 1,
            'id': device_id,
            'params': {
                'switch': 'on' if state else 'off'
            }
        }
        
        data_json = json.dumps(data, separators=(',', ':'))
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'eWeLink/4.9.2',
            'X-CK-Appid': self.app_id,
            'Authorization': f'Bearer {self.access_token}'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∏
        }
        
        try:
            action = "–≤–∫–ª—é—á–∞–µ–º" if state else "–≤—ã–∫–ª—é—á–∞–µ–º"
            print(f"üîÑ {action.capitalize()} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id}...")
            
            response = requests.post(control_url, data=data_json, headers=headers, timeout=30)
            print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                if result.get('error') == 0:
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ {action}!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {result}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {e}")
            
        return False
    
    def test_june(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º June"""
        june_device_id = "10013a83f3"
        
        print("üß™ –¢–ï–°–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–¢–†–û–ô–°–¢–í–û–ú JUNE")
        print("="*50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
        device_info = self.get_device_status(june_device_id)
        
        if not device_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return False
            
        current_state = device_info.get('params', {}).get('switch', 'unknown')
        device_name = device_info.get('name', 'June')
        online = device_info.get('online', False)
        
        print(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
        print(f"üîå –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_state}")
        print(f"üåê –û–Ω–ª–∞–π–Ω: {'‚úÖ' if online else '‚ùå'}")
        
        if not online:
            print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ñ–ª–∞–π–Ω, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")
            return False
            
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        new_state = current_state != 'on'
        action = "–≤–∫–ª—é—á–µ–Ω–∏–µ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–∏–µ"
        
        print(f"\n2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º {action}...")
        if self.toggle_device(june_device_id, new_state):
            
            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\n3Ô∏è‚É£ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            time.sleep(2)
            
            updated_info = self.get_device_status(june_device_id)
            if updated_info:
                new_status = updated_info.get('params', {}).get('switch', 'unknown')
                expected = 'on' if new_state else 'off'
                
                if new_status == expected:
                    print(f"‚úÖ –£–°–ü–ï–•! –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {current_state} ‚Üí {new_status}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    print(f"\n4Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ({current_state})...")
                    if self.toggle_device(june_device_id, current_state == 'on'):
                        print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                        return True
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                        return False
                else:
                    print(f"‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: –æ–∂–∏–¥–∞–ª–∏ {expected}, –ø–æ–ª—É—á–∏–ª–∏ {new_status}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = EWeLinkDevices()
    
    print("üè† eWeLink Device Manager")
    print("="*40)
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
    if client.load_tokens():
        # –¢–æ–∫–µ–Ω—ã –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        devices = client.get_devices()
        if devices:
            print("\n‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º!")
            return devices
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫.")
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    print("\nüîë –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π OAuth2 –∫–æ–¥")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 ewelink_devices.py YOUR_OAUTH_CODE")
    print("\n–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    return client.load_saved_devices()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        
        if arg == "test-june":
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º June
            client = EWeLinkDevices()
            
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º...")
            if client.load_tokens():
                client.test_june()
            else:
                print("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤!")
                print("üí° –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π OAuth2 –∫–æ–¥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
                print("   python3 ewelink_devices.py YOUR_OAUTH_CODE")
                print("üîó –ò–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
                print("   python3 ewelink_devices.py generate-oauth-url")
                
        elif arg == "generate-oauth-url":
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OAuth2 URL
            client = EWeLinkDevices()
            client.generate_oauth_url()
            
        elif arg.startswith(("test-device:", "toggle:")):
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            # –§–æ—Ä–º–∞—Ç: test-device:DEVICE_ID –∏–ª–∏ toggle:DEVICE_ID:on/off
            client = EWeLinkDevices()
            
            if client.load_tokens():
                if arg.startswith("test-device:"):
                    device_id = arg.split(":", 1)[1]
                    print(f"üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}...")
                    status = client.get_device_status(device_id)
                    if status:
                        switch_state = status.get('params', {}).get('switch', 'unknown')
                        print(f"üîå –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {switch_state}")
                    
                elif arg.startswith("toggle:"):
                    parts = arg.split(":")
                    if len(parts) == 3:
                        device_id = parts[1] 
                        state = parts[2].lower() == 'on'
                        client.toggle_device(device_id, state)
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: toggle:DEVICE_ID:on/off")
            else:
                print("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤!")
                
        else:
            # OAuth2 –∫–æ–¥
            code = arg
            client = EWeLinkDevices()
            
            print(f"üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º OAuth2 –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã...")
            if client.exchange_oauth_code(code):
                devices = client.get_devices()
                if devices:
                    print("\nüéâ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã!")
                    print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏:")
                    print("   python3 ewelink_devices.py test-june")
                    print("   python3 ewelink_devices.py toggle:DEVICE_ID:on")
                    print("   python3 ewelink_devices.py toggle:DEVICE_ID:off")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã")
    else:
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        result = main()
        if result:
            print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("üß™ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è June:    python3 ewelink_devices.py test-june")
            print("üìä –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:      python3 ewelink_devices.py test-device:DEVICE_ID")
            print("üîÑ –í–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:    python3 ewelink_devices.py toggle:DEVICE_ID:on")
            print("üîÑ –í—ã–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:   python3 ewelink_devices.py toggle:DEVICE_ID:off")
            print("üîó –ù–æ–≤–∞—è OAuth2 —Å—Å—ã–ª–∫–∞:    python3 ewelink_devices.py generate-oauth-url") 