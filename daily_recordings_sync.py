#!/usr/bin/env python3
"""
–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–ü–ò–°–ï–ô (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê)
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00 GMT+3 (18:00 UTC)

–ê–õ–ì–û–†–ò–¢–ú:
–®–∞–≥ ‚Ññ1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö–æ—Å—Ç—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è  
–®–∞–≥ ‚Ññ2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ
–®–∞–≥ ‚Ññ3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î - –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å —Ö–æ—Å—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ S3
–®–∞–≥ ‚Ññ4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
–®–∞–≥ ‚Ññ5: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ S3 —Å UUID –∏–∑ –ë–î

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –≥–¥–µ parameter_option_3 = true
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ name2 –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ S3: CallRecords/{name2}/–≥–æ–¥/–º–µ—Å—è—Ü/
"""

import asyncio
import os
import sys
import time
import tempfile
import shutil
from datetime import datetime
from typing import List, Dict, Tuple, Optional
import logging
import subprocess
import uuid
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('app')

from hetzner_s3_integration import HetznerS3Client
from s3_config import S3_CONFIG
from app.services.postgres import init_pool, update_call_recording_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = f'/tmp/daily_recordings_sync_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk —Å–µ—Ä–≤–µ—Ä–∞–º
ASTERISK_PORT = "5059"
ASTERISK_USER = "root"
ASTERISK_PASSWORD = "5atx9Ate@pbx"
TEMP_BASE_DIR = "/tmp/daily_recordings_sync"

# üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
ENABLE_PARALLEL_DOWNLOAD = True  # ‚úÖ –í–ö–õ–Æ–ß–ï–ù–û: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ rsync
MAX_PARALLEL_THREADS = 4         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4)

# üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π 
MAX_PARALLEL_ENTERPRISES = 10    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

class DailyRecordingsSync:
    def __init__(self):
        self.s3_client = None
        self.enterprises = []
        self.total_found_on_servers = 0    # –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö
        self.total_needed_from_db = 0      # –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏–∑ –ë–î  
        self.total_downloaded = 0          # –†–µ–∞–ª—å–Ω–æ —Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤
        self.total_success = 0             # –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ S3
        self.total_errors = 0              # –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ S3
        self.total_skipped = 0             # –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
        
    def print_banner(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        banner = f"""
{'='*80}
üöÄ –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–ü–ò–°–ï–ô (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê)
{'='*80}
üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚öôÔ∏è  –í–µ—Ä—Å–∏—è: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ (—Å–Ω–∞—á–∞–ª–∞ —Ö–æ—Å—Ç, –ø–æ—Ç–æ–º –ë–î)
üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –≥–¥–µ parameter_option_3 = true

üîÑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú:
   1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö–æ—Å—Ç—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
   2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ  
   3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î - –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ S3
   4Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
   5Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ S3 —Å UUID –∏–∑ –ë–î

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ S3: CallRecords/{{name2}}/–≥–æ–¥/–º–µ—Å—è—Ü/
üîó –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏: /recordings/file/{{uuid_token}}
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ s3_object_key –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π

üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:
   ‚ö° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {MAX_PARALLEL_ENTERPRISES}
   üîÑ –ü–æ—Ç–æ–∫–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {MAX_PARALLEL_THREADS}
   üíæ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ S3: 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: 60 —Å–µ–∫

üìä –õ–æ–≥ —Ñ–∞–π–ª: {log_filename}
{'='*80}
"""
        print(banner)
        logger.info("üöÄ –°–¢–ê–†–¢ –ï–ñ–ï–î–ù–ï–í–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò –° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô")
    
    async def get_enterprises_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —Å parameter_option_3 = true"""
        try:
            import asyncpg
            conn = await asyncpg.connect(
                host="localhost",
                port=5432,
                user="postgres", 
                password="r/Yskqh/ZbZuvjb2b3ahfg==",
                database="postgres"
            )
            
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —Å parameter_option_3 = true...")
            
            rows = await conn.fetch("""
                SELECT id, number, name, name2, ip, host, parameter_option_3 
                FROM enterprises 
                WHERE parameter_option_3 = true 
                  AND active = true
                ORDER BY number
            """)
            
            enterprises = []
            for row in rows:
                enterprise = {
                    'id': row['id'],
                    'number': row['number'],
                    'name': row['name'],
                    'name2': row['name2'],
                    'ip': row['ip'],
                    'host': row['host']
                }
                enterprises.append(enterprise)
                logger.info(f"‚úÖ {enterprise['number']} ({enterprise['name']}) ‚Üí name2: {enterprise['name2']} ‚Üí IP: {enterprise['ip']}")
            
            await conn.close()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(enterprises)}")
            return enterprises
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π: {e}")
            return []
    
    def check_server_connection(self, enterprise: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Asterisk"""
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {enterprise['name']} ({enterprise['ip']}:{ASTERISK_PORT})...")
            
            cmd = [
                'sshpass', '-p', ASTERISK_PASSWORD,
                'ssh', '-o', 'ConnectTimeout=10', '-o', 'StrictHostKeyChecking=no',
                '-p', ASTERISK_PORT, f'{ASTERISK_USER}@{enterprise["ip"]}',
                'echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {enterprise['name']} —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É {enterprise['name']}: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É {enterprise['name']}: {e}")
            return False
    
    async def get_host_files_list(self, enterprise: Dict) -> List[str]:
        """
        –®–∞–≥ ‚Ññ2: –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ .wav)
        """
        try:
            logger.info(f"üîç {enterprise['name']}: –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ...")
            
            cmd = [
                'sshpass', '-p', ASTERISK_PASSWORD,
                'ssh', '-p', ASTERISK_PORT, '-o', 'StrictHostKeyChecking=no',
                f'{ASTERISK_USER}@{enterprise["ip"]}',
                'find /var/spool/asterisk/monitor/ -name "*.wav" -size +2k -printf "%f\\n" 2>/dev/null'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                logger.error(f"‚ùå {enterprise['name']}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {result.stderr}")
                return []
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ —É–±–∏—Ä–∞–µ–º .wav —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è unique_id
            wav_files = [f.strip() for f in result.stdout.strip().split('\n') if f.strip().endswith('.wav')]
            unique_ids = [f.replace('.wav', '') for f in wav_files if f]
            
            logger.info(f"üìÅ {enterprise['name']}: –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ >2KB: {len(unique_ids)}")
            if unique_ids:
                logger.info(f"üìù {enterprise['name']}: –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤: {unique_ids[:3]}")
            
            return unique_ids
            
        except Exception as e:
            logger.error(f"‚ùå {enterprise['name']}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å —Ö–æ—Å—Ç–∞: {e}")
            return []

    async def check_files_in_database(self, enterprise: Dict, host_files: List[str]) -> List[str]:
        """
        –®–∞–≥ ‚Ññ3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ö–æ—Å—Ç–µ –µ—Å—Ç—å –≤ –ë–î –∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ S3
        host_files - —Å–ø–∏—Å–æ–∫ unique_id —Ñ–∞–π–ª–æ–≤ —Å —Ö–æ—Å—Ç–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ unique_id –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
        """
        try:
            if not host_files:
                return []
                
            import asyncpg
            conn = await asyncpg.connect(
                host="localhost",
                port=5432,
                user="postgres", 
                password="r/Yskqh/ZbZuvjb2b3ahfg==",
                database="postgres"
            )
            
            logger.info(f"üîç {enterprise['name']}: –ø—Ä–æ–≤–µ—Ä—è–µ–º {len(host_files)} —Ñ–∞–π–ª–æ–≤ –≤ –ë–î...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ unique_id –µ—Å—Ç—å –≤ –ë–î –∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ S3
            rows = await conn.fetch("""
                SELECT unique_id 
                FROM calls 
                WHERE enterprise_id = $1 
                  AND unique_id = ANY($2::text[])
                  AND call_url IS NOT NULL 
                  AND s3_object_key IS NULL
            """, enterprise['number'], host_files)
            
            files_to_download = [row['unique_id'] for row in rows]
            
            await conn.close()
            
            logger.info(f"üìä {enterprise['name']}: –≤ –ë–î –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {len(files_to_download)}/{len(host_files)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            not_in_db = len(host_files) - len(files_to_download)
            if not_in_db > 0:
                logger.info(f"‚ö†Ô∏è {enterprise['name']}: —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ö–æ—Å—Ç–µ –Ω–æ –Ω–µ –≤ –ë–î: {not_in_db}")
            
            return files_to_download
            
        except Exception as e:
            logger.error(f"‚ùå {enterprise['name']}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î: {e}")
            return []


    
    def download_recordings_parallel(self, enterprise: Dict, temp_dir: str, files_to_download: List[str]) -> bool:
        """üöÄ –ë–´–°–¢–†–û–ï –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        
        if not files_to_download:
            return True
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ .wav —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        needed_files = [f"{unique_id}.wav" for unique_id in files_to_download]
        total_files = len(needed_files)
        
        logger.info(f"üöÄ {enterprise['name']}: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {total_files} –°–£–©–ï–°–¢–í–£–Æ–©–ò–• —Ñ–∞–π–ª–æ–≤...")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        files_per_thread = max(1, total_files // MAX_PARALLEL_THREADS)
        file_groups = []
        
        for i in range(0, total_files, files_per_thread):
            group = needed_files[i:i + files_per_thread]
            file_groups.append(group)
        
        actual_threads = min(len(file_groups), MAX_PARALLEL_THREADS)
        logger.info(f"üöÄ {enterprise['name']}: –∑–∞–ø—É—Å–∫–∞–µ–º {actual_threads} –ø–æ—Ç–æ–∫–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        
        # 4. –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        def download_group(group_files: List[str], thread_id: int) -> Dict:
            group_size = len(group_files)
            
            thread_dir = os.path.join(temp_dir, f"thread_{thread_id}")
            os.makedirs(thread_dir, exist_ok=True)
            
            success_count = 0
            start_time = time.time()
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Ü–∏–∫–ª–µ
            for file_name in group_files:
                try:
                    cmd_rsync = [
                        'sshpass', '-p', ASTERISK_PASSWORD,
                        'rsync', '-avz', 
                        '-e', f'ssh -p {ASTERISK_PORT} -o StrictHostKeyChecking=no',
                        f'{ASTERISK_USER}@{enterprise["ip"]}:/var/spool/asterisk/monitor/{file_name}',
                        f'{thread_dir}/'
                    ]
                    
                    result = subprocess.run(cmd_rsync, capture_output=True, text=True, timeout=60)  # 1 –º–∏–Ω –Ω–∞ —Ñ–∞–π–ª
                    
                    if result.returncode == 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
                        local_file = os.path.join(thread_dir, file_name)
                        if os.path.exists(local_file):
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
                            dst = os.path.join(temp_dir, file_name)
                            shutil.move(local_file, dst)
                            success_count += 1
                    else:
                        logger.error(f"‚ùå {enterprise['name']} [–ü–æ—Ç–æ–∫ {thread_id}]: –æ—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ {file_name}: {result.stderr}")
                        
                except Exception as e:
                    logger.error(f"‚ùå {enterprise['name']} [–ü–æ—Ç–æ–∫ {thread_id}]: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            
            download_time = int(time.time() - start_time)
            logger.info(f"‚úÖ {enterprise['name']} [–ü–æ—Ç–æ–∫ {thread_id}]: —Å–∫–∞—á–∞–Ω–æ {success_count}/{group_size} —Ñ–∞–π–ª–æ–≤ –∑–∞ {download_time} —Å–µ–∫")
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ—Ç–æ–∫–∞
            shutil.rmtree(thread_dir, ignore_errors=True)
            
            return {'success_count': success_count}
        
        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        total_start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=actual_threads) as executor:
            future_to_thread = {
                executor.submit(download_group, group, i+1): i+1 
                for i, group in enumerate(file_groups)
            }
            
            total_downloaded = 0
            for future in as_completed(future_to_thread):
                try:
                    result = future.result()
                    total_downloaded += result['success_count']
                except Exception as e:
                    logger.error(f"‚ùå {enterprise['name']}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_time = int(time.time() - total_start_time)
        final_files = len([f for f in os.listdir(temp_dir) if f.endswith('.wav')])
        
        logger.info(f"‚úÖ {enterprise['name']}: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time} —Å–µ–∫")
        logger.info(f"üìä {enterprise['name']}: —Ñ–∞–π–ª–æ–≤ —Å–∫–∞—á–∞–Ω–æ: {final_files}/{total_files}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.total_downloaded += final_files
        
        if total_time > 0:
            speed = (final_files / total_time) * 60
            logger.info(f"üöÄ {enterprise['name']}: —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ ~3x)")
        
        return final_files > 0

    async def download_existing_recordings(self, enterprise: Dict, files_to_download: List[str]) -> bool:
        """
        –®–∞–≥ ‚Ññ4: –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã (–ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        files_to_download - —Å–ø–∏—Å–æ–∫ unique_id –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –Ω–∞ —Ö–æ—Å—Ç–µ –∏ –≤ –ë–î
        """
        if not files_to_download:
            logger.info(f"‚ö†Ô∏è {enterprise['name']}: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return True
            
        try:
            temp_dir = os.path.join(TEMP_BASE_DIR, enterprise['number'])
            logger.info(f"üì• {enterprise['name']}: –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(files_to_download)} –°–£–©–ï–°–¢–í–£–Æ–©–ò–• —Ñ–∞–π–ª–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            os.makedirs(temp_dir, exist_ok=True)
            logger.info(f"üìÅ {enterprise['name']}: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
            
            # üöÄ –ü–†–û–í–ï–†–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ?
            if ENABLE_PARALLEL_DOWNLOAD and len(files_to_download) >= 50:  # –î–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
                logger.info(f"üöÄ {enterprise['name']}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ({MAX_PARALLEL_THREADS} –ø–æ—Ç–æ–∫–æ–≤)")
                return self.download_recordings_parallel(enterprise, temp_dir, files_to_download)
            
            # –û–±—ã—á–Ω–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π)
            logger.info(f"üì• {enterprise['name']}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
            
            success_count = 0
            start_time = time.time()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª (–ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - —Ñ–∞–π–ª—ã —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!)
            for i, unique_id in enumerate(files_to_download, 1):
                try:
                    wav_file = f"{unique_id}.wav"
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ - –º—ã –∑–Ω–∞–µ–º —á—Ç–æ –æ–Ω –µ—Å—Ç—å)
                    cmd = [
                        'sshpass', '-p', ASTERISK_PASSWORD,
                        'rsync', '-avz',
                        '-e', f'ssh -p {ASTERISK_PORT} -o StrictHostKeyChecking=no',
                        f'{ASTERISK_USER}@{enterprise["ip"]}:/var/spool/asterisk/monitor/{wav_file}',
                        f'{temp_dir}/'
                    ]
                    
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)  # 1 –º–∏–Ω –Ω–∞ —Ñ–∞–π–ª
                    
                    if result.returncode == 0:
                        local_file = os.path.join(temp_dir, wav_file)
                        if os.path.exists(local_file):
                            success_count += 1
                            if i % 10 == 0:
                                logger.info(f"üì• {enterprise['name']}: —Å–∫–∞—á–∞–Ω–æ {success_count}/{i} —Ñ–∞–π–ª–æ–≤")
                        else:
                            logger.error(f"‚ùå {enterprise['name']} [{i}/{len(files_to_download)}]: —Ñ–∞–π–ª {wav_file} –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ø–æ—Å–ª–µ rsync")
                    else:
                        logger.error(f"‚ùå {enterprise['name']} [{i}/{len(files_to_download)}]: –æ—à–∏–±–∫–∞ rsync –¥–ª—è {wav_file}: {result.stderr}")
                        
                except Exception as e:
                    logger.error(f"‚ùå {enterprise['name']} [{i}/{len(files_to_download)}]: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {unique_id}: {e}")
            
            end_time = time.time()
            download_time = int(end_time - start_time)
            
            logger.info(f"‚úÖ {enterprise['name']}: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {download_time} —Å–µ–∫")
            logger.info(f"üìÅ {enterprise['name']}: —Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {success_count}/{len(files_to_download)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self.total_downloaded += success_count
            
            return success_count > 0
                
        except Exception as e:
            logger.error(f"‚ùå {enterprise['name']}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return False
    
    async def process_and_upload_recordings(self, enterprise: Dict) -> Tuple[int, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ S3 –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""
        temp_dir = os.path.join(TEMP_BASE_DIR, enterprise['number'])
        
        if not os.path.exists(temp_dir):
            logger.warning(f"‚ö†Ô∏è {enterprise['name']}: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return 0, 0
            
        try:
            logger.info(f"üîÑ {enterprise['name']}: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–≥—Ä—É–∑–∫—É –≤ S3...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ WAV —Ñ–∞–π–ª–æ–≤
            wav_files = [f for f in os.listdir(temp_dir) if f.endswith('.wav')]
            total_files = len(wav_files)
            
            if total_files == 0:
                logger.info(f"‚ö†Ô∏è {enterprise['name']}: –Ω–µ—Ç WAV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return 0, 0
                
            logger.info(f"üéµ {enterprise['name']}: –Ω–∞–π–¥–µ–Ω–æ WAV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_files}")
            
            # üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ S3 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!
            logger.info(f"üöÄ {enterprise['name']}: –Ω–∞—á–∏–Ω–∞–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –∑–∞–≥—Ä—É–∑–∫—É {total_files} —Ñ–∞–π–ª–æ–≤ –Ω–∞ S3...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            async def process_single_file(wav_file: str, file_index: int) -> Tuple[bool, str]:
                """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
                try:
                    call_unique_id = wav_file.replace('.wav', '')
                    wav_path = os.path.join(temp_dir, wav_file)
                    
                    logger.info(f"üì§ {enterprise['name']} [{file_index}/{total_files}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {call_unique_id}")
                    
                    # üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                    from app.services.postgres import get_call_recording_info
                    call_info = await get_call_recording_info(call_unique_id)
                    if call_info and call_info.get('s3_object_key'):
                        logger.info(f"‚ö†Ô∏è {enterprise['name']} [{file_index}/{total_files}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {call_unique_id} - —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ S3")
                        return False, call_unique_id  # –ù–µ –æ—à–∏–±–∫–∞, –Ω–æ –∏ –Ω–µ —É—Å–ø–µ—Ö
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è S3 –∫–ª–∏–µ–Ω—Ç–∞ —Å name2
                    upload_result = await self.upload_recording_with_name2(
                        enterprise_number=enterprise['number'],
                        enterprise_name2=enterprise['name2'],
                        call_unique_id=call_unique_id,
                        local_file_path=wav_path
                    )
                    
                    if upload_result:
                        file_url, object_key, uuid_token, recording_duration = upload_result
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –º–µ–Ω—è–µ–º call_url –∏ uuid_token! –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ S3 –¥–∞–Ω–Ω—ã–µ
                        db_success = await update_call_recording_info(
                            call_unique_id=call_unique_id,
                            s3_object_key=object_key,
                            recording_duration=recording_duration
                        )
                        
                        if db_success:
                            logger.info(f"‚úÖ {enterprise['name']} [{file_index}/{total_files}] –£—Å–ø–µ—à–Ω–æ: {call_unique_id} (UUID: {uuid_token})")
                            return True, call_unique_id
                        else:
                            logger.error(f"‚ùå {enterprise['name']} [{file_index}/{total_files}] –û—à–∏–±–∫–∞ –ë–î: {call_unique_id}")
                            return False, call_unique_id
                    else:
                        logger.error(f"‚ùå {enterprise['name']} [{file_index}/{total_files}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {call_unique_id}")
                        return False, call_unique_id
                        
                except Exception as e:
                    logger.error(f"‚ùå {enterprise['name']} [{file_index}/{total_files}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {wav_file}: {e}")
                    return False, wav_file.replace('.wav', '')
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å S3)
            upload_semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            
            async def process_with_semaphore(wav_file: str, file_index: int) -> Tuple[bool, str]:
                async with upload_semaphore:
                    return await process_single_file(wav_file, file_index)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!
            tasks = [
                process_with_semaphore(wav_file, i+1) 
                for i, wav_file in enumerate(wav_files)
            ]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = 0
            error_count = 0
            skipped_count = 0
            
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå {enterprise['name']}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {i+1}: {result}")
                    error_count += 1
                else:
                    success, call_id = result
                    if success:
                        success_count += 1
                    elif call_id:  # False –Ω–æ —Å call_id –æ–∑–Ω–∞—á–∞–µ—Ç "–ø—Ä–æ–ø—É—â–µ–Ω"
                        skipped_count += 1
                    else:
                        error_count += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if (i + 1) % 50 == 0:
                    logger.info(f"üìä {enterprise['name']}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{total_files} —Ñ–∞–π–ª–æ–≤ ({(i+1)/total_files*100:.1f}%)")
            
            logger.info(f"üìä {enterprise['name']}: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
            self.total_skipped += skipped_count
            
            return success_count, error_count
            
        except Exception as e:
            logger.error(f"‚ùå {enterprise['name']}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return 0, 0
    
    async def upload_recording_with_name2(self, enterprise_number: str, enterprise_name2: str, 
                                         call_unique_id: str, local_file_path: str) -> Optional[Tuple[str, str, str, int]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º name2"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ MP3
            mp3_file = await self.convert_wav_to_mp3(local_file_path)
            if not mp3_file:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {local_file_path}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            recording_duration = self.s3_client.get_audio_duration(mp3_file)
            if recording_duration is None:
                recording_duration = 0
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UUID –∏–∑ call_url –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ!
            from app.services.postgres import get_call_recording_info
            call_info = await get_call_recording_info(call_unique_id)
            
            if not call_info or not call_info.get('call_url'):
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω call_url –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_unique_id}")
                return None
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Å—ã–ª–∫–∏
            call_url = call_info['call_url']
            if '/recordings/file/' in call_url:
                uuid_token = call_url.split('/recordings/file/')[-1]
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UUID: {uuid_token} –∏–∑ {call_url}")
            else:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç call_url: {call_url}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å —Å name2
            call_date = datetime.now()
            object_key = f"CallRecords/{enterprise_name2}/{call_date.year:04d}/{call_date.month:02d}/{call_unique_id}.mp3"
            
            logger.info(f"üìÅ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å S3: {object_key}")
            logger.info(f"üîë UUID —Ç–æ–∫–µ–Ω: {uuid_token}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º boto3 –º–µ—Ç–æ–¥–æ–º
            try:
                self.s3_client.s3_client.upload_file(
                    mp3_file, 
                    self.s3_client.bucket_name, 
                    object_key,
                    ExtraArgs={
                        'Metadata': {
                            'enterprise-number': enterprise_number,
                            'call-unique-id': call_unique_id,
                            'upload-timestamp': datetime.utcnow().isoformat(),
                            'uuid-token': uuid_token
                        },
                        'ContentType': 'audio/mpeg'
                    }
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª
                if os.path.exists(mp3_file):
                    os.remove(mp3_file)
                    
                file_url = f"https://{self.s3_client.bucket_name}.{self.s3_client.region}.your-objectstorage.com/{object_key}"
                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_url} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {recording_duration}—Å)")
                return file_url, object_key, uuid_token, recording_duration
                
            except Exception as upload_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3: {upload_error}")
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if os.path.exists(mp3_file):
                    os.remove(mp3_file)
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    async def convert_wav_to_mp3(self, wav_file_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WAV —Ñ–∞–π–ª –≤ MP3"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è MP3
            mp3_file = tempfile.NamedTemporaryFile(suffix='.mp3', delete=False)
            mp3_file.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é ffmpeg
            cmd = ['ffmpeg', '-y', '-i', wav_file_path, '-acodec', 'mp3', '-ab', '64k', mp3_file.name]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(mp3_file.name):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
                wav_size = os.path.getsize(wav_file_path)
                mp3_size = os.path.getsize(mp3_file.name)
                compression = (1 - mp3_size / wav_size) * 100
                
                logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WAV‚ÜíMP3: {wav_size} ‚Üí {mp3_size} –±–∞–π—Ç (—Å–∂–∞—Ç–∏–µ {compression:.1f}%)")
                return mp3_file.name
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {result.stderr}")
                if os.path.exists(mp3_file.name):
                    os.remove(mp3_file.name)
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    def cleanup_temp_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            if os.path.exists(TEMP_BASE_DIR):
                shutil.rmtree(TEMP_BASE_DIR)
                logger.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {TEMP_BASE_DIR} —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def print_final_report(self, start_time: float):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        end_time = time.time()
        total_time = int(end_time - start_time)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        download_success_rate = (self.total_downloaded / max(self.total_needed_from_db, 1)) * 100
        upload_success_rate = (self.total_success / max(self.total_downloaded, 1)) * 100
        overall_success_rate = (self.total_success / max(self.total_needed_from_db, 1)) * 100
        
        report = f"""
{'='*80}
üéâ –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê
{'='*80}
üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫ ({total_time//60} –º–∏–Ω {total_time%60} —Å–µ–∫)
üè¢ –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.enterprises)}

üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
  üìÅ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö (>2KB): {self.total_found_on_servers}
  üéØ –ù—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏–∑ –ë–î: {self.total_needed_from_db}
  üì• –†–µ–∞–ª—å–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {self.total_downloaded}
  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ S3: {self.total_success}
  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ): {self.total_skipped}
  ‚ùå –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {self.total_errors}

üìà –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:
  üîÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {download_success_rate:.1f}% ({self.total_downloaded}/{self.total_needed_from_db})
  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ S3: {upload_success_rate:.1f}% ({self.total_success}/{self.total_downloaded})
  üéØ –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1f}% ({self.total_success}/{self.total_needed_from_db})

üìä –õ–æ–≥ —Ñ–∞–π–ª: {log_filename}
{'='*80}
"""
        print(report)
        logger.info(f"–ó–ê–í–ï–†–®–ï–ù–ê –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: {self.total_success}/{self.total_needed_from_db} —Ñ–∞–π–ª–æ–≤ (–æ–±—â–∏–π —É—Å–ø–µ—Ö {overall_success_rate:.1f}%) –∑–∞ {total_time} —Å–µ–∫")
    
    async def process_single_enterprise(self, enterprise: Dict, semaphore: asyncio.Semaphore) -> Tuple[int, int, int, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–Ω–∞—á–∞–ª–∞ —Ö–æ—Å—Ç, –ø–æ—Ç–æ–º –ë–î)"""
        async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            logger.info(f"\n{'='*60}")
            logger.info(f"üè¢ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£: {enterprise['number']} ({enterprise['name']})")
            logger.info(f"üìÅ name2: {enterprise['name2']} ‚Üí IP: {enterprise['ip']}")
            logger.info(f"{'='*60}")
            
            try:
                # –®–∞–≥ ‚Ññ1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö–æ—Å—Ç—É
                if not self.check_server_connection(enterprise):
                    logger.error(f"‚ùå {enterprise['name']}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    return 0, 0, 0, 0  # server_files, found_in_db, success, errors
                
                # –®–∞–≥ ‚Ññ2: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ
                server_files = await self.get_host_files_list(enterprise)
                if not server_files:
                    logger.info(f"‚ö†Ô∏è {enterprise['name']}: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ")
                    return 0, 0, 0, 0
                
                logger.info(f"üìÅ {enterprise['name']}: –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ >2KB –Ω–∞ —Ö–æ—Å—Ç–µ: {len(server_files)}")
                
                # –®–∞–≥ ‚Ññ3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –µ—Å—Ç—å –≤ –ë–î –∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ S3
                files_to_download = await self.check_files_in_database(enterprise, server_files)
                if not files_to_download:
                    logger.info(f"‚ö†Ô∏è {enterprise['name']}: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ö–æ—Å—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –∏–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)")
                    return len(server_files), 0, 0, 0
                
                logger.info(f"üìä {enterprise['name']}: –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {len(files_to_download)} –∏–∑ {len(server_files)} —Ñ–∞–π–ª–æ–≤")
                
                # –®–∞–≥ ‚Ññ4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
                if not await self.download_existing_recordings(enterprise, files_to_download):
                    logger.error(f"‚ùå {enterprise['name']}: –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    return len(server_files), len(files_to_download), 0, 0
                
                # –®–∞–≥ ‚Ññ5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3
                success_count, error_count = await self.process_and_upload_recordings(enterprise)
                
                logger.info(f"‚úÖ {enterprise['name']}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({success_count}/{len(files_to_download)} —É—Å–ø–µ—à–Ω–æ)")
                
                return len(server_files), len(files_to_download), success_count, error_count
                
            except Exception as e:
                logger.error(f"‚ùå {enterprise['name']}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                return 0, 0, 0, 0

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π"""
        start_time = time.time()
        
        try:
            self.print_banner()
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
            try:
                self.s3_client = HetznerS3Client(
                    access_key=S3_CONFIG['ACCESS_KEY'],
                    secret_key=S3_CONFIG['SECRET_KEY'],
                    region=S3_CONFIG['REGION']
                )
                logger.info("‚úÖ S3 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ S3: {e}")
                return
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            try:
                await init_pool()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                return
            
            # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
            self.enterprises = await self.get_enterprises_list()
            if not self.enterprises:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            os.makedirs(TEMP_BASE_DIR, exist_ok=True)
            
            # 5. üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
            logger.info(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ {len(self.enterprises)} –ü–†–ï–î–ü–†–ò–Ø–¢–ò–ô")
            logger.info(f"‚ö° –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {MAX_PARALLEL_ENTERPRISES} –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π")
            logger.info(f"{'='*80}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            semaphore = asyncio.Semaphore(MAX_PARALLEL_ENTERPRISES)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [
                self.process_single_enterprise(enterprise, semaphore) 
                for enterprise in self.enterprises
            ]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è {self.enterprises[i]['name']}: {result}")
                    continue
                    
                server_files, needed_files, success, errors = result
                self.total_found_on_servers += server_files
                self.total_needed_from_db += needed_files
                self.total_success += success
                self.total_errors += errors
            
            # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.print_final_report(start_time)
            
            # 7. –û—á–∏—Å—Ç–∫–∞
            self.cleanup_temp_files()
            
            logger.info("üéØ –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
            self.cleanup_temp_files()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    sync = DailyRecordingsSync()
    await sync.run()

if __name__ == "__main__":
    asyncio.run(main()) 