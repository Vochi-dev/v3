#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, os.path.abspath('.'))

from app.services.metadata_client import metadata_client

async def test_enrich_message_data():
    """–¢–µ—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    print("üîç Testing metadata enrichment...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è 0367
    enterprise_number = "0367"
    line_id = "0001363"
    internal_phone = "150"
    external_phone = "+375296254070"
    
    print(f"üìä Input data:")
    print(f"  enterprise_number: {enterprise_number}")
    print(f"  line_id: {line_id}")
    print(f"  internal_phone: {internal_phone}")
    print(f"  external_phone: {external_phone}")
    
    try:
        enriched_data = await metadata_client.enrich_message_data(
            enterprise_number=enterprise_number,
            line_id=line_id,
            internal_phone=internal_phone,
            external_phone=external_phone,
            short_names=False
        )
        
        print(f"\n‚úÖ Enriched data:")
        for key, value in enriched_data.items():
            print(f"  {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
        expected_fields = ["line_name", "line_operator", "manager_name", "customer_name"]
        missing_fields = [field for field in expected_fields if field not in enriched_data]
        
        if missing_fields:
            print(f"\n‚ö†Ô∏è  Missing expected fields: {missing_fields}")
        else:
            print(f"\nüéâ All expected fields present!")
            
        return enriched_data
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return None

async def test_individual_methods():
    """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    print("\nüß™ Testing individual methods...")
    
    enterprise_number = "0367"
    line_id = "0001363"
    internal_phone = "150"
    external_phone = "+375296254070"
    
    # –¢–µ—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏
    line_name = await metadata_client.get_line_name(enterprise_number, line_id)
    print(f"üì° Line name: {line_name}")
    
    # –¢–µ—Å—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø–æ–ª–Ω–æ–µ)
    manager_name_full = await metadata_client.get_manager_name(enterprise_number, internal_phone, short=False)
    print(f"üë§ Manager name (full): {manager_name_full}")
    
    # –¢–µ—Å—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–æ–µ)
    manager_name_short = await metadata_client.get_manager_name(enterprise_number, internal_phone, short=True)
    print(f"üë§ Manager name (short): {manager_name_short}")
    
    # –¢–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    personal_phone = await metadata_client.get_manager_personal_phone(enterprise_number, internal_phone)
    print(f"üì± Manager personal phone: {personal_phone}")
    
    # –¢–µ—Å—Ç –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    customer_name = await metadata_client.get_customer_name(enterprise_number, external_phone)
    print(f"üè¢ Customer name: {customer_name}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ Starting metadata enrichment test...")
    
    # –¢–µ—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    enriched = await test_enrich_message_data()
    
    # –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    await test_individual_methods()
    
    print("\nüèÅ Test completed!")

if __name__ == "__main__":
    asyncio.run(main())